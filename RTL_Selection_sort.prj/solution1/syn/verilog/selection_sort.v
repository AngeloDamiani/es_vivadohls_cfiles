// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="selection_sort,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.789000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=229,HLS_SYN_LUT=436}" *)

module selection_sort (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_address0,
        arr_ce0,
        arr_we0,
        arr_d0,
        arr_q0,
        arr_address1,
        arr_ce1,
        arr_we1,
        arr_d1,
        arr_q1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] arr_address0;
output   arr_ce0;
output   arr_we0;
output  [31:0] arr_d0;
input  [31:0] arr_q0;
output  [3:0] arr_address1;
output   arr_ce1;
output   arr_we1;
output  [31:0] arr_d1;
input  [31:0] arr_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] arr_address0;
reg arr_ce0;
reg arr_we0;
reg[3:0] arr_address1;
reg arr_ce1;
reg arr_we1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_111;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state7;
wire   [7:0] min_idx_1_cast1_fu_117_p1;
wire    ap_CS_fsm_state2;
wire   [3:0] i_fu_127_p2;
reg   [3:0] i_reg_259;
wire   [7:0] j_2_fu_133_p2;
reg   [7:0] j_2_reg_264;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_139_p2;
reg   [3:0] arr_addr_1_reg_283;
reg   [3:0] arr_addr_3_reg_288;
reg   [31:0] arr_load_1_reg_293;
wire   [0:0] notlhs_fu_200_p2;
reg   [0:0] notlhs_reg_299;
wire    ap_CS_fsm_state5;
wire   [0:0] notrhs_fu_206_p2;
reg   [0:0] notrhs_reg_304;
wire   [0:0] notlhs2_fu_212_p2;
reg   [0:0] notlhs2_reg_309;
wire   [0:0] notrhs3_fu_218_p2;
reg   [0:0] notrhs3_reg_314;
wire   [0:0] tmp_9_fu_107_p2;
reg   [0:0] tmp_9_reg_319;
wire   [7:0] j_fu_243_p3;
wire    ap_CS_fsm_state6;
reg   [3:0] min_idx_reg_76;
wire    ap_CS_fsm_state8;
reg   [7:0] index_1_assign_reg_88;
wire   [0:0] exitcond1_fu_121_p2;
reg   [7:0] j_0_in_reg_98;
wire  signed [63:0] tmp_fu_145_p1;
wire  signed [63:0] tmp_2_fu_150_p1;
wire  signed [63:0] tmp_i_fu_155_p1;
wire   [63:0] tmp_1_i_fu_160_p1;
wire   [31:0] arr_load_to_int_fu_165_p1;
wire   [31:0] arr_load_1_to_int_fu_183_p1;
wire   [7:0] tmp_1_fu_169_p4;
wire   [22:0] tmp_3_fu_179_p1;
wire   [7:0] tmp_4_fu_186_p4;
wire   [22:0] tmp_5_fu_196_p1;
wire   [0:0] tmp_6_fu_224_p2;
wire   [0:0] tmp_7_fu_228_p2;
wire   [0:0] tmp_8_fu_232_p2;
wire   [0:0] tmp_s_fu_238_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

selection_sort_fcbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
selection_sort_fcbkb_U1(
    .din0(reg_111),
    .din1(arr_load_1_reg_293),
    .opcode(5'd4),
    .dout(tmp_9_fu_107_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_fu_121_p2))) begin
        index_1_assign_reg_88 <= min_idx_1_cast1_fu_117_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        index_1_assign_reg_88 <= j_fu_243_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_fu_121_p2))) begin
        j_0_in_reg_98 <= min_idx_1_cast1_fu_117_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_in_reg_98 <= j_2_reg_264;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        min_idx_reg_76 <= i_reg_259;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        min_idx_reg_76 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_139_p2 == 1'd1))) begin
        arr_addr_1_reg_283 <= tmp_i_fu_155_p1;
        arr_addr_3_reg_288 <= tmp_1_i_fu_160_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        arr_load_1_reg_293 <= arr_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_259 <= i_fu_127_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_2_reg_264 <= j_2_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        notlhs2_reg_309 <= notlhs2_fu_212_p2;
        notlhs_reg_299 <= notlhs_fu_200_p2;
        notrhs3_reg_314 <= notrhs3_fu_218_p2;
        notrhs_reg_304 <= notrhs_fu_206_p2;
        tmp_9_reg_319 <= tmp_9_fu_107_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_111 <= arr_q0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond1_fu_121_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond1_fu_121_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        arr_address0 = arr_addr_1_reg_283;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_139_p2 == 1'd1))) begin
        arr_address0 = tmp_i_fu_155_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_139_p2 == 1'd0))) begin
        arr_address0 = tmp_fu_145_p1;
    end else begin
        arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        arr_address1 = arr_addr_3_reg_288;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_139_p2 == 1'd1))) begin
        arr_address1 = tmp_1_i_fu_160_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_139_p2 == 1'd0))) begin
        arr_address1 = tmp_2_fu_150_p1;
    end else begin
        arr_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_139_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_139_p2 == 1'd1)))) begin
        arr_ce0 = 1'b1;
    end else begin
        arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_139_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_139_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state8))) begin
        arr_ce1 = 1'b1;
    end else begin
        arr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        arr_we0 = 1'b1;
    end else begin
        arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        arr_we1 = 1'b1;
    end else begin
        arr_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond1_fu_121_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_139_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign arr_d0 = arr_q1;

assign arr_d1 = reg_111;

assign arr_load_1_to_int_fu_183_p1 = arr_load_1_reg_293;

assign arr_load_to_int_fu_165_p1 = reg_111;

assign exitcond1_fu_121_p2 = ((min_idx_reg_76 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_fu_139_p2 = ((j_0_in_reg_98 == 8'd9) ? 1'b1 : 1'b0);

assign i_fu_127_p2 = (min_idx_reg_76 + 4'd1);

assign j_2_fu_133_p2 = (j_0_in_reg_98 + 8'd1);

assign j_fu_243_p3 = ((tmp_s_fu_238_p2[0:0] === 1'b1) ? j_2_reg_264 : index_1_assign_reg_88);

assign min_idx_1_cast1_fu_117_p1 = min_idx_reg_76;

assign notlhs2_fu_212_p2 = ((tmp_4_fu_186_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_200_p2 = ((tmp_1_fu_169_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs3_fu_218_p2 = ((tmp_5_fu_196_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_206_p2 = ((tmp_3_fu_179_p1 == 23'd0) ? 1'b1 : 1'b0);

assign tmp_1_fu_169_p4 = {{arr_load_to_int_fu_165_p1[30:23]}};

assign tmp_1_i_fu_160_p1 = min_idx_reg_76;

assign tmp_2_fu_150_p1 = $signed(index_1_assign_reg_88);

assign tmp_3_fu_179_p1 = arr_load_to_int_fu_165_p1[22:0];

assign tmp_4_fu_186_p4 = {{arr_load_1_to_int_fu_183_p1[30:23]}};

assign tmp_5_fu_196_p1 = arr_load_1_to_int_fu_183_p1[22:0];

assign tmp_6_fu_224_p2 = (notrhs_reg_304 | notlhs_reg_299);

assign tmp_7_fu_228_p2 = (notrhs3_reg_314 | notlhs2_reg_309);

assign tmp_8_fu_232_p2 = (tmp_6_fu_224_p2 & tmp_7_fu_228_p2);

assign tmp_fu_145_p1 = $signed(j_2_fu_133_p2);

assign tmp_i_fu_155_p1 = $signed(index_1_assign_reg_88);

assign tmp_s_fu_238_p2 = (tmp_8_fu_232_p2 & tmp_9_reg_319);

endmodule //selection_sort
