// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _floyd_warshall_HH_
#define _floyd_warshall_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct floyd_warshall : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_in< sc_lv<32> > A_q0;
    sc_out< sc_lv<7> > A_address1;
    sc_out< sc_logic > A_ce1;
    sc_out< sc_logic > A_we1;
    sc_out< sc_lv<32> > A_d1;
    sc_in< sc_lv<32> > A_q1;


    // Module declarations
    floyd_warshall(sc_module_name name);
    SC_HAS_PROCESS(floyd_warshall);

    ~floyd_warshall();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > indvar_flatten1_reg_95;
    sc_signal< sc_lv<4> > h_reg_106;
    sc_signal< sc_lv<8> > indvar_flatten_reg_117;
    sc_signal< sc_lv<4> > i_reg_128;
    sc_signal< sc_lv<4> > j_reg_139;
    sc_signal< sc_lv<1> > exitcond_flatten1_fu_150_p2;
    sc_signal< sc_lv<1> > exitcond_flatten1_reg_358;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_flatten1_reg_358;
    sc_signal< sc_lv<10> > indvar_flatten_next1_fu_156_p2;
    sc_signal< sc_lv<10> > indvar_flatten_next1_reg_362;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<4> > i_mid_fu_174_p3;
    sc_signal< sc_lv<4> > i_mid_reg_367;
    sc_signal< sc_lv<4> > tmp_1_mid2_v_fu_182_p3;
    sc_signal< sc_lv<4> > tmp_1_mid2_v_reg_373;
    sc_signal< sc_lv<1> > tmp_5_mid_fu_202_p2;
    sc_signal< sc_lv<1> > tmp_5_mid_reg_381;
    sc_signal< sc_lv<4> > j_mid2_fu_214_p3;
    sc_signal< sc_lv<4> > j_mid2_reg_386;
    sc_signal< sc_lv<8> > indvar_flatten_next_fu_228_p3;
    sc_signal< sc_lv<8> > indvar_flatten_next_reg_392;
    sc_signal< sc_lv<4> > tmp_4_mid2_fu_269_p3;
    sc_signal< sc_lv<4> > tmp_4_mid2_reg_397;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_flag00011001;
    sc_signal< sc_lv<8> > tmp_7_cast_fu_275_p1;
    sc_signal< sc_lv<8> > tmp_7_cast_reg_404;
    sc_signal< sc_lv<4> > j_1_fu_289_p2;
    sc_signal< sc_lv<4> > j_1_reg_414;
    sc_signal< sc_lv<7> > A_addr_2_reg_424;
    sc_signal< sc_lv<32> > A_load_1_reg_429;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage1_flag00011011;
    sc_signal< sc_lv<10> > indvar_flatten1_phi_fu_99_p4;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_lv<4> > h_phi_fu_110_p4;
    sc_signal< sc_lv<8> > indvar_flatten_phi_fu_121_p4;
    sc_signal< sc_lv<4> > i_phi_fu_132_p4;
    sc_signal< sc_lv<4> > j_phi_fu_143_p4;
    sc_signal< sc_lv<64> > tmp_13_cast_fu_284_p1;
    sc_signal< bool > ap_block_pp0_stage1_flag00000000;
    sc_signal< sc_lv<64> > tmp_12_cast_fu_331_p1;
    sc_signal< sc_lv<64> > tmp_14_cast_fu_341_p1;
    sc_signal< sc_lv<1> > tmp_9_fu_352_p2;
    sc_signal< sc_lv<32> > tmp_8_fu_346_p2;
    sc_signal< sc_lv<1> > exitcond_flatten9_fu_168_p2;
    sc_signal< sc_lv<4> > h_1_fu_162_p2;
    sc_signal< sc_lv<1> > tmp_4_fu_196_p2;
    sc_signal< sc_lv<1> > not_exitcond_flatten_fu_190_p2;
    sc_signal< sc_lv<1> > tmp_3_fu_208_p2;
    sc_signal< sc_lv<8> > indvar_flatten_op_fu_222_p2;
    sc_signal< sc_lv<7> > tmp_fu_236_p3;
    sc_signal< sc_lv<5> > tmp_1_fu_247_p3;
    sc_signal< sc_lv<8> > p_shl2_cast_fu_243_p1;
    sc_signal< sc_lv<8> > p_shl3_cast_fu_254_p1;
    sc_signal< sc_lv<4> > i_1_fu_264_p2;
    sc_signal< sc_lv<8> > tmp_2_fu_258_p2;
    sc_signal< sc_lv<8> > tmp_11_fu_278_p2;
    sc_signal< sc_lv<7> > tmp_5_fu_297_p3;
    sc_signal< sc_lv<5> > tmp_6_fu_308_p3;
    sc_signal< sc_lv<8> > p_shl_cast_fu_304_p1;
    sc_signal< sc_lv<8> > p_shl1_cast_fu_315_p1;
    sc_signal< sc_lv<8> > tmp_1_mid2_cast_fu_294_p1;
    sc_signal< sc_lv<8> > tmp_7_fu_319_p2;
    sc_signal< sc_lv<8> > tmp_10_fu_325_p2;
    sc_signal< sc_lv<8> > tmp_12_fu_336_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<10> ap_const_lv10_3E8;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<8> ap_const_lv8_64;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_address1();
    void thread_A_ce0();
    void thread_A_ce1();
    void thread_A_d1();
    void thread_A_we1();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_pp0_stage1_flag00000000();
    void thread_ap_block_pp0_stage1_flag00011001();
    void thread_ap_block_pp0_stage1_flag00011011();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_exitcond_flatten1_fu_150_p2();
    void thread_exitcond_flatten9_fu_168_p2();
    void thread_h_1_fu_162_p2();
    void thread_h_phi_fu_110_p4();
    void thread_i_1_fu_264_p2();
    void thread_i_mid_fu_174_p3();
    void thread_i_phi_fu_132_p4();
    void thread_indvar_flatten1_phi_fu_99_p4();
    void thread_indvar_flatten_next1_fu_156_p2();
    void thread_indvar_flatten_next_fu_228_p3();
    void thread_indvar_flatten_op_fu_222_p2();
    void thread_indvar_flatten_phi_fu_121_p4();
    void thread_j_1_fu_289_p2();
    void thread_j_mid2_fu_214_p3();
    void thread_j_phi_fu_143_p4();
    void thread_not_exitcond_flatten_fu_190_p2();
    void thread_p_shl1_cast_fu_315_p1();
    void thread_p_shl2_cast_fu_243_p1();
    void thread_p_shl3_cast_fu_254_p1();
    void thread_p_shl_cast_fu_304_p1();
    void thread_tmp_10_fu_325_p2();
    void thread_tmp_11_fu_278_p2();
    void thread_tmp_12_cast_fu_331_p1();
    void thread_tmp_12_fu_336_p2();
    void thread_tmp_13_cast_fu_284_p1();
    void thread_tmp_14_cast_fu_341_p1();
    void thread_tmp_1_fu_247_p3();
    void thread_tmp_1_mid2_cast_fu_294_p1();
    void thread_tmp_1_mid2_v_fu_182_p3();
    void thread_tmp_2_fu_258_p2();
    void thread_tmp_3_fu_208_p2();
    void thread_tmp_4_fu_196_p2();
    void thread_tmp_4_mid2_fu_269_p3();
    void thread_tmp_5_fu_297_p3();
    void thread_tmp_5_mid_fu_202_p2();
    void thread_tmp_6_fu_308_p3();
    void thread_tmp_7_cast_fu_275_p1();
    void thread_tmp_7_fu_319_p2();
    void thread_tmp_8_fu_346_p2();
    void thread_tmp_9_fu_352_p2();
    void thread_tmp_fu_236_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
