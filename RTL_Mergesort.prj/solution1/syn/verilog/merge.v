// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module merge (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i1,
        f1,
        f2,
        arr_address0,
        arr_ce0,
        arr_q0,
        arr_address1,
        arr_ce1,
        arr_we1,
        arr_d1,
        arr_q1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] i1;
input  [63:0] f1;
input  [63:0] f2;
output  [3:0] arr_address0;
output   arr_ce0;
input  [63:0] arr_q0;
output  [3:0] arr_address1;
output   arr_ce1;
output   arr_we1;
output  [63:0] arr_d1;
input  [63:0] arr_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] arr_address0;
reg arr_ce0;
reg[3:0] arr_address1;
reg arr_ce1;
reg arr_we1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] p_0_load_reg_451;
wire    ap_CS_fsm_state2;
reg   [7:0] i2_1_load_reg_457;
wire   [0:0] tmp_1_fu_276_p2;
reg   [0:0] tmp_1_reg_463;
wire   [7:0] i_1_fu_281_p2;
reg   [7:0] i_1_reg_467;
wire   [0:0] tmp_3_fu_292_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_12_fu_338_p2;
wire   [7:0] tmp_16_fu_343_p2;
reg   [7:0] tmp_16_reg_496;
wire   [0:0] tmp_6_fu_354_p2;
wire   [7:0] tmp_9_fu_359_p2;
reg   [7:0] tmp_9_reg_509;
wire   [7:0] i_6_fu_365_p2;
wire    ap_CS_fsm_state5;
wire   [7:0] i_5_fu_376_p2;
wire    ap_CS_fsm_state6;
wire  signed [63:0] tmp_18_fu_387_p1;
reg  signed [63:0] tmp_18_reg_524;
wire    ap_CS_fsm_state7;
wire   [7:0] i_7_fu_396_p2;
reg   [7:0] i_7_reg_532;
wire   [0:0] tmp_19_fu_391_p2;
wire   [7:0] tmp_21_fu_407_p2;
reg   [7:0] tmp_21_reg_542;
reg   [3:0] x_address0;
reg    x_ce0;
reg    x_we0;
reg   [63:0] x_d0;
wire   [63:0] x_q0;
reg   [7:0] i_reg_173;
wire    ap_CS_fsm_state3;
reg   [7:0] tmp_10_reg_185;
reg   [7:0] i_2_reg_194;
reg   [7:0] tmp_4_reg_205;
reg   [7:0] i_3_reg_214;
reg   [7:0] tmp_17_reg_225;
wire    ap_CS_fsm_state8;
reg   [7:0] i_4_reg_234;
wire  signed [63:0] tmp_s_fu_271_p1;
wire  signed [63:0] tmp_2_fu_287_p1;
wire  signed [63:0] tmp_14_fu_308_p1;
wire   [0:0] tmp_7_fu_297_p2;
wire  signed [63:0] tmp_13_fu_323_p1;
wire  signed [63:0] tmp_11_fu_333_p1;
wire  signed [63:0] tmp_5_fu_349_p1;
wire  signed [63:0] tmp_15_fu_371_p1;
wire  signed [63:0] tmp_8_fu_382_p1;
wire  signed [63:0] tmp_20_fu_402_p1;
reg   [7:0] p_0_fu_54;
wire   [7:0] i1_assign_fu_303_p2;
reg   [7:0] i2_1_fu_58;
wire   [7:0] i2_fu_249_p2;
wire   [7:0] i2_2_fu_318_p2;
wire   [7:0] tmp_fu_245_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

merge_x #(
    .DataWidth( 64 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_address0),
    .ce0(x_ce0),
    .we0(x_we0),
    .d0(x_d0),
    .q0(x_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_7_fu_297_p2))) begin
        i2_1_fu_58 <= i2_2_fu_318_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i2_1_fu_58 <= i2_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_276_p2 == 1'd0) & (tmp_3_fu_292_p2 == 1'd1))) begin
        i_2_reg_194 <= i_reg_173;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_194 <= i_6_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_276_p2 == 1'd1))) begin
        i_3_reg_214 <= i_reg_173;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_3_reg_214 <= i_5_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_4_reg_234 <= i_7_reg_532;
    end else if (((1'b1 == ap_CS_fsm_state4) & (((tmp_1_reg_463 == 1'd0) & (tmp_12_fu_338_p2 == 1'd1)) | ((tmp_1_reg_463 == 1'd1) & (1'd1 == tmp_6_fu_354_p2))))) begin
        i_4_reg_234 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_173 <= i_1_reg_467;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_173 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_7_fu_297_p2))) begin
        p_0_fu_54 <= i1_assign_fu_303_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_0_fu_54 <= i1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_276_p2 == 1'd0) & (tmp_3_fu_292_p2 == 1'd1))) begin
        tmp_10_reg_185 <= p_0_fu_54;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_10_reg_185 <= tmp_16_reg_496;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_17_reg_225 <= tmp_21_reg_542;
    end else if (((1'b1 == ap_CS_fsm_state4) & (((tmp_1_reg_463 == 1'd0) & (tmp_12_fu_338_p2 == 1'd1)) | ((tmp_1_reg_463 == 1'd1) & (1'd1 == tmp_6_fu_354_p2))))) begin
        tmp_17_reg_225 <= i1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_276_p2 == 1'd1))) begin
        tmp_4_reg_205 <= i2_1_fu_58;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_4_reg_205 <= tmp_9_reg_509;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i2_1_load_reg_457 <= i2_1_fu_58;
        i_1_reg_467 <= i_1_fu_281_p2;
        p_0_load_reg_451 <= p_0_fu_54;
        tmp_1_reg_463 <= tmp_1_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_7_reg_532 <= i_7_fu_396_p2;
        tmp_18_reg_524 <= tmp_18_fu_387_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_1_reg_463 == 1'd0) & (1'd0 == tmp_12_fu_338_p2))) begin
        tmp_16_reg_496 <= tmp_16_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_19_fu_391_p2))) begin
        tmp_21_reg_542 <= tmp_21_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_1_reg_463 == 1'd1) & (1'd0 == tmp_6_fu_354_p2))) begin
        tmp_9_reg_509 <= tmp_9_fu_359_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_19_fu_391_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_19_fu_391_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_1_reg_463 == 1'd1) & (1'd0 == tmp_6_fu_354_p2))) begin
        arr_address0 = tmp_5_fu_349_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_1_reg_463 == 1'd0) & (1'd0 == tmp_12_fu_338_p2))) begin
        arr_address0 = tmp_11_fu_333_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        arr_address0 = tmp_s_fu_271_p1;
    end else begin
        arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        arr_address1 = tmp_18_reg_524;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        arr_address1 = tmp_2_fu_287_p1;
    end else begin
        arr_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state4) & (tmp_1_reg_463 == 1'd0) & (1'd0 == tmp_12_fu_338_p2)) | ((1'b1 == ap_CS_fsm_state4) & (tmp_1_reg_463 == 1'd1) & (1'd0 == tmp_6_fu_354_p2)))) begin
        arr_ce0 = 1'b1;
    end else begin
        arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8))) begin
        arr_ce1 = 1'b1;
    end else begin
        arr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        arr_we1 = 1'b1;
    end else begin
        arr_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_address0 = tmp_20_fu_402_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_address0 = tmp_8_fu_382_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_address0 = tmp_15_fu_371_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_7_fu_297_p2))) begin
        x_address0 = tmp_13_fu_323_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_7_fu_297_p2))) begin
        x_address0 = tmp_14_fu_308_p1;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_7_fu_297_p2)) | ((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_7_fu_297_p2)))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_7_fu_297_p2))) begin
        x_d0 = arr_q1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_7_fu_297_p2)))) begin
        x_d0 = arr_q0;
    end else begin
        x_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_7_fu_297_p2)) | ((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_7_fu_297_p2)))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((tmp_3_fu_292_p2 == 1'd1) | (tmp_1_fu_276_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (((tmp_1_reg_463 == 1'd0) & (tmp_12_fu_338_p2 == 1'd1)) | ((tmp_1_reg_463 == 1'd1) & (1'd1 == tmp_6_fu_354_p2))))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_1_reg_463 == 1'd1) & (1'd0 == tmp_6_fu_354_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_19_fu_391_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign arr_d1 = x_q0;

assign i1_assign_fu_303_p2 = (p_0_load_reg_451 + 8'd1);

assign i2_2_fu_318_p2 = (i2_1_load_reg_457 + 8'd1);

assign i2_fu_249_p2 = (8'd1 + tmp_fu_245_p1);

assign i_1_fu_281_p2 = (i_reg_173 + 8'd1);

assign i_5_fu_376_p2 = (i_3_reg_214 + 8'd1);

assign i_6_fu_365_p2 = (i_2_reg_194 + 8'd1);

assign i_7_fu_396_p2 = (i_4_reg_234 + 8'd1);

assign tmp_11_fu_333_p1 = $signed(tmp_10_reg_185);

assign tmp_12_fu_338_p2 = (($signed(tmp_11_fu_333_p1) > $signed(f1)) ? 1'b1 : 1'b0);

assign tmp_13_fu_323_p1 = $signed(i_reg_173);

assign tmp_14_fu_308_p1 = $signed(i_reg_173);

assign tmp_15_fu_371_p1 = $signed(i_2_reg_194);

assign tmp_16_fu_343_p2 = (tmp_10_reg_185 + 8'd1);

assign tmp_18_fu_387_p1 = $signed(tmp_17_reg_225);

assign tmp_19_fu_391_p2 = (($signed(tmp_18_fu_387_p1) > $signed(f2)) ? 1'b1 : 1'b0);

assign tmp_1_fu_276_p2 = (($signed(tmp_s_fu_271_p1) > $signed(f1)) ? 1'b1 : 1'b0);

assign tmp_20_fu_402_p1 = $signed(i_4_reg_234);

assign tmp_21_fu_407_p2 = (tmp_17_reg_225 + 8'd1);

assign tmp_2_fu_287_p1 = $signed(i2_1_fu_58);

assign tmp_3_fu_292_p2 = (($signed(tmp_2_fu_287_p1) > $signed(f2)) ? 1'b1 : 1'b0);

assign tmp_5_fu_349_p1 = $signed(tmp_4_reg_205);

assign tmp_6_fu_354_p2 = (($signed(tmp_5_fu_349_p1) > $signed(f2)) ? 1'b1 : 1'b0);

assign tmp_7_fu_297_p2 = (($signed(arr_q0) > $signed(arr_q1)) ? 1'b1 : 1'b0);

assign tmp_8_fu_382_p1 = $signed(i_3_reg_214);

assign tmp_9_fu_359_p2 = (tmp_4_reg_205 + 8'd1);

assign tmp_fu_245_p1 = f1[7:0];

assign tmp_s_fu_271_p1 = $signed(p_0_fu_54);

endmodule //merge
