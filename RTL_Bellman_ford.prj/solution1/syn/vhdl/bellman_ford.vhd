-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bellman_ford is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    graph_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    graph_ce0 : OUT STD_LOGIC;
    graph_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hwdist_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    hwdist_ce0 : OUT STD_LOGIC;
    hwdist_we0 : OUT STD_LOGIC;
    hwdist_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    hwdist_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    hwdist_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    hwdist_ce1 : OUT STD_LOGIC;
    hwdist_we1 : OUT STD_LOGIC;
    hwdist_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    hwdist_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of bellman_ford is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bellman_ford,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.735000,HLS_SYN_LAT=4446,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=2178,HLS_SYN_LUT=2620}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_7F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_303_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_10_fu_363_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_810 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_375_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_818 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_1_fu_401_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_831 : STD_LOGIC_VECTOR (3 downto 0);
    signal notlhs_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_836 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal notrhs_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_841 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_846 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast3_cast_fu_470_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast3_cast_reg_851 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_2_fu_480_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_859 : STD_LOGIC_VECTOR (3 downto 0);
    signal hwdist_addr_10_reg_864 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal graph_addr_reg_870 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_2_fu_537_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal j_2_reg_878 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_reg_888 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal notrhs2_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs2_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_898 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_903 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal notlhs9_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs9_reg_914 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal notrhs1_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs1_reg_919 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_924 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_1_fu_631_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_929 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal or_cond_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_938 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_fu_691_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_709_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_reg_948 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_2_fu_774_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_2_reg_954 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal i_i_reg_255 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_i_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i_reg_266 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_i_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_reg_277 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j_reg_288 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_27_cast_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_cast3_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_cast_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal total_edges_fu_118 : STD_LOGIC_VECTOR (63 downto 0);
    signal total_edges_2_fu_452_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal p_Val2_4_fu_790_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_303_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_308_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_308_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_339_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_351_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl1_cast_fu_359_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_347_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_i_cast4_cast_fu_381_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_385_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal graph_load_1_to_int_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_411_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_421_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_6_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal total_edges_1_fu_446_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_491_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_25_fu_503_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_cast_fu_507_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_495_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_515_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_521_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal graph_load_to_int_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_547_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_557_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_20_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_to_int_fu_588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_592_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_602_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_s_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_fu_621_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal notrhs8_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_i_cast1_fu_681_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_685_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_i_i_i_fu_699_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_i_i_i_cast_fu_705_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_i_i_i_fu_717_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_1_cast_fu_730_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_733_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_3_i_i_i_cast2_fu_726_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal tmp_7_i_i_i_fu_736_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal tmp_8_i_i_i_fu_740_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_35_fu_752_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_fu_746_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal tmp_28_fu_760_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_31_fu_764_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_1_i_i_i_fu_781_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_i_i_i_fu_784_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_308_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);

    component bellman_ford_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bellman_ford_sitocud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bellman_ford_fcmpdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    bellman_ford_faddbkb_U1 : component bellman_ford_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_328,
        din1 => reg_316,
        ce => ap_const_logic_1,
        dout => grp_fu_299_p2);

    bellman_ford_sitocud_U2 : component bellman_ford_sitocud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_303_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_303_p1);

    bellman_ford_fcmpdEe_U3 : component bellman_ford_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_308_p0,
        din1 => grp_fu_308_p1,
        opcode => grp_fu_308_opcode,
        dout => grp_fu_308_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_i_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond_i_fu_395_p2))) then 
                i_i_reg_255 <= i_1_reg_818;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_i_reg_255 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = tmp_fu_531_p2))) then 
                i_reg_277 <= i_2_reg_859;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_reg_277 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_i_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_i_reg_266 <= j_1_reg_831;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_i_fu_369_p2))) then 
                j_i_reg_266 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                j_reg_288 <= j_2_reg_878;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_474_p2 = ap_const_lv1_0))) then 
                j_reg_288 <= ap_const_lv63_0;
            end if; 
        end if;
    end process;

    total_edges_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                total_edges_fu_118 <= total_edges_2_fu_452_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                total_edges_fu_118 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                graph_addr_reg_870 <= tmp_30_cast_fu_526_p1(7 - 1 downto 0);
                j_2_reg_878 <= j_2_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_474_p2 = ap_const_lv1_0))) then
                hwdist_addr_10_reg_864 <= i_cast3_fu_465_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_818 <= i_1_fu_375_p2;
                    tmp_10_reg_810(7 downto 1) <= tmp_10_fu_363_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_2_reg_859 <= i_2_fu_480_p2;
                    i_cast3_cast_reg_851(3 downto 0) <= i_cast3_cast_fu_470_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_1 = or_cond_fu_668_p2))) then
                isNeg_reg_943 <= sh_assign_fu_685_p2(8 downto 8);
                p_Result_s_reg_938 <= p_Val2_s_fu_618_p1(31 downto 31);
                sh_assign_1_reg_948 <= sh_assign_1_fu_709_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_831 <= j_1_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                loc_V_1_reg_929 <= loc_V_1_fu_631_p1;
                or_cond_reg_934 <= or_cond_fu_668_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                notlhs1_reg_888 <= notlhs1_fu_561_p2;
                notrhs2_reg_893 <= notrhs2_fu_567_p2;
                tmp_21_reg_898 <= grp_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                notlhs9_reg_914 <= notlhs9_fu_606_p2;
                notrhs1_reg_919 <= notrhs1_fu_612_p2;
                tmp_16_reg_924 <= grp_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                notlhs_reg_836 <= notlhs_fu_425_p2;
                notrhs_reg_841 <= notrhs_fu_431_p2;
                tmp_7_reg_846 <= grp_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                p_Val2_2_reg_954 <= p_Val2_2_fu_774_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_316 <= graph_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
                reg_328 <= grp_fu_303_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_23_reg_903 <= tmp_23_fu_582_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                x_assign_reg_908 <= grp_fu_299_p2;
            end if;
        end if;
    end process;
    tmp_10_reg_810(0) <= '0';
    i_cast3_cast_reg_851(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state11, exitcond_fu_474_p2, ap_CS_fsm_state12, tmp_fu_531_p2, ap_CS_fsm_state25, or_cond_fu_668_p2, exitcond_i_fu_395_p2, exitcond1_i_fu_369_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_i_fu_369_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond_i_fu_395_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_474_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = tmp_fu_531_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_0 = or_cond_fu_668_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state11, exitcond_fu_474_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_474_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, exitcond_fu_474_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_474_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_fu_369_p2 <= "1" when (i_i_reg_255 = ap_const_lv4_A) else "0";
    exitcond_fu_474_p2 <= "1" when (i_reg_277 = ap_const_lv4_A) else "0";
    exitcond_i_fu_395_p2 <= "1" when (j_i_reg_266 = ap_const_lv4_A) else "0";

    graph_address0_assign_proc : process(ap_CS_fsm_state3, graph_addr_reg_870, tmp_27_cast_fu_390_p1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            graph_address0 <= graph_addr_reg_870;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            graph_address0 <= tmp_27_cast_fu_390_p1(7 - 1 downto 0);
        else 
            graph_address0 <= "XXXXXXX";
        end if; 
    end process;


    graph_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            graph_ce0 <= ap_const_logic_1;
        else 
            graph_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    graph_load_1_to_int_fu_407_p1 <= reg_316;
    graph_load_to_int_fu_543_p1 <= reg_316;

    grp_fu_303_p0_assign_proc : process(hwdist_q0, hwdist_q1, ap_CS_fsm_state18, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_303_p0 <= hwdist_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_303_p0 <= hwdist_q0;
        else 
            grp_fu_303_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_308_opcode_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state19, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_308_opcode <= ap_const_lv5_5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_308_opcode <= ap_const_lv5_1;
        else 
            grp_fu_308_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_308_p0_assign_proc : process(reg_316, ap_CS_fsm_state5, ap_CS_fsm_state19, x_assign_reg_908, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_308_p0 <= x_assign_reg_908;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_308_p0 <= reg_316;
        else 
            grp_fu_308_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_308_p1_assign_proc : process(reg_328, ap_CS_fsm_state5, ap_CS_fsm_state19, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_308_p1 <= reg_328;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_fu_308_p1 <= ap_const_lv32_BF800000;
        else 
            grp_fu_308_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hwdist_address0_assign_proc : process(ap_CS_fsm_state2, hwdist_addr_10_reg_864, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, j_cast_fu_486_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            hwdist_address0 <= hwdist_addr_10_reg_864;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hwdist_address0 <= j_cast_fu_486_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hwdist_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hwdist_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hwdist_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hwdist_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hwdist_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            hwdist_address0 <= "XXXX";
        end if; 
    end process;


    hwdist_address1_assign_proc : process(ap_CS_fsm_state2, hwdist_addr_10_reg_864, ap_CS_fsm_state10, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            hwdist_address1 <= hwdist_addr_10_reg_864;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hwdist_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hwdist_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hwdist_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hwdist_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hwdist_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        else 
            hwdist_address1 <= "XXXX";
        end if; 
    end process;


    hwdist_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hwdist_ce0 <= ap_const_logic_1;
        else 
            hwdist_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hwdist_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            hwdist_ce1 <= ap_const_logic_1;
        else 
            hwdist_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hwdist_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, p_Val2_4_fu_790_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            hwdist_d0 <= p_Val2_4_fu_790_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hwdist_d0 <= ap_const_lv64_7F;
        else 
            hwdist_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hwdist_d1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hwdist_d1 <= ap_const_lv64_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hwdist_d1 <= ap_const_lv64_7F;
        else 
            hwdist_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hwdist_we0_assign_proc : process(ap_CS_fsm_state2, or_cond_reg_934, exitcond1_i_fu_369_p2, ap_CS_fsm_state10, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_i_fu_369_p2)) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = or_cond_reg_934)))) then 
            hwdist_we0 <= ap_const_logic_1;
        else 
            hwdist_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hwdist_we1_assign_proc : process(ap_CS_fsm_state2, exitcond1_i_fu_369_p2, ap_CS_fsm_state10, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond1_i_fu_369_p2)) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hwdist_we1 <= ap_const_logic_1;
        else 
            hwdist_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_375_p2 <= std_logic_vector(unsigned(i_i_reg_255) + unsigned(ap_const_lv4_1));
    i_2_fu_480_p2 <= std_logic_vector(unsigned(i_reg_277) + unsigned(ap_const_lv4_1));
    i_cast3_cast_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_277),8));
    i_cast3_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_277),64));
    isNeg_fu_691_p3 <= sh_assign_fu_685_p2(8 downto 8);
    j_1_fu_401_p2 <= std_logic_vector(unsigned(j_i_reg_266) + unsigned(ap_const_lv4_1));
    j_2_fu_537_p2 <= std_logic_vector(unsigned(ap_const_lv63_1) + unsigned(j_reg_288));
    j_cast_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_288),64));
    j_i_cast4_cast_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_266),8));
    loc_V_1_fu_631_p1 <= p_Val2_s_fu_618_p1(23 - 1 downto 0);
    loc_V_fu_621_p4 <= p_Val2_s_fu_618_p1(30 downto 23);
    notlhs1_fu_561_p2 <= "0" when (tmp_18_fu_547_p4 = ap_const_lv8_FF) else "1";
    notlhs7_fu_635_p2 <= "0" when (loc_V_fu_621_p4 = ap_const_lv8_FF) else "1";
    notlhs9_fu_606_p2 <= "0" when (tmp_11_fu_592_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_425_p2 <= "0" when (tmp_1_fu_411_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_612_p2 <= "1" when (tmp_29_fu_602_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_567_p2 <= "1" when (tmp_30_fu_557_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_641_p2 <= "1" when (loc_V_1_fu_631_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_431_p2 <= "1" when (tmp_19_fu_421_p1 = ap_const_lv23_0) else "0";
    or_cond_fu_668_p2 <= (tmp_17_fu_663_p2 and tmp_23_reg_903);
    p_Val2_2_fu_774_p3 <= 
        tmp_28_fu_760_p1 when (isNeg_reg_943(0) = '1') else 
        tmp_31_fu_764_p4;
    p_Val2_4_fu_790_p3 <= 
        tmp_10_i_i_i_fu_784_p2 when (p_Result_s_reg_938(0) = '1') else 
        tmp_1_i_i_i_fu_781_p1;
    p_Val2_s_fu_618_p1 <= x_assign_reg_908;
    p_shl1_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_351_p3),8));
    p_shl2_cast_fu_495_p3 <= (tmp_24_fu_491_p1 & ap_const_lv3_0);
    p_shl3_cast_fu_507_p3 <= (tmp_25_fu_503_p1 & ap_const_lv1_0);
    p_shl_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_339_p3),8));
        sh_assign_1_cast_cas_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_948),25));

        sh_assign_1_cast_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_948),32));

    sh_assign_1_fu_709_p3 <= 
        tmp_5_i_i_i_cast_fu_705_p1 when (isNeg_fu_691_p3(0) = '1') else 
        sh_assign_fu_685_p2;
    sh_assign_fu_685_p2 <= std_logic_vector(unsigned(tmp_i_i_i_i_cast1_fu_681_p1) + unsigned(ap_const_lv9_181));
    tmp_10_fu_363_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_359_p1) + unsigned(p_shl_cast_fu_347_p1));
    tmp_10_i_i_i_fu_784_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(tmp_1_i_i_i_fu_781_p1));
    tmp_11_fu_592_p4 <= tmp_2_to_int_fu_588_p1(30 downto 23);
    tmp_12_fu_385_p2 <= std_logic_vector(unsigned(tmp_10_reg_810) + unsigned(j_i_cast4_cast_fu_381_p1));
    tmp_13_fu_647_p2 <= (notrhs8_fu_641_p2 or notlhs7_fu_635_p2);
    tmp_14_fu_653_p2 <= (notrhs1_reg_919 or notlhs9_reg_914);
    tmp_15_fu_657_p2 <= (tmp_13_fu_647_p2 and tmp_14_fu_653_p2);
    tmp_17_fu_663_p2 <= (tmp_15_fu_657_p2 and tmp_16_reg_924);
    tmp_18_fu_547_p4 <= graph_load_to_int_fu_543_p1(30 downto 23);
    tmp_19_fu_421_p1 <= graph_load_1_to_int_fu_407_p1(23 - 1 downto 0);
    tmp_1_fu_411_p4 <= graph_load_1_to_int_fu_407_p1(30 downto 23);
    tmp_1_i_i_i_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_2_reg_954),64));
    tmp_20_fu_573_p2 <= (notrhs2_reg_893 or notlhs1_reg_888);
    tmp_22_fu_577_p2 <= (tmp_20_fu_573_p2 and tmp_21_reg_898);
    tmp_23_fu_582_p2 <= (tmp_22_fu_577_p2 xor ap_const_lv1_1);
    tmp_24_fu_491_p1 <= j_reg_288(5 - 1 downto 0);
    tmp_25_fu_503_p1 <= j_reg_288(7 - 1 downto 0);
    tmp_26_fu_515_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_507_p3) + unsigned(p_shl2_cast_fu_495_p3));
    tmp_27_cast_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_385_p2),64));
    tmp_27_fu_521_p2 <= std_logic_vector(unsigned(tmp_26_fu_515_p2) + unsigned(i_cast3_cast_reg_851));
    tmp_28_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_752_p3),63));
    tmp_29_fu_602_p1 <= tmp_2_to_int_fu_588_p1(23 - 1 downto 0);
    tmp_2_to_int_fu_588_p1 <= reg_328;
    tmp_30_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_521_p2),64));
    tmp_30_fu_557_p1 <= graph_load_to_int_fu_543_p1(23 - 1 downto 0);
    tmp_31_fu_764_p4 <= tmp_i_i_i_fu_746_p2(86 downto 24);
    tmp_35_fu_752_p3 <= tmp_8_i_i_i_fu_740_p2(24 downto 24);
    tmp_3_i_i_i_cast2_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_i_i_i_fu_717_p4),111));
    tmp_3_i_i_i_fu_717_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_929) & ap_const_lv1_0);
    tmp_5_fu_339_p3 <= (i_i_reg_255 & ap_const_lv3_0);
        tmp_5_i_i_i_cast_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_i_i_i_fu_699_p2),9));

    tmp_5_i_i_i_fu_699_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_621_p4));
    tmp_6_fu_437_p2 <= (notrhs_reg_841 or notlhs_reg_836);
    tmp_7_i_i_i_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_730_p1),111));
    tmp_8_fu_441_p2 <= (tmp_6_fu_437_p2 and tmp_7_reg_846);
    tmp_8_i_i_i_fu_740_p2 <= std_logic_vector(shift_right(unsigned(tmp_3_i_i_i_fu_717_p4),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_733_p1(25-1 downto 0)))));
    tmp_9_fu_351_p3 <= (i_i_reg_255 & ap_const_lv1_0);
    tmp_fu_531_p2 <= "1" when (signed(j_cast_fu_486_p1) < signed(total_edges_fu_118)) else "0";
    tmp_i_i_i_fu_746_p2 <= std_logic_vector(shift_left(unsigned(tmp_3_i_i_i_cast2_fu_726_p1),to_integer(unsigned('0' & tmp_7_i_i_i_fu_736_p1(31-1 downto 0)))));
    tmp_i_i_i_i_cast1_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_621_p4),9));
    total_edges_1_fu_446_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(total_edges_fu_118));
    total_edges_2_fu_452_p3 <= 
        total_edges_fu_118 when (tmp_8_fu_441_p2(0) = '1') else 
        total_edges_1_fu_446_p2;
end behav;
