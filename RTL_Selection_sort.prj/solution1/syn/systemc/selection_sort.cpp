// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "selection_sort.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic selection_sort::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic selection_sort::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> selection_sort::ap_ST_fsm_state1 = "1";
const sc_lv<8> selection_sort::ap_ST_fsm_state2 = "10";
const sc_lv<8> selection_sort::ap_ST_fsm_state3 = "100";
const sc_lv<8> selection_sort::ap_ST_fsm_state4 = "1000";
const sc_lv<8> selection_sort::ap_ST_fsm_state5 = "10000";
const sc_lv<8> selection_sort::ap_ST_fsm_state6 = "100000";
const sc_lv<8> selection_sort::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> selection_sort::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> selection_sort::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> selection_sort::ap_const_lv32_3 = "11";
const sc_lv<32> selection_sort::ap_const_lv32_6 = "110";
const sc_lv<32> selection_sort::ap_const_lv32_1 = "1";
const sc_lv<32> selection_sort::ap_const_lv32_2 = "10";
const sc_lv<1> selection_sort::ap_const_lv1_0 = "0";
const sc_lv<1> selection_sort::ap_const_lv1_1 = "1";
const sc_lv<32> selection_sort::ap_const_lv32_4 = "100";
const sc_lv<32> selection_sort::ap_const_lv32_5 = "101";
const sc_lv<4> selection_sort::ap_const_lv4_0 = "0000";
const sc_lv<32> selection_sort::ap_const_lv32_7 = "111";
const sc_lv<4> selection_sort::ap_const_lv4_9 = "1001";
const sc_lv<4> selection_sort::ap_const_lv4_1 = "1";
const sc_lv<8> selection_sort::ap_const_lv8_1 = "1";
const sc_lv<8> selection_sort::ap_const_lv8_9 = "1001";
const sc_lv<32> selection_sort::ap_const_lv32_17 = "10111";
const sc_lv<32> selection_sort::ap_const_lv32_1E = "11110";
const sc_lv<8> selection_sort::ap_const_lv8_FF = "11111111";
const sc_lv<23> selection_sort::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> selection_sort::ap_const_lv5_4 = "100";
const bool selection_sort::ap_const_boolean_1 = true;

selection_sort::selection_sort(sc_module_name name) : sc_module(name), mVcdFile(0) {
    selection_sort_fcbkb_U1 = new selection_sort_fcbkb<1,1,32,32,1>("selection_sort_fcbkb_U1");
    selection_sort_fcbkb_U1->din0(reg_111);
    selection_sort_fcbkb_U1->din1(arr_load_1_reg_293);
    selection_sort_fcbkb_U1->opcode(ap_var_for_const0);
    selection_sort_fcbkb_U1->dout(tmp_9_fu_107_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_121_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_121_p2 );

    SC_METHOD(thread_arr_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_139_p2 );
    sensitive << ( arr_addr_1_reg_283 );
    sensitive << ( tmp_fu_145_p1 );
    sensitive << ( tmp_i_fu_155_p1 );

    SC_METHOD(thread_arr_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_139_p2 );
    sensitive << ( arr_addr_3_reg_288 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_2_fu_150_p1 );
    sensitive << ( tmp_1_i_fu_160_p1 );

    SC_METHOD(thread_arr_ce0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_139_p2 );

    SC_METHOD(thread_arr_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_139_p2 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_arr_d0);
    sensitive << ( arr_q1 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_arr_d1);
    sensitive << ( reg_111 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_arr_load_1_to_int_fu_183_p1);
    sensitive << ( arr_load_1_reg_293 );

    SC_METHOD(thread_arr_load_to_int_fu_165_p1);
    sensitive << ( reg_111 );

    SC_METHOD(thread_arr_we0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_arr_we1);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_exitcond1_fu_121_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( min_idx_reg_76 );

    SC_METHOD(thread_exitcond_fu_139_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_in_reg_98 );

    SC_METHOD(thread_i_fu_127_p2);
    sensitive << ( min_idx_reg_76 );

    SC_METHOD(thread_j_2_fu_133_p2);
    sensitive << ( j_0_in_reg_98 );

    SC_METHOD(thread_j_fu_243_p3);
    sensitive << ( j_2_reg_264 );
    sensitive << ( index_1_assign_reg_88 );
    sensitive << ( tmp_s_fu_238_p2 );

    SC_METHOD(thread_min_idx_1_cast1_fu_117_p1);
    sensitive << ( min_idx_reg_76 );

    SC_METHOD(thread_notlhs2_fu_212_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_4_fu_186_p4 );

    SC_METHOD(thread_notlhs_fu_200_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_1_fu_169_p4 );

    SC_METHOD(thread_notrhs3_fu_218_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_5_fu_196_p1 );

    SC_METHOD(thread_notrhs_fu_206_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_3_fu_179_p1 );

    SC_METHOD(thread_tmp_1_fu_169_p4);
    sensitive << ( arr_load_to_int_fu_165_p1 );

    SC_METHOD(thread_tmp_1_i_fu_160_p1);
    sensitive << ( min_idx_reg_76 );

    SC_METHOD(thread_tmp_2_fu_150_p1);
    sensitive << ( index_1_assign_reg_88 );

    SC_METHOD(thread_tmp_3_fu_179_p1);
    sensitive << ( arr_load_to_int_fu_165_p1 );

    SC_METHOD(thread_tmp_4_fu_186_p4);
    sensitive << ( arr_load_1_to_int_fu_183_p1 );

    SC_METHOD(thread_tmp_5_fu_196_p1);
    sensitive << ( arr_load_1_to_int_fu_183_p1 );

    SC_METHOD(thread_tmp_6_fu_224_p2);
    sensitive << ( notlhs_reg_299 );
    sensitive << ( notrhs_reg_304 );

    SC_METHOD(thread_tmp_7_fu_228_p2);
    sensitive << ( notlhs2_reg_309 );
    sensitive << ( notrhs3_reg_314 );

    SC_METHOD(thread_tmp_8_fu_232_p2);
    sensitive << ( tmp_6_fu_224_p2 );
    sensitive << ( tmp_7_fu_228_p2 );

    SC_METHOD(thread_tmp_fu_145_p1);
    sensitive << ( j_2_fu_133_p2 );

    SC_METHOD(thread_tmp_i_fu_155_p1);
    sensitive << ( index_1_assign_reg_88 );

    SC_METHOD(thread_tmp_s_fu_238_p2);
    sensitive << ( tmp_9_reg_319 );
    sensitive << ( tmp_8_fu_232_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_139_p2 );
    sensitive << ( exitcond1_fu_121_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "selection_sort_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, arr_address0, "(port)arr_address0");
    sc_trace(mVcdFile, arr_ce0, "(port)arr_ce0");
    sc_trace(mVcdFile, arr_we0, "(port)arr_we0");
    sc_trace(mVcdFile, arr_d0, "(port)arr_d0");
    sc_trace(mVcdFile, arr_q0, "(port)arr_q0");
    sc_trace(mVcdFile, arr_address1, "(port)arr_address1");
    sc_trace(mVcdFile, arr_ce1, "(port)arr_ce1");
    sc_trace(mVcdFile, arr_we1, "(port)arr_we1");
    sc_trace(mVcdFile, arr_d1, "(port)arr_d1");
    sc_trace(mVcdFile, arr_q1, "(port)arr_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_111, "reg_111");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, min_idx_1_cast1_fu_117_p1, "min_idx_1_cast1_fu_117_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_127_p2, "i_fu_127_p2");
    sc_trace(mVcdFile, i_reg_259, "i_reg_259");
    sc_trace(mVcdFile, j_2_fu_133_p2, "j_2_fu_133_p2");
    sc_trace(mVcdFile, j_2_reg_264, "j_2_reg_264");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_fu_139_p2, "exitcond_fu_139_p2");
    sc_trace(mVcdFile, arr_addr_1_reg_283, "arr_addr_1_reg_283");
    sc_trace(mVcdFile, arr_addr_3_reg_288, "arr_addr_3_reg_288");
    sc_trace(mVcdFile, arr_load_1_reg_293, "arr_load_1_reg_293");
    sc_trace(mVcdFile, notlhs_fu_200_p2, "notlhs_fu_200_p2");
    sc_trace(mVcdFile, notlhs_reg_299, "notlhs_reg_299");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, notrhs_fu_206_p2, "notrhs_fu_206_p2");
    sc_trace(mVcdFile, notrhs_reg_304, "notrhs_reg_304");
    sc_trace(mVcdFile, notlhs2_fu_212_p2, "notlhs2_fu_212_p2");
    sc_trace(mVcdFile, notlhs2_reg_309, "notlhs2_reg_309");
    sc_trace(mVcdFile, notrhs3_fu_218_p2, "notrhs3_fu_218_p2");
    sc_trace(mVcdFile, notrhs3_reg_314, "notrhs3_reg_314");
    sc_trace(mVcdFile, tmp_9_fu_107_p2, "tmp_9_fu_107_p2");
    sc_trace(mVcdFile, tmp_9_reg_319, "tmp_9_reg_319");
    sc_trace(mVcdFile, j_fu_243_p3, "j_fu_243_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, min_idx_reg_76, "min_idx_reg_76");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, index_1_assign_reg_88, "index_1_assign_reg_88");
    sc_trace(mVcdFile, exitcond1_fu_121_p2, "exitcond1_fu_121_p2");
    sc_trace(mVcdFile, j_0_in_reg_98, "j_0_in_reg_98");
    sc_trace(mVcdFile, tmp_fu_145_p1, "tmp_fu_145_p1");
    sc_trace(mVcdFile, tmp_2_fu_150_p1, "tmp_2_fu_150_p1");
    sc_trace(mVcdFile, tmp_i_fu_155_p1, "tmp_i_fu_155_p1");
    sc_trace(mVcdFile, tmp_1_i_fu_160_p1, "tmp_1_i_fu_160_p1");
    sc_trace(mVcdFile, arr_load_to_int_fu_165_p1, "arr_load_to_int_fu_165_p1");
    sc_trace(mVcdFile, arr_load_1_to_int_fu_183_p1, "arr_load_1_to_int_fu_183_p1");
    sc_trace(mVcdFile, tmp_1_fu_169_p4, "tmp_1_fu_169_p4");
    sc_trace(mVcdFile, tmp_3_fu_179_p1, "tmp_3_fu_179_p1");
    sc_trace(mVcdFile, tmp_4_fu_186_p4, "tmp_4_fu_186_p4");
    sc_trace(mVcdFile, tmp_5_fu_196_p1, "tmp_5_fu_196_p1");
    sc_trace(mVcdFile, tmp_6_fu_224_p2, "tmp_6_fu_224_p2");
    sc_trace(mVcdFile, tmp_7_fu_228_p2, "tmp_7_fu_228_p2");
    sc_trace(mVcdFile, tmp_8_fu_232_p2, "tmp_8_fu_232_p2");
    sc_trace(mVcdFile, tmp_s_fu_238_p2, "tmp_s_fu_238_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("selection_sort.hdltvin.dat");
    mHdltvoutHandle.open("selection_sort.hdltvout.dat");
}

selection_sort::~selection_sort() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete selection_sort_fcbkb_U1;
}

void selection_sort::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv5_4;
}

void selection_sort::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_121_p2.read()))) {
        index_1_assign_reg_88 = min_idx_1_cast1_fu_117_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        index_1_assign_reg_88 = j_fu_243_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_121_p2.read()))) {
        j_0_in_reg_98 = min_idx_1_cast1_fu_117_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        j_0_in_reg_98 = j_2_reg_264.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        min_idx_reg_76 = i_reg_259.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        min_idx_reg_76 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_1))) {
        arr_addr_1_reg_283 =  (sc_lv<4>) (tmp_i_fu_155_p1.read());
        arr_addr_3_reg_288 =  (sc_lv<4>) (tmp_1_i_fu_160_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        arr_load_1_reg_293 = arr_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_259 = i_fu_127_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_2_reg_264 = j_2_fu_133_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        notlhs2_reg_309 = notlhs2_fu_212_p2.read();
        notlhs_reg_299 = notlhs_fu_200_p2.read();
        notrhs3_reg_314 = notrhs3_fu_218_p2.read();
        notrhs_reg_304 = notrhs_fu_206_p2.read();
        tmp_9_reg_319 = tmp_9_fu_107_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        reg_111 = arr_q0.read();
    }
}

void selection_sort::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void selection_sort::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void selection_sort::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void selection_sort::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void selection_sort::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void selection_sort::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void selection_sort::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void selection_sort::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void selection_sort::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_121_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void selection_sort::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void selection_sort::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_121_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void selection_sort::thread_arr_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        arr_address0 = arr_addr_1_reg_283.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_1))) {
        arr_address0 =  (sc_lv<4>) (tmp_i_fu_155_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_0))) {
        arr_address0 =  (sc_lv<4>) (tmp_fu_145_p1.read());
    } else {
        arr_address0 = "XXXX";
    }
}

void selection_sort::thread_arr_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        arr_address1 = arr_addr_3_reg_288.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_1))) {
        arr_address1 =  (sc_lv<4>) (tmp_1_i_fu_160_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_0))) {
        arr_address1 =  (sc_lv<4>) (tmp_2_fu_150_p1.read());
    } else {
        arr_address1 = "XXXX";
    }
}

void selection_sort::thread_arr_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_1)))) {
        arr_ce0 = ap_const_logic_1;
    } else {
        arr_ce0 = ap_const_logic_0;
    }
}

void selection_sort::thread_arr_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        arr_ce1 = ap_const_logic_1;
    } else {
        arr_ce1 = ap_const_logic_0;
    }
}

void selection_sort::thread_arr_d0() {
    arr_d0 = arr_q1.read();
}

void selection_sort::thread_arr_d1() {
    arr_d1 = reg_111.read();
}

void selection_sort::thread_arr_load_1_to_int_fu_183_p1() {
    arr_load_1_to_int_fu_183_p1 = arr_load_1_reg_293.read();
}

void selection_sort::thread_arr_load_to_int_fu_165_p1() {
    arr_load_to_int_fu_165_p1 = reg_111.read();
}

void selection_sort::thread_arr_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        arr_we0 = ap_const_logic_1;
    } else {
        arr_we0 = ap_const_logic_0;
    }
}

void selection_sort::thread_arr_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        arr_we1 = ap_const_logic_1;
    } else {
        arr_we1 = ap_const_logic_0;
    }
}

void selection_sort::thread_exitcond1_fu_121_p2() {
    exitcond1_fu_121_p2 = (!min_idx_reg_76.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(min_idx_reg_76.read() == ap_const_lv4_9);
}

void selection_sort::thread_exitcond_fu_139_p2() {
    exitcond_fu_139_p2 = (!j_0_in_reg_98.read().is_01() || !ap_const_lv8_9.is_01())? sc_lv<1>(): sc_lv<1>(j_0_in_reg_98.read() == ap_const_lv8_9);
}

void selection_sort::thread_i_fu_127_p2() {
    i_fu_127_p2 = (!min_idx_reg_76.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(min_idx_reg_76.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void selection_sort::thread_j_2_fu_133_p2() {
    j_2_fu_133_p2 = (!j_0_in_reg_98.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(j_0_in_reg_98.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void selection_sort::thread_j_fu_243_p3() {
    j_fu_243_p3 = (!tmp_s_fu_238_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_s_fu_238_p2.read()[0].to_bool())? j_2_reg_264.read(): index_1_assign_reg_88.read());
}

void selection_sort::thread_min_idx_1_cast1_fu_117_p1() {
    min_idx_1_cast1_fu_117_p1 = esl_zext<8,4>(min_idx_reg_76.read());
}

void selection_sort::thread_notlhs2_fu_212_p2() {
    notlhs2_fu_212_p2 = (!tmp_4_fu_186_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_4_fu_186_p4.read() != ap_const_lv8_FF);
}

void selection_sort::thread_notlhs_fu_200_p2() {
    notlhs_fu_200_p2 = (!tmp_1_fu_169_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_169_p4.read() != ap_const_lv8_FF);
}

void selection_sort::thread_notrhs3_fu_218_p2() {
    notrhs3_fu_218_p2 = (!tmp_5_fu_196_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_5_fu_196_p1.read() == ap_const_lv23_0);
}

void selection_sort::thread_notrhs_fu_206_p2() {
    notrhs_fu_206_p2 = (!tmp_3_fu_179_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_3_fu_179_p1.read() == ap_const_lv23_0);
}

void selection_sort::thread_tmp_1_fu_169_p4() {
    tmp_1_fu_169_p4 = arr_load_to_int_fu_165_p1.read().range(30, 23);
}

void selection_sort::thread_tmp_1_i_fu_160_p1() {
    tmp_1_i_fu_160_p1 = esl_zext<64,4>(min_idx_reg_76.read());
}

void selection_sort::thread_tmp_2_fu_150_p1() {
    tmp_2_fu_150_p1 = esl_sext<64,8>(index_1_assign_reg_88.read());
}

void selection_sort::thread_tmp_3_fu_179_p1() {
    tmp_3_fu_179_p1 = arr_load_to_int_fu_165_p1.read().range(23-1, 0);
}

void selection_sort::thread_tmp_4_fu_186_p4() {
    tmp_4_fu_186_p4 = arr_load_1_to_int_fu_183_p1.read().range(30, 23);
}

void selection_sort::thread_tmp_5_fu_196_p1() {
    tmp_5_fu_196_p1 = arr_load_1_to_int_fu_183_p1.read().range(23-1, 0);
}

void selection_sort::thread_tmp_6_fu_224_p2() {
    tmp_6_fu_224_p2 = (notrhs_reg_304.read() | notlhs_reg_299.read());
}

void selection_sort::thread_tmp_7_fu_228_p2() {
    tmp_7_fu_228_p2 = (notrhs3_reg_314.read() | notlhs2_reg_309.read());
}

void selection_sort::thread_tmp_8_fu_232_p2() {
    tmp_8_fu_232_p2 = (tmp_6_fu_224_p2.read() & tmp_7_fu_228_p2.read());
}

void selection_sort::thread_tmp_fu_145_p1() {
    tmp_fu_145_p1 = esl_sext<64,8>(j_2_fu_133_p2.read());
}

void selection_sort::thread_tmp_i_fu_155_p1() {
    tmp_i_fu_155_p1 = esl_sext<64,8>(index_1_assign_reg_88.read());
}

void selection_sort::thread_tmp_s_fu_238_p2() {
    tmp_s_fu_238_p2 = (tmp_8_fu_232_p2.read() & tmp_9_reg_319.read());
}

void selection_sort::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_121_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_139_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

void selection_sort::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_address0\" :  \"" << arr_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_ce0\" :  \"" << arr_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_we0\" :  \"" << arr_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_d0\" :  \"" << arr_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arr_q0\" :  \"" << arr_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_address1\" :  \"" << arr_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_ce1\" :  \"" << arr_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_we1\" :  \"" << arr_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_d1\" :  \"" << arr_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arr_q1\" :  \"" << arr_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

