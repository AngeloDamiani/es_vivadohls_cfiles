// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "bubble_sort.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic bubble_sort::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic bubble_sort::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> bubble_sort::ap_ST_fsm_state1 = "1";
const sc_lv<4> bubble_sort::ap_ST_fsm_state2 = "10";
const sc_lv<4> bubble_sort::ap_ST_fsm_state3 = "100";
const sc_lv<4> bubble_sort::ap_ST_fsm_state4 = "1000";
const sc_lv<32> bubble_sort::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> bubble_sort::ap_const_lv32_1 = "1";
const sc_lv<32> bubble_sort::ap_const_lv32_2 = "10";
const sc_lv<1> bubble_sort::ap_const_lv1_1 = "1";
const sc_lv<4> bubble_sort::ap_const_lv4_0 = "0000";
const sc_lv<1> bubble_sort::ap_const_lv1_0 = "0";
const sc_lv<8> bubble_sort::ap_const_lv8_9 = "1001";
const sc_lv<8> bubble_sort::ap_const_lv8_FF = "11111111";
const sc_lv<32> bubble_sort::ap_const_lv32_3 = "11";
const sc_lv<2> bubble_sort::ap_const_lv2_1 = "1";
const sc_lv<7> bubble_sort::ap_const_lv7_0 = "0000000";
const sc_lv<2> bubble_sort::ap_const_lv2_0 = "00";
const sc_lv<4> bubble_sort::ap_const_lv4_A = "1010";
const sc_lv<4> bubble_sort::ap_const_lv4_1 = "1";
const sc_lv<7> bubble_sort::ap_const_lv7_1 = "1";
const bool bubble_sort::ap_const_boolean_1 = true;

bubble_sort::bubble_sort(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( tmp_reg_213 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_179_p2 );
    sensitive << ( tmp_8_fu_201_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp_reg_213 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_179_p2 );
    sensitive << ( tmp_8_fu_201_p2 );

    SC_METHOD(thread_arr_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( arr_addr_reg_235 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_191_p1 );

    SC_METHOD(thread_arr_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( arr_addr_1_reg_240 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_6_fu_196_p1 );

    SC_METHOD(thread_arr_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_arr_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_arr_d0);
    sensitive << ( arr_q1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_arr_d1);
    sensitive << ( arr_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_arr_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_207_p2 );

    SC_METHOD(thread_arr_we1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_207_p2 );

    SC_METHOD(thread_currentSwap_1_phi_fu_142_p4);
    sensitive << ( index_1_assign_cast_reg_222 );
    sensitive << ( lastSwap_1_reg_102 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_207_p2 );

    SC_METHOD(thread_i_fu_185_p2);
    sensitive << ( currentSwap_reg_127 );

    SC_METHOD(thread_index_1_assign_cast_fu_175_p1);
    sensitive << ( currentSwap_reg_127 );

    SC_METHOD(thread_is_sorted_1_phi_fu_154_p4);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( is_sorted_reg_115 );
    sensitive << ( tmp_7_fu_207_p2 );

    SC_METHOD(thread_j_1_fu_169_p2);
    sensitive << ( j_reg_79 );

    SC_METHOD(thread_tmp_2_fu_179_p2);
    sensitive << ( tmp_reg_213 );
    sensitive << ( index_1_assign_cast_fu_175_p1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( lastSwap_reg_90 );

    SC_METHOD(thread_tmp_3_fu_191_p1);
    sensitive << ( currentSwap_reg_127 );

    SC_METHOD(thread_tmp_6_fu_196_p1);
    sensitive << ( i_fu_185_p2 );

    SC_METHOD(thread_tmp_7_fu_207_p2);
    sensitive << ( arr_q0 );
    sensitive << ( arr_q1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_8_fu_201_p2);
    sensitive << ( tmp_reg_213 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_179_p2 );
    sensitive << ( is_sorted_reg_115 );

    SC_METHOD(thread_tmp_fu_163_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( j_reg_79 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_reg_213 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_179_p2 );
    sensitive << ( tmp_8_fu_201_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "bubble_sort_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, arr_address0, "(port)arr_address0");
    sc_trace(mVcdFile, arr_ce0, "(port)arr_ce0");
    sc_trace(mVcdFile, arr_we0, "(port)arr_we0");
    sc_trace(mVcdFile, arr_d0, "(port)arr_d0");
    sc_trace(mVcdFile, arr_q0, "(port)arr_q0");
    sc_trace(mVcdFile, arr_address1, "(port)arr_address1");
    sc_trace(mVcdFile, arr_ce1, "(port)arr_ce1");
    sc_trace(mVcdFile, arr_we1, "(port)arr_we1");
    sc_trace(mVcdFile, arr_d1, "(port)arr_d1");
    sc_trace(mVcdFile, arr_q1, "(port)arr_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_fu_163_p2, "tmp_fu_163_p2");
    sc_trace(mVcdFile, tmp_reg_213, "tmp_reg_213");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, j_1_fu_169_p2, "j_1_fu_169_p2");
    sc_trace(mVcdFile, j_1_reg_217, "j_1_reg_217");
    sc_trace(mVcdFile, index_1_assign_cast_fu_175_p1, "index_1_assign_cast_fu_175_p1");
    sc_trace(mVcdFile, index_1_assign_cast_reg_222, "index_1_assign_cast_reg_222");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_fu_185_p2, "i_fu_185_p2");
    sc_trace(mVcdFile, i_reg_230, "i_reg_230");
    sc_trace(mVcdFile, arr_addr_reg_235, "arr_addr_reg_235");
    sc_trace(mVcdFile, tmp_2_fu_179_p2, "tmp_2_fu_179_p2");
    sc_trace(mVcdFile, arr_addr_1_reg_240, "arr_addr_1_reg_240");
    sc_trace(mVcdFile, j_reg_79, "j_reg_79");
    sc_trace(mVcdFile, tmp_8_fu_201_p2, "tmp_8_fu_201_p2");
    sc_trace(mVcdFile, lastSwap_reg_90, "lastSwap_reg_90");
    sc_trace(mVcdFile, lastSwap_1_reg_102, "lastSwap_1_reg_102");
    sc_trace(mVcdFile, currentSwap_1_phi_fu_142_p4, "currentSwap_1_phi_fu_142_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, is_sorted_reg_115, "is_sorted_reg_115");
    sc_trace(mVcdFile, is_sorted_1_phi_fu_154_p4, "is_sorted_1_phi_fu_154_p4");
    sc_trace(mVcdFile, currentSwap_reg_127, "currentSwap_reg_127");
    sc_trace(mVcdFile, tmp_7_fu_207_p2, "tmp_7_fu_207_p2");
    sc_trace(mVcdFile, tmp_3_fu_191_p1, "tmp_3_fu_191_p1");
    sc_trace(mVcdFile, tmp_6_fu_196_p1, "tmp_6_fu_196_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("bubble_sort.hdltvin.dat");
    mHdltvoutHandle.open("bubble_sort.hdltvout.dat");
}

bubble_sort::~bubble_sort() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void bubble_sort::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        currentSwap_reg_127 = i_reg_230.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_fu_163_p2.read(), ap_const_lv1_1))) {
        currentSwap_reg_127 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        is_sorted_reg_115 = is_sorted_1_phi_fu_154_p4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_fu_163_p2.read(), ap_const_lv1_1))) {
        is_sorted_reg_115 = ap_const_lv2_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_reg_213.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(tmp_2_fu_179_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_8_fu_201_p2.read()))) {
        j_reg_79 = j_1_reg_217.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_reg_79 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        lastSwap_1_reg_102 = currentSwap_1_phi_fu_142_p4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_fu_163_p2.read(), ap_const_lv1_1))) {
        lastSwap_1_reg_102 = ap_const_lv8_FF;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_reg_213.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(tmp_2_fu_179_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_8_fu_201_p2.read()))) {
        lastSwap_reg_90 = lastSwap_1_reg_102.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        lastSwap_reg_90 = ap_const_lv8_9;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_reg_213.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_179_p2.read()))) {
        arr_addr_1_reg_240 =  (sc_lv<4>) (tmp_6_fu_196_p1.read());
        arr_addr_reg_235 =  (sc_lv<4>) (tmp_3_fu_191_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_reg_213.read(), ap_const_lv1_1))) {
        i_reg_230 = i_fu_185_p2.read();
        index_1_assign_cast_reg_222 = index_1_assign_cast_fu_175_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        j_1_reg_217 = j_1_fu_169_p2.read();
        tmp_reg_213 = tmp_fu_163_p2.read();
    }
}

void bubble_sort::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void bubble_sort::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void bubble_sort::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void bubble_sort::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void bubble_sort::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         (esl_seteq<1,1,1>(tmp_reg_213.read(), ap_const_lv1_0) || 
          (esl_seteq<1,1,1>(tmp_2_fu_179_p2.read(), ap_const_lv1_0) && 
           esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_201_p2.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void bubble_sort::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void bubble_sort::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         (esl_seteq<1,1,1>(tmp_reg_213.read(), ap_const_lv1_0) || 
          (esl_seteq<1,1,1>(tmp_2_fu_179_p2.read(), ap_const_lv1_0) && 
           esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_201_p2.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void bubble_sort::thread_arr_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        arr_address0 = arr_addr_reg_235.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        arr_address0 =  (sc_lv<4>) (tmp_3_fu_191_p1.read());
    } else {
        arr_address0 = "XXXX";
    }
}

void bubble_sort::thread_arr_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        arr_address1 = arr_addr_1_reg_240.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        arr_address1 =  (sc_lv<4>) (tmp_6_fu_196_p1.read());
    } else {
        arr_address1 = "XXXX";
    }
}

void bubble_sort::thread_arr_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        arr_ce0 = ap_const_logic_1;
    } else {
        arr_ce0 = ap_const_logic_0;
    }
}

void bubble_sort::thread_arr_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        arr_ce1 = ap_const_logic_1;
    } else {
        arr_ce1 = ap_const_logic_0;
    }
}

void bubble_sort::thread_arr_d0() {
    arr_d0 = arr_q1.read();
}

void bubble_sort::thread_arr_d1() {
    arr_d1 = arr_q0.read();
}

void bubble_sort::thread_arr_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_207_p2.read()))) {
        arr_we0 = ap_const_logic_1;
    } else {
        arr_we0 = ap_const_logic_0;
    }
}

void bubble_sort::thread_arr_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_207_p2.read()))) {
        arr_we1 = ap_const_logic_1;
    } else {
        arr_we1 = ap_const_logic_0;
    }
}

void bubble_sort::thread_currentSwap_1_phi_fu_142_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_207_p2.read())) {
            currentSwap_1_phi_fu_142_p4 = lastSwap_1_reg_102.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_207_p2.read())) {
            currentSwap_1_phi_fu_142_p4 = index_1_assign_cast_reg_222.read();
        } else {
            currentSwap_1_phi_fu_142_p4 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        currentSwap_1_phi_fu_142_p4 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void bubble_sort::thread_i_fu_185_p2() {
    i_fu_185_p2 = (!currentSwap_reg_127.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(currentSwap_reg_127.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void bubble_sort::thread_index_1_assign_cast_fu_175_p1() {
    index_1_assign_cast_fu_175_p1 = esl_zext<8,7>(currentSwap_reg_127.read());
}

void bubble_sort::thread_is_sorted_1_phi_fu_154_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_207_p2.read())) {
            is_sorted_1_phi_fu_154_p4 = is_sorted_reg_115.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_207_p2.read())) {
            is_sorted_1_phi_fu_154_p4 = ap_const_lv2_0;
        } else {
            is_sorted_1_phi_fu_154_p4 =  (sc_lv<2>) ("XX");
        }
    } else {
        is_sorted_1_phi_fu_154_p4 =  (sc_lv<2>) ("XX");
    }
}

void bubble_sort::thread_j_1_fu_169_p2() {
    j_1_fu_169_p2 = (!j_reg_79.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_reg_79.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void bubble_sort::thread_tmp_2_fu_179_p2() {
    tmp_2_fu_179_p2 = (!index_1_assign_cast_fu_175_p1.read().is_01() || !lastSwap_reg_90.read().is_01())? sc_lv<1>(): (sc_bigint<8>(index_1_assign_cast_fu_175_p1.read()) < sc_bigint<8>(lastSwap_reg_90.read()));
}

void bubble_sort::thread_tmp_3_fu_191_p1() {
    tmp_3_fu_191_p1 = esl_zext<64,7>(currentSwap_reg_127.read());
}

void bubble_sort::thread_tmp_6_fu_196_p1() {
    tmp_6_fu_196_p1 = esl_zext<64,7>(i_fu_185_p2.read());
}

void bubble_sort::thread_tmp_7_fu_207_p2() {
    tmp_7_fu_207_p2 = (!arr_q0.read().is_01() || !arr_q1.read().is_01())? sc_lv<1>(): (sc_bigint<64>(arr_q0.read()) > sc_bigint<64>(arr_q1.read()));
}

void bubble_sort::thread_tmp_8_fu_201_p2() {
    tmp_8_fu_201_p2 = (!is_sorted_reg_115.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(is_sorted_reg_115.read() == ap_const_lv2_0);
}

void bubble_sort::thread_tmp_fu_163_p2() {
    tmp_fu_163_p2 = (!j_reg_79.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): (sc_biguint<4>(j_reg_79.read()) < sc_biguint<4>(ap_const_lv4_A));
}

void bubble_sort::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && (esl_seteq<1,1,1>(tmp_reg_213.read(), ap_const_lv1_0) || 
  (esl_seteq<1,1,1>(tmp_2_fu_179_p2.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_201_p2.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_reg_213.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(tmp_2_fu_179_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_8_fu_201_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void bubble_sort::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_address0\" :  \"" << arr_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_ce0\" :  \"" << arr_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_we0\" :  \"" << arr_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_d0\" :  \"" << arr_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arr_q0\" :  \"" << arr_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_address1\" :  \"" << arr_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_ce1\" :  \"" << arr_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_we1\" :  \"" << arr_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_d1\" :  \"" << arr_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arr_q1\" :  \"" << arr_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

