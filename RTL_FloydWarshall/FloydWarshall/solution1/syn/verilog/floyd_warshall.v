// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="floyd_warshall,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.416000,HLS_SYN_LAT=2003,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=423,HLS_SYN_LUT=370}" *)

module floyd_warshall (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_we1,
        A_d1,
        A_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [6:0] A_address1;
output   A_ce1;
output   A_we1;
output  [31:0] A_d1;
input  [31:0] A_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] A_address0;
reg A_ce0;
reg[6:0] A_address1;
reg A_ce1;
reg A_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten1_reg_95;
reg   [3:0] h_reg_106;
reg   [7:0] indvar_flatten_reg_117;
reg   [3:0] i_reg_128;
reg   [3:0] j_reg_139;
wire   [0:0] exitcond_flatten1_fu_150_p2;
reg   [0:0] exitcond_flatten1_reg_358;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten1_reg_358;
wire   [9:0] indvar_flatten_next1_fu_156_p2;
reg   [9:0] indvar_flatten_next1_reg_362;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] i_mid_fu_174_p3;
reg   [3:0] i_mid_reg_367;
wire   [3:0] tmp_1_mid2_v_fu_182_p3;
reg   [3:0] tmp_1_mid2_v_reg_373;
wire   [0:0] tmp_5_mid_fu_202_p2;
reg   [0:0] tmp_5_mid_reg_381;
wire   [3:0] j_mid2_fu_214_p3;
reg   [3:0] j_mid2_reg_386;
wire   [7:0] indvar_flatten_next_fu_228_p3;
reg   [7:0] indvar_flatten_next_reg_392;
wire   [3:0] tmp_4_mid2_fu_269_p3;
reg   [3:0] tmp_4_mid2_reg_397;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_flag00011001;
wire   [7:0] tmp_7_cast_fu_275_p1;
reg   [7:0] tmp_7_cast_reg_404;
wire   [3:0] j_1_fu_289_p2;
reg   [3:0] j_1_reg_414;
reg   [6:0] A_addr_2_reg_424;
reg   [31:0] A_load_1_reg_429;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_flag00011011;
reg   [9:0] indvar_flatten1_phi_fu_99_p4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [3:0] h_phi_fu_110_p4;
reg   [7:0] indvar_flatten_phi_fu_121_p4;
reg   [3:0] i_phi_fu_132_p4;
reg   [3:0] j_phi_fu_143_p4;
wire   [63:0] tmp_13_cast_fu_284_p1;
wire    ap_block_pp0_stage1_flag00000000;
wire   [63:0] tmp_12_cast_fu_331_p1;
wire   [63:0] tmp_14_cast_fu_341_p1;
wire   [0:0] tmp_9_fu_352_p2;
wire   [31:0] tmp_8_fu_346_p2;
wire   [0:0] exitcond_flatten9_fu_168_p2;
wire   [3:0] h_1_fu_162_p2;
wire   [0:0] tmp_4_fu_196_p2;
wire   [0:0] not_exitcond_flatten_fu_190_p2;
wire   [0:0] tmp_3_fu_208_p2;
wire   [7:0] indvar_flatten_op_fu_222_p2;
wire   [6:0] tmp_fu_236_p3;
wire   [4:0] tmp_1_fu_247_p3;
wire   [7:0] p_shl2_cast_fu_243_p1;
wire   [7:0] p_shl3_cast_fu_254_p1;
wire   [3:0] i_1_fu_264_p2;
wire   [7:0] tmp_2_fu_258_p2;
wire   [7:0] tmp_11_fu_278_p2;
wire   [6:0] tmp_5_fu_297_p3;
wire   [4:0] tmp_6_fu_308_p3;
wire   [7:0] p_shl_cast_fu_304_p1;
wire   [7:0] p_shl1_cast_fu_315_p1;
wire   [7:0] tmp_1_mid2_cast_fu_294_p1;
wire   [7:0] tmp_7_fu_319_p2;
wire   [7:0] tmp_10_fu_325_p2;
wire   [7:0] tmp_12_fu_336_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten1_reg_358 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        h_reg_106 <= tmp_1_mid2_v_reg_373;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        h_reg_106 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten1_reg_358 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_reg_128 <= tmp_4_mid2_reg_397;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_128 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten1_reg_358 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten1_reg_95 <= indvar_flatten_next1_reg_362;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten1_reg_95 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten1_reg_358 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_reg_117 <= indvar_flatten_next_reg_392;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_117 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten1_reg_358 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        j_reg_139 <= j_1_reg_414;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_139 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten1_reg_358 == 1'd0))) begin
        A_addr_2_reg_424 <= tmp_14_cast_fu_341_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten1_reg_358 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        A_load_1_reg_429 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten1_reg_358 <= exitcond_flatten1_reg_358;
        exitcond_flatten1_reg_358 <= exitcond_flatten1_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten1_fu_150_p2 == 1'd0))) begin
        i_mid_reg_367 <= i_mid_fu_174_p3;
        j_mid2_reg_386 <= j_mid2_fu_214_p3;
        tmp_5_mid_reg_381 <= tmp_5_mid_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_flatten_next1_reg_362 <= indvar_flatten_next1_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten1_fu_150_p2 == 1'd0))) begin
        indvar_flatten_next_reg_392 <= indvar_flatten_next_fu_228_p3;
        tmp_1_mid2_v_reg_373 <= tmp_1_mid2_v_fu_182_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (exitcond_flatten1_reg_358 == 1'd0))) begin
        j_1_reg_414 <= j_1_fu_289_p2;
        tmp_4_mid2_reg_397 <= tmp_4_mid2_fu_269_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (exitcond_flatten1_reg_358 == 1'd0))) begin
        tmp_7_cast_reg_404[3 : 0] <= tmp_7_cast_fu_275_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        A_address0 = tmp_12_cast_fu_331_p1;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        A_address0 = tmp_13_cast_fu_284_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            A_address1 = A_addr_2_reg_424;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            A_address1 = tmp_14_cast_fu_341_p1;
        end else begin
            A_address1 = 'bx;
        end
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == tmp_9_fu_352_p2))) begin
        A_we1 = 1'b1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten1_fu_150_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten1_reg_358 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        h_phi_fu_110_p4 = tmp_1_mid2_v_reg_373;
    end else begin
        h_phi_fu_110_p4 = h_reg_106;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten1_reg_358 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        i_phi_fu_132_p4 = tmp_4_mid2_reg_397;
    end else begin
        i_phi_fu_132_p4 = i_reg_128;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten1_reg_358 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten1_phi_fu_99_p4 = indvar_flatten_next1_reg_362;
    end else begin
        indvar_flatten1_phi_fu_99_p4 = indvar_flatten1_reg_95;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten1_reg_358 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten_phi_fu_121_p4 = indvar_flatten_next_reg_392;
    end else begin
        indvar_flatten_phi_fu_121_p4 = indvar_flatten_reg_117;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten1_reg_358 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        j_phi_fu_143_p4 = j_1_reg_414;
    end else begin
        j_phi_fu_143_p4 = j_reg_139;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten1_fu_150_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten1_fu_150_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_block_pp0_stage1_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d1 = tmp_8_fu_346_p2;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten1_fu_150_p2 = ((indvar_flatten1_phi_fu_99_p4 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond_flatten9_fu_168_p2 = ((indvar_flatten_phi_fu_121_p4 == 8'd100) ? 1'b1 : 1'b0);

assign h_1_fu_162_p2 = (h_phi_fu_110_p4 + 4'd1);

assign i_1_fu_264_p2 = (i_mid_reg_367 + 4'd1);

assign i_mid_fu_174_p3 = ((exitcond_flatten9_fu_168_p2[0:0] === 1'b1) ? 4'd0 : i_phi_fu_132_p4);

assign indvar_flatten_next1_fu_156_p2 = (indvar_flatten1_phi_fu_99_p4 + 10'd1);

assign indvar_flatten_next_fu_228_p3 = ((exitcond_flatten9_fu_168_p2[0:0] === 1'b1) ? 8'd1 : indvar_flatten_op_fu_222_p2);

assign indvar_flatten_op_fu_222_p2 = (indvar_flatten_phi_fu_121_p4 + 8'd1);

assign j_1_fu_289_p2 = (j_mid2_reg_386 + 4'd1);

assign j_mid2_fu_214_p3 = ((tmp_3_fu_208_p2[0:0] === 1'b1) ? 4'd0 : j_phi_fu_143_p4);

assign not_exitcond_flatten_fu_190_p2 = (exitcond_flatten9_fu_168_p2 ^ 1'd1);

assign p_shl1_cast_fu_315_p1 = tmp_6_fu_308_p3;

assign p_shl2_cast_fu_243_p1 = tmp_fu_236_p3;

assign p_shl3_cast_fu_254_p1 = tmp_1_fu_247_p3;

assign p_shl_cast_fu_304_p1 = tmp_5_fu_297_p3;

assign tmp_10_fu_325_p2 = (tmp_1_mid2_cast_fu_294_p1 + tmp_7_fu_319_p2);

assign tmp_11_fu_278_p2 = (tmp_7_cast_fu_275_p1 + tmp_2_fu_258_p2);

assign tmp_12_cast_fu_331_p1 = tmp_10_fu_325_p2;

assign tmp_12_fu_336_p2 = (tmp_7_cast_reg_404 + tmp_7_fu_319_p2);

assign tmp_13_cast_fu_284_p1 = tmp_11_fu_278_p2;

assign tmp_14_cast_fu_341_p1 = tmp_12_fu_336_p2;

assign tmp_1_fu_247_p3 = {{tmp_1_mid2_v_reg_373}, {1'd0}};

assign tmp_1_mid2_cast_fu_294_p1 = tmp_1_mid2_v_reg_373;

assign tmp_1_mid2_v_fu_182_p3 = ((exitcond_flatten9_fu_168_p2[0:0] === 1'b1) ? h_1_fu_162_p2 : h_phi_fu_110_p4);

assign tmp_2_fu_258_p2 = (p_shl2_cast_fu_243_p1 + p_shl3_cast_fu_254_p1);

assign tmp_3_fu_208_p2 = (tmp_5_mid_fu_202_p2 | exitcond_flatten9_fu_168_p2);

assign tmp_4_fu_196_p2 = ((j_phi_fu_143_p4 == 4'd10) ? 1'b1 : 1'b0);

assign tmp_4_mid2_fu_269_p3 = ((tmp_5_mid_reg_381[0:0] === 1'b1) ? i_1_fu_264_p2 : i_mid_reg_367);

assign tmp_5_fu_297_p3 = {{tmp_4_mid2_reg_397}, {3'd0}};

assign tmp_5_mid_fu_202_p2 = (tmp_4_fu_196_p2 & not_exitcond_flatten_fu_190_p2);

assign tmp_6_fu_308_p3 = {{tmp_4_mid2_reg_397}, {1'd0}};

assign tmp_7_cast_fu_275_p1 = j_mid2_reg_386;

assign tmp_7_fu_319_p2 = (p_shl_cast_fu_304_p1 + p_shl1_cast_fu_315_p1);

assign tmp_8_fu_346_p2 = (A_load_1_reg_429 + A_q0);

assign tmp_9_fu_352_p2 = ((tmp_8_fu_346_p2 < A_q1) ? 1'b1 : 1'b0);

assign tmp_fu_236_p3 = {{tmp_1_mid2_v_reg_373}, {3'd0}};

always @ (posedge ap_clk) begin
    tmp_7_cast_reg_404[7:4] <= 4'b0000;
end

endmodule //floyd_warshall
