-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bubble_sort is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    arr_ce0 : OUT STD_LOGIC;
    arr_we0 : OUT STD_LOGIC;
    arr_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    arr_ce1 : OUT STD_LOGIC;
    arr_we1 : OUT STD_LOGIC;
    arr_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of bubble_sort is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bubble_sort,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.642000,HLS_SYN_LAT=63,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=103,HLS_SYN_LUT=192}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_213 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_1_fu_169_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_217 : STD_LOGIC_VECTOR (3 downto 0);
    signal index_1_assign_cast_fu_175_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_1_assign_cast_reg_222 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_185_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_230 : STD_LOGIC_VECTOR (6 downto 0);
    signal arr_addr_reg_235 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arr_addr_1_reg_240 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_79 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lastSwap_reg_90 : STD_LOGIC_VECTOR (7 downto 0);
    signal lastSwap_1_reg_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal currentSwap_1_phi_fu_142_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal is_sorted_reg_115 : STD_LOGIC_VECTOR (1 downto 0);
    signal is_sorted_1_phi_fu_154_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal currentSwap_reg_127 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    currentSwap_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                currentSwap_reg_127 <= i_reg_230;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_163_p2 = ap_const_lv1_1))) then 
                currentSwap_reg_127 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    is_sorted_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                is_sorted_reg_115 <= is_sorted_1_phi_fu_154_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_163_p2 = ap_const_lv1_1))) then 
                is_sorted_reg_115 <= ap_const_lv2_1;
            end if; 
        end if;
    end process;

    j_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_reg_213 = ap_const_lv1_1) and (tmp_2_fu_179_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = tmp_8_fu_201_p2))) then 
                j_reg_79 <= j_1_reg_217;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_79 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    lastSwap_1_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                lastSwap_1_reg_102 <= currentSwap_1_phi_fu_142_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_163_p2 = ap_const_lv1_1))) then 
                lastSwap_1_reg_102 <= ap_const_lv8_FF;
            end if; 
        end if;
    end process;

    lastSwap_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_reg_213 = ap_const_lv1_1) and (tmp_2_fu_179_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = tmp_8_fu_201_p2))) then 
                lastSwap_reg_90 <= lastSwap_1_reg_102;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                lastSwap_reg_90 <= ap_const_lv8_9;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_reg_213 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_2_fu_179_p2))) then
                arr_addr_1_reg_240 <= tmp_6_fu_196_p1(4 - 1 downto 0);
                arr_addr_reg_235 <= tmp_3_fu_191_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_reg_213 = ap_const_lv1_1))) then
                i_reg_230 <= i_fu_185_p2;
                    index_1_assign_cast_reg_222(6 downto 0) <= index_1_assign_cast_fu_175_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_1_reg_217 <= j_1_fu_169_p2;
                tmp_reg_213 <= tmp_fu_163_p2;
            end if;
        end if;
    end process;
    index_1_assign_cast_reg_222(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_reg_213, ap_CS_fsm_state3, tmp_2_fu_179_p2, tmp_8_fu_201_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_reg_213 = ap_const_lv1_0) or ((tmp_2_fu_179_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_8_fu_201_p2))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_reg_213 = ap_const_lv1_1) and (tmp_2_fu_179_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = tmp_8_fu_201_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(tmp_reg_213, ap_CS_fsm_state3, tmp_2_fu_179_p2, tmp_8_fu_201_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_reg_213 = ap_const_lv1_0) or ((tmp_2_fu_179_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_8_fu_201_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_reg_213, ap_CS_fsm_state3, tmp_2_fu_179_p2, tmp_8_fu_201_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_reg_213 = ap_const_lv1_0) or ((tmp_2_fu_179_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_8_fu_201_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    arr_address0_assign_proc : process(ap_CS_fsm_state3, arr_addr_reg_235, ap_CS_fsm_state4, tmp_3_fu_191_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            arr_address0 <= arr_addr_reg_235;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            arr_address0 <= tmp_3_fu_191_p1(4 - 1 downto 0);
        else 
            arr_address0 <= "XXXX";
        end if; 
    end process;


    arr_address1_assign_proc : process(ap_CS_fsm_state3, arr_addr_1_reg_240, ap_CS_fsm_state4, tmp_6_fu_196_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            arr_address1 <= arr_addr_1_reg_240;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            arr_address1 <= tmp_6_fu_196_p1(4 - 1 downto 0);
        else 
            arr_address1 <= "XXXX";
        end if; 
    end process;


    arr_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            arr_ce0 <= ap_const_logic_1;
        else 
            arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            arr_ce1 <= ap_const_logic_1;
        else 
            arr_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    arr_d0 <= arr_q1;
    arr_d1 <= arr_q0;

    arr_we0_assign_proc : process(ap_CS_fsm_state4, tmp_7_fu_207_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = tmp_7_fu_207_p2))) then 
            arr_we0 <= ap_const_logic_1;
        else 
            arr_we0 <= ap_const_logic_0;
        end if; 
    end process;


    arr_we1_assign_proc : process(ap_CS_fsm_state4, tmp_7_fu_207_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = tmp_7_fu_207_p2))) then 
            arr_we1 <= ap_const_logic_1;
        else 
            arr_we1 <= ap_const_logic_0;
        end if; 
    end process;


    currentSwap_1_phi_fu_142_p4_assign_proc : process(index_1_assign_cast_reg_222, lastSwap_1_reg_102, ap_CS_fsm_state4, tmp_7_fu_207_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            if ((ap_const_lv1_0 = tmp_7_fu_207_p2)) then 
                currentSwap_1_phi_fu_142_p4 <= lastSwap_1_reg_102;
            elsif ((ap_const_lv1_1 = tmp_7_fu_207_p2)) then 
                currentSwap_1_phi_fu_142_p4 <= index_1_assign_cast_reg_222;
            else 
                currentSwap_1_phi_fu_142_p4 <= "XXXXXXXX";
            end if;
        else 
            currentSwap_1_phi_fu_142_p4 <= "XXXXXXXX";
        end if; 
    end process;

    i_fu_185_p2 <= std_logic_vector(unsigned(currentSwap_reg_127) + unsigned(ap_const_lv7_1));
    index_1_assign_cast_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(currentSwap_reg_127),8));

    is_sorted_1_phi_fu_154_p4_assign_proc : process(ap_CS_fsm_state4, is_sorted_reg_115, tmp_7_fu_207_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            if ((ap_const_lv1_0 = tmp_7_fu_207_p2)) then 
                is_sorted_1_phi_fu_154_p4 <= is_sorted_reg_115;
            elsif ((ap_const_lv1_1 = tmp_7_fu_207_p2)) then 
                is_sorted_1_phi_fu_154_p4 <= ap_const_lv2_0;
            else 
                is_sorted_1_phi_fu_154_p4 <= "XX";
            end if;
        else 
            is_sorted_1_phi_fu_154_p4 <= "XX";
        end if; 
    end process;

    j_1_fu_169_p2 <= std_logic_vector(unsigned(j_reg_79) + unsigned(ap_const_lv4_1));
    tmp_2_fu_179_p2 <= "1" when (signed(index_1_assign_cast_fu_175_p1) < signed(lastSwap_reg_90)) else "0";
    tmp_3_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(currentSwap_reg_127),64));
    tmp_6_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_185_p2),64));
    tmp_7_fu_207_p2 <= "1" when (signed(arr_q0) > signed(arr_q1)) else "0";
    tmp_8_fu_201_p2 <= "1" when (is_sorted_reg_115 = ap_const_lv2_0) else "0";
    tmp_fu_163_p2 <= "1" when (unsigned(j_reg_79) < unsigned(ap_const_lv4_A)) else "0";
end behav;
