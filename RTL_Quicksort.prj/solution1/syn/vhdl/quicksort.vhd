-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity quicksort is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i : IN STD_LOGIC_VECTOR (63 downto 0);
    f : IN STD_LOGIC_VECTOR (63 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    a_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of quicksort is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "quicksort,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.527000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2373,HLS_SYN_LUT=902}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stack_size_load_reg_204 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal stack_0_addr_reg_210 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_147_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal stack_0_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal base_reg_223 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal stack_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal stack_1_load_reg_228 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_233 : STD_LOGIC_VECTOR (0 downto 0);
    signal stack_size_1_fu_171_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal stack_size_1_reg_237 : STD_LOGIC_VECTOR (63 downto 0);
    signal stack_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal stack_0_ce0 : STD_LOGIC;
    signal stack_0_we0 : STD_LOGIC;
    signal stack_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal stack_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal stack_1_ce0 : STD_LOGIC;
    signal stack_1_we0 : STD_LOGIC;
    signal stack_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_partition_fu_127_ap_start : STD_LOGIC;
    signal grp_partition_fu_127_ap_done : STD_LOGIC;
    signal grp_partition_fu_127_ap_idle : STD_LOGIC;
    signal grp_partition_fu_127_ap_ready : STD_LOGIC;
    signal grp_partition_fu_127_a_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_partition_fu_127_a_ce0 : STD_LOGIC;
    signal grp_partition_fu_127_a_we0 : STD_LOGIC;
    signal grp_partition_fu_127_a_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_partition_fu_127_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_grp_partition_fu_127_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal stack_size_fu_46 : STD_LOGIC_VECTOR (63 downto 0);
    signal stack_size_2_fu_161_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal tmp_3_fu_182_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_189_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component partition IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        init : IN STD_LOGIC_VECTOR (63 downto 0);
        end_r : IN STD_LOGIC_VECTOR (63 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        a_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component quicksort_stack_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    stack_0_U : component quicksort_stack_0
    generic map (
        DataWidth => 64,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stack_0_address0,
        ce0 => stack_0_ce0,
        we0 => stack_0_we0,
        d0 => stack_0_d0,
        q0 => stack_0_q0);

    stack_1_U : component quicksort_stack_0
    generic map (
        DataWidth => 64,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stack_1_address0,
        ce0 => stack_1_ce0,
        we0 => stack_1_we0,
        d0 => stack_1_d0,
        q0 => stack_1_q0);

    grp_partition_fu_127 : component partition
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_partition_fu_127_ap_start,
        ap_done => grp_partition_fu_127_ap_done,
        ap_idle => grp_partition_fu_127_ap_idle,
        ap_ready => grp_partition_fu_127_ap_ready,
        init => base_reg_223,
        end_r => stack_1_load_reg_228,
        a_address0 => grp_partition_fu_127_a_address0,
        a_ce0 => grp_partition_fu_127_a_ce0,
        a_we0 => grp_partition_fu_127_a_we0,
        a_d0 => grp_partition_fu_127_a_d0,
        a_q0 => a_q0,
        ap_return => grp_partition_fu_127_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_partition_fu_127_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_partition_fu_127_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_155_p2 = ap_const_lv1_1))) then 
                    ap_reg_grp_partition_fu_127_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_partition_fu_127_ap_ready)) then 
                    ap_reg_grp_partition_fu_127_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    stack_size_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_155_p2 = ap_const_lv1_1))) then 
                stack_size_fu_46 <= stack_size_1_fu_171_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_1_fu_155_p2))) then 
                stack_size_fu_46 <= stack_size_2_fu_161_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                stack_size_fu_46 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                base_reg_223 <= stack_0_q0;
                stack_1_load_reg_228 <= stack_1_q0;
                tmp_1_reg_233 <= tmp_1_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                stack_0_addr_reg_210 <= stack_size_fu_46(4 - 1 downto 0);
                stack_size_load_reg_204 <= stack_size_fu_46;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_155_p2 = ap_const_lv1_1))) then
                stack_size_1_reg_237 <= stack_size_1_fu_171_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_147_p3, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_147_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_block_state4_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    a_address0 <= grp_partition_fu_127_a_address0;
    a_ce0 <= grp_partition_fu_127_a_ce0;
    a_d0 <= grp_partition_fu_127_a_d0;
    a_we0 <= grp_partition_fu_127_a_we0;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state4_on_subcall_done_assign_proc : process(tmp_1_reg_233, grp_partition_fu_127_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((tmp_1_reg_233 = ap_const_lv1_1) and (ap_const_logic_0 = grp_partition_fu_127_ap_done));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_147_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_147_p3 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_147_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_147_p3 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_partition_fu_127_ap_start <= ap_reg_grp_partition_fu_127_ap_start;

    stack_0_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, stack_0_addr_reg_210, ap_CS_fsm_state3, stack_size_1_fu_171_p2, ap_CS_fsm_state4, stack_size_fu_46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stack_0_address0 <= stack_0_addr_reg_210;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            stack_0_address0 <= stack_size_1_fu_171_p2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            stack_0_address0 <= stack_size_fu_46(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            stack_0_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            stack_0_address0 <= "XXXX";
        end if; 
    end process;


    stack_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_block_state4_on_subcall_done = ap_const_boolean_0)))) then 
            stack_0_ce0 <= ap_const_logic_1;
        else 
            stack_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stack_0_d0_assign_proc : process(ap_CS_fsm_state1, i, stack_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_3_fu_182_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stack_0_d0 <= tmp_3_fu_182_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            stack_0_d0 <= stack_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            stack_0_d0 <= i;
        else 
            stack_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stack_0_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, tmp_1_fu_155_p2, tmp_1_reg_233, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_155_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_1_reg_233 = ap_const_lv1_1) and (ap_block_state4_on_subcall_done = ap_const_boolean_0)))) then 
            stack_0_we0 <= ap_const_logic_1;
        else 
            stack_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stack_1_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, stack_size_1_reg_237, ap_CS_fsm_state4, stack_size_fu_46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stack_1_address0 <= stack_size_1_reg_237(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            stack_1_address0 <= stack_size_fu_46(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            stack_1_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            stack_1_address0 <= "XXXX";
        end if; 
    end process;


    stack_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_block_state4_on_subcall_done = ap_const_boolean_0)))) then 
            stack_1_ce0 <= ap_const_logic_1;
        else 
            stack_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stack_1_d0_assign_proc : process(ap_CS_fsm_state1, f, ap_CS_fsm_state4, tmp_5_fu_189_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stack_1_d0 <= tmp_5_fu_189_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            stack_1_d0 <= f;
        else 
            stack_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stack_1_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_1_reg_233, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_1_reg_233 = ap_const_lv1_1) and (ap_block_state4_on_subcall_done = ap_const_boolean_0)))) then 
            stack_1_we0 <= ap_const_logic_1;
        else 
            stack_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    stack_size_1_fu_171_p2 <= std_logic_vector(unsigned(stack_size_load_reg_204) + unsigned(ap_const_lv64_1));
    stack_size_2_fu_161_p2 <= std_logic_vector(unsigned(stack_size_load_reg_204) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    tmp_1_fu_155_p2 <= "1" when (signed(stack_0_q0) < signed(stack_1_q0)) else "0";
    tmp_3_fu_182_p2 <= std_logic_vector(unsigned(grp_partition_fu_127_ap_return) + unsigned(ap_const_lv64_1));
    tmp_5_fu_189_p2 <= std_logic_vector(unsigned(grp_partition_fu_127_ap_return) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    tmp_fu_147_p3 <= stack_size_fu_46(63 downto 63);
end behav;
