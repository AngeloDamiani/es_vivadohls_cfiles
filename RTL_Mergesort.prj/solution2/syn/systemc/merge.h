// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _merge_HH_
#define _merge_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mergesort_mux_104bkb.h"
#include "merge_x.h"

namespace ap_rtl {

struct merge : public sc_module {
    // Port declarations 39
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > i1;
    sc_in< sc_lv<64> > f1;
    sc_in< sc_lv<64> > f2;
    sc_out< sc_lv<64> > arr_0;
    sc_out< sc_logic > arr_0_ap_vld;
    sc_in< sc_lv<64> > arr_0_read;
    sc_out< sc_lv<64> > arr_1;
    sc_out< sc_logic > arr_1_ap_vld;
    sc_in< sc_lv<64> > arr_1_read;
    sc_out< sc_lv<64> > arr_2;
    sc_out< sc_logic > arr_2_ap_vld;
    sc_in< sc_lv<64> > arr_2_read;
    sc_out< sc_lv<64> > arr_3;
    sc_out< sc_logic > arr_3_ap_vld;
    sc_in< sc_lv<64> > arr_3_read;
    sc_out< sc_lv<64> > arr_4;
    sc_out< sc_logic > arr_4_ap_vld;
    sc_in< sc_lv<64> > arr_4_read;
    sc_out< sc_lv<64> > arr_5;
    sc_out< sc_logic > arr_5_ap_vld;
    sc_in< sc_lv<64> > arr_5_read;
    sc_out< sc_lv<64> > arr_6;
    sc_out< sc_logic > arr_6_ap_vld;
    sc_in< sc_lv<64> > arr_6_read;
    sc_out< sc_lv<64> > arr_7;
    sc_out< sc_logic > arr_7_ap_vld;
    sc_in< sc_lv<64> > arr_7_read;
    sc_out< sc_lv<64> > arr_8;
    sc_out< sc_logic > arr_8_ap_vld;
    sc_in< sc_lv<64> > arr_8_read;
    sc_out< sc_lv<64> > arr_9;
    sc_out< sc_logic > arr_9_ap_vld;
    sc_in< sc_lv<64> > arr_9_read;


    // Module declarations
    merge(sc_module_name name);
    SC_HAS_PROCESS(merge);

    ~merge();

    sc_trace_file* mVcdFile;

    merge_x* x_U;
    mergesort_mux_104bkb<1,1,64,64,64,64,64,64,64,64,64,64,4,64>* mergesort_mux_104bkb_U1;
    mergesort_mux_104bkb<1,1,64,64,64,64,64,64,64,64,64,64,4,64>* mergesort_mux_104bkb_U2;
    mergesort_mux_104bkb<1,1,64,64,64,64,64,64,64,64,64,64,4,64>* mergesort_mux_104bkb_U3;
    mergesort_mux_104bkb<1,1,64,64,64,64,64,64,64,64,64,64,4,64>* mergesort_mux_104bkb_U4;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<64> > i_cast_fu_414_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > i_1_fu_448_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_524_p2;
    sc_signal< sc_lv<1> > tmp_2_reg_785;
    sc_signal< sc_lv<1> > tmp_s_fu_442_p2;
    sc_signal< sc_lv<8> > tmp_20_fu_529_p1;
    sc_signal< sc_lv<8> > tmp_19_fu_533_p1;
    sc_signal< sc_lv<64> > i_6_fu_567_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_10_fu_541_p2;
    sc_signal< sc_lv<8> > tmp_12_fu_573_p2;
    sc_signal< sc_lv<64> > i_5_fu_609_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_583_p2;
    sc_signal< sc_lv<8> > tmp_11_fu_615_p2;
    sc_signal< sc_lv<8> > tmp_28_fu_621_p1;
    sc_signal< sc_lv<64> > i_7_fu_633_p2;
    sc_signal< sc_lv<64> > i_7_reg_833;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > tmp_16_fu_628_p2;
    sc_signal< sc_lv<8> > tmp_17_fu_649_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > x_address0;
    sc_signal< sc_logic > x_ce0;
    sc_signal< sc_logic > x_we0;
    sc_signal< sc_lv<64> > x_d0;
    sc_signal< sc_lv<64> > x_q0;
    sc_signal< sc_lv<4> > i_reg_321;
    sc_signal< sc_lv<8> > tmp_8_reg_332;
    sc_signal< sc_lv<64> > i_2_reg_341;
    sc_signal< sc_lv<8> > tmp_5_reg_351;
    sc_signal< sc_lv<64> > i_3_reg_360;
    sc_signal< sc_lv<8> > tmp_14_reg_370;
    sc_signal< sc_lv<64> > i_4_reg_380;
    sc_signal< sc_lv<1> > tmp_1_fu_496_p2;
    sc_signal< sc_lv<4> > x_addr_gep_fu_283_p3;
    sc_signal< sc_lv<64> > p_0_fu_112;
    sc_signal< sc_lv<64> > i1_assign_fu_502_p2;
    sc_signal< sc_lv<64> > i2_1_fu_116;
    sc_signal< sc_lv<64> > i2_fu_392_p2;
    sc_signal< sc_lv<64> > i2_2_fu_513_p2;
    sc_signal< sc_lv<4> > tmp_29_fu_645_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_458_p12;
    sc_signal< sc_lv<64> > tmp_18_fu_479_p12;
    sc_signal< sc_lv<64> > tmp_24_fu_550_p12;
    sc_signal< sc_lv<64> > tmp_22_fu_592_p12;
    sc_signal< sc_lv<1> > slt_fu_420_p2;
    sc_signal< sc_lv<1> > slt1_fu_431_p2;
    sc_signal< sc_lv<1> > rev_fu_425_p2;
    sc_signal< sc_lv<1> > rev1_fu_436_p2;
    sc_signal< sc_lv<4> > tmp_4_fu_458_p11;
    sc_signal< sc_lv<4> > tmp_18_fu_479_p11;
    sc_signal< sc_lv<64> > tmp_9_fu_537_p1;
    sc_signal< sc_lv<4> > tmp_24_fu_550_p11;
    sc_signal< sc_lv<64> > tmp_6_fu_579_p1;
    sc_signal< sc_lv<4> > tmp_22_fu_592_p11;
    sc_signal< sc_lv<64> > tmp_15_fu_624_p1;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_7;
    static const sc_lv<4> ap_const_lv4_6;
    static const sc_lv<4> ap_const_lv4_5;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<8> ap_const_lv8_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_arr_0();
    void thread_arr_0_ap_vld();
    void thread_arr_1();
    void thread_arr_1_ap_vld();
    void thread_arr_2();
    void thread_arr_2_ap_vld();
    void thread_arr_3();
    void thread_arr_3_ap_vld();
    void thread_arr_4();
    void thread_arr_4_ap_vld();
    void thread_arr_5();
    void thread_arr_5_ap_vld();
    void thread_arr_6();
    void thread_arr_6_ap_vld();
    void thread_arr_7();
    void thread_arr_7_ap_vld();
    void thread_arr_8();
    void thread_arr_8_ap_vld();
    void thread_arr_9();
    void thread_arr_9_ap_vld();
    void thread_i1_assign_fu_502_p2();
    void thread_i2_2_fu_513_p2();
    void thread_i2_fu_392_p2();
    void thread_i_1_fu_448_p2();
    void thread_i_5_fu_609_p2();
    void thread_i_6_fu_567_p2();
    void thread_i_7_fu_633_p2();
    void thread_i_cast_fu_414_p1();
    void thread_rev1_fu_436_p2();
    void thread_rev_fu_425_p2();
    void thread_slt1_fu_431_p2();
    void thread_slt_fu_420_p2();
    void thread_tmp_10_fu_541_p2();
    void thread_tmp_11_fu_615_p2();
    void thread_tmp_12_fu_573_p2();
    void thread_tmp_15_fu_624_p1();
    void thread_tmp_16_fu_628_p2();
    void thread_tmp_17_fu_649_p2();
    void thread_tmp_18_fu_479_p11();
    void thread_tmp_19_fu_533_p1();
    void thread_tmp_1_fu_496_p2();
    void thread_tmp_20_fu_529_p1();
    void thread_tmp_22_fu_592_p11();
    void thread_tmp_24_fu_550_p11();
    void thread_tmp_28_fu_621_p1();
    void thread_tmp_29_fu_645_p1();
    void thread_tmp_2_fu_524_p2();
    void thread_tmp_4_fu_458_p11();
    void thread_tmp_6_fu_579_p1();
    void thread_tmp_7_fu_583_p2();
    void thread_tmp_9_fu_537_p1();
    void thread_tmp_s_fu_442_p2();
    void thread_x_addr_gep_fu_283_p3();
    void thread_x_address0();
    void thread_x_ce0();
    void thread_x_d0();
    void thread_x_we0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
