// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "banker_algorithm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic banker_algorithm::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic banker_algorithm::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> banker_algorithm::ap_ST_fsm_state1 = "1";
const sc_lv<7> banker_algorithm::ap_ST_fsm_state2 = "10";
const sc_lv<7> banker_algorithm::ap_ST_fsm_state3 = "100";
const sc_lv<7> banker_algorithm::ap_ST_fsm_state4 = "1000";
const sc_lv<7> banker_algorithm::ap_ST_fsm_state5 = "10000";
const sc_lv<7> banker_algorithm::ap_ST_fsm_state6 = "100000";
const sc_lv<7> banker_algorithm::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> banker_algorithm::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> banker_algorithm::ap_const_lv32_1 = "1";
const sc_lv<32> banker_algorithm::ap_const_lv32_2 = "10";
const sc_lv<1> banker_algorithm::ap_const_lv1_0 = "0";
const sc_lv<32> banker_algorithm::ap_const_lv32_3 = "11";
const sc_lv<32> banker_algorithm::ap_const_lv32_4 = "100";
const sc_lv<3> banker_algorithm::ap_const_lv3_0 = "000";
const sc_lv<1> banker_algorithm::ap_const_lv1_1 = "1";
const sc_lv<32> banker_algorithm::ap_const_lv32_5 = "101";
const sc_lv<2> banker_algorithm::ap_const_lv2_0 = "00";
const sc_lv<2> banker_algorithm::ap_const_lv2_3 = "11";
const sc_lv<2> banker_algorithm::ap_const_lv2_1 = "1";
const sc_lv<3> banker_algorithm::ap_const_lv3_1 = "1";
const sc_lv<32> banker_algorithm::ap_const_lv32_6 = "110";
const sc_lv<4> banker_algorithm::ap_const_lv4_0 = "0000";
const sc_lv<64> banker_algorithm::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const bool banker_algorithm::ap_const_boolean_1 = true;

banker_algorithm::banker_algorithm(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_allocated_address0);
    sensitive << ( allocated_addr_reg_214 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_allocated_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_allocated_d0);
    sensitive << ( allocated_q0 );
    sensitive << ( need_load_reg_237 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_allocated_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_return);
    sensitive << ( p_0_reg_99 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_available_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( available_addr_reg_232 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( j_cast1_fu_144_p1 );

    SC_METHOD(thread_available_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_available_d0);
    sensitive << ( tmp_6_reg_253 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_2_fu_176_p2 );

    SC_METHOD(thread_available_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_i_1_fu_138_p2);
    sensitive << ( i_reg_77 );

    SC_METHOD(thread_i_cast2_cast_fu_112_p1);
    sensitive << ( i_reg_77 );

    SC_METHOD(thread_j_1_fu_170_p2);
    sensitive << ( j_reg_88 );

    SC_METHOD(thread_j_cast1_cast_fu_149_p1);
    sensitive << ( j_reg_88 );

    SC_METHOD(thread_j_cast1_fu_144_p1);
    sensitive << ( j_reg_88 );

    SC_METHOD(thread_max_address0);

    SC_METHOD(thread_max_address1);

    SC_METHOD(thread_max_ce0);

    SC_METHOD(thread_max_ce1);

    SC_METHOD(thread_max_d0);

    SC_METHOD(thread_max_d1);

    SC_METHOD(thread_max_we0);

    SC_METHOD(thread_max_we1);

    SC_METHOD(thread_need_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_8_cast_fu_158_p1 );

    SC_METHOD(thread_need_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_1_fu_164_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_88 );

    SC_METHOD(thread_tmp_2_fu_176_p2);
    sensitive << ( need_load_reg_237 );
    sensitive << ( available_load_reg_244 );

    SC_METHOD(thread_tmp_4_fu_187_p2);
    sensitive << ( need_load_reg_237 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_2_fu_176_p2 );

    SC_METHOD(thread_tmp_5_fu_116_p3);
    sensitive << ( i_reg_77 );

    SC_METHOD(thread_tmp_6_fu_192_p2);
    sensitive << ( allocated_q0 );
    sensitive << ( available_load_reg_244 );

    SC_METHOD(thread_tmp_7_fu_124_p2);
    sensitive << ( tmp_5_fu_116_p3 );
    sensitive << ( i_cast2_cast_fu_112_p1 );

    SC_METHOD(thread_tmp_8_cast_fu_158_p1);
    sensitive << ( tmp_8_fu_153_p2 );

    SC_METHOD(thread_tmp_8_fu_153_p2);
    sensitive << ( tmp_7_reg_201 );
    sensitive << ( j_cast1_cast_fu_149_p1 );

    SC_METHOD(thread_tmp_fu_130_p3);
    sensitive << ( i_reg_77 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_164_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_4_fu_187_p2 );
    sensitive << ( tmp_fu_130_p3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "banker_algorithm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, available_address0, "(port)available_address0");
    sc_trace(mVcdFile, available_ce0, "(port)available_ce0");
    sc_trace(mVcdFile, available_we0, "(port)available_we0");
    sc_trace(mVcdFile, available_d0, "(port)available_d0");
    sc_trace(mVcdFile, available_q0, "(port)available_q0");
    sc_trace(mVcdFile, allocated_address0, "(port)allocated_address0");
    sc_trace(mVcdFile, allocated_ce0, "(port)allocated_ce0");
    sc_trace(mVcdFile, allocated_we0, "(port)allocated_we0");
    sc_trace(mVcdFile, allocated_d0, "(port)allocated_d0");
    sc_trace(mVcdFile, allocated_q0, "(port)allocated_q0");
    sc_trace(mVcdFile, max_address0, "(port)max_address0");
    sc_trace(mVcdFile, max_ce0, "(port)max_ce0");
    sc_trace(mVcdFile, max_we0, "(port)max_we0");
    sc_trace(mVcdFile, max_d0, "(port)max_d0");
    sc_trace(mVcdFile, max_q0, "(port)max_q0");
    sc_trace(mVcdFile, max_address1, "(port)max_address1");
    sc_trace(mVcdFile, max_ce1, "(port)max_ce1");
    sc_trace(mVcdFile, max_we1, "(port)max_we1");
    sc_trace(mVcdFile, max_d1, "(port)max_d1");
    sc_trace(mVcdFile, max_q1, "(port)max_q1");
    sc_trace(mVcdFile, need_address0, "(port)need_address0");
    sc_trace(mVcdFile, need_ce0, "(port)need_ce0");
    sc_trace(mVcdFile, need_q0, "(port)need_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_7_fu_124_p2, "tmp_7_fu_124_p2");
    sc_trace(mVcdFile, tmp_7_reg_201, "tmp_7_reg_201");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_1_fu_138_p2, "i_1_fu_138_p2");
    sc_trace(mVcdFile, i_1_reg_209, "i_1_reg_209");
    sc_trace(mVcdFile, allocated_addr_reg_214, "allocated_addr_reg_214");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, j_1_fu_170_p2, "j_1_fu_170_p2");
    sc_trace(mVcdFile, j_1_reg_227, "j_1_reg_227");
    sc_trace(mVcdFile, available_addr_reg_232, "available_addr_reg_232");
    sc_trace(mVcdFile, tmp_1_fu_164_p2, "tmp_1_fu_164_p2");
    sc_trace(mVcdFile, need_load_reg_237, "need_load_reg_237");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, available_load_reg_244, "available_load_reg_244");
    sc_trace(mVcdFile, tmp_6_fu_192_p2, "tmp_6_fu_192_p2");
    sc_trace(mVcdFile, tmp_6_reg_253, "tmp_6_reg_253");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_4_fu_187_p2, "tmp_4_fu_187_p2");
    sc_trace(mVcdFile, i_reg_77, "i_reg_77");
    sc_trace(mVcdFile, j_reg_88, "j_reg_88");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_fu_130_p3, "tmp_fu_130_p3");
    sc_trace(mVcdFile, p_0_reg_99, "p_0_reg_99");
    sc_trace(mVcdFile, tmp_8_cast_fu_158_p1, "tmp_8_cast_fu_158_p1");
    sc_trace(mVcdFile, j_cast1_fu_144_p1, "j_cast1_fu_144_p1");
    sc_trace(mVcdFile, tmp_2_fu_176_p2, "tmp_2_fu_176_p2");
    sc_trace(mVcdFile, tmp_5_fu_116_p3, "tmp_5_fu_116_p3");
    sc_trace(mVcdFile, i_cast2_cast_fu_112_p1, "i_cast2_cast_fu_112_p1");
    sc_trace(mVcdFile, j_cast1_cast_fu_149_p1, "j_cast1_cast_fu_149_p1");
    sc_trace(mVcdFile, tmp_8_fu_153_p2, "tmp_8_fu_153_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("banker_algorithm.hdltvin.dat");
    mHdltvoutHandle.open("banker_algorithm.hdltvout.dat");
}

banker_algorithm::~banker_algorithm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void banker_algorithm::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_164_p2.read(), ap_const_lv1_1))) {
        i_reg_77 = i_1_reg_209.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_77 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_130_p3.read()))) {
        j_reg_88 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        j_reg_88 = j_1_reg_227.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_130_p3.read()))) {
        p_0_reg_99 = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(tmp_4_fu_187_p2.read(), ap_const_lv1_1))) {
        p_0_reg_99 = ap_const_lv2_3;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        allocated_addr_reg_214 =  (sc_lv<4>) (tmp_8_cast_fu_158_p1.read());
        j_1_reg_227 = j_1_fu_170_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_1_fu_164_p2.read(), ap_const_lv1_0))) {
        available_addr_reg_232 =  (sc_lv<2>) (j_cast1_fu_144_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        available_load_reg_244 = available_q0.read();
        need_load_reg_237 = need_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_209 = i_1_fu_138_p2.read();
        tmp_7_reg_201 = tmp_7_fu_124_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_fu_187_p2.read()))) {
        tmp_6_reg_253 = tmp_6_fu_192_p2.read();
    }
}

void banker_algorithm::thread_allocated_address0() {
    allocated_address0 = allocated_addr_reg_214.read();
}

void banker_algorithm::thread_allocated_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        allocated_ce0 = ap_const_logic_1;
    } else {
        allocated_ce0 = ap_const_logic_0;
    }
}

void banker_algorithm::thread_allocated_d0() {
    allocated_d0 = (!allocated_q0.read().is_01() || !need_load_reg_237.read().is_01())? sc_lv<64>(): (sc_biguint<64>(allocated_q0.read()) + sc_biguint<64>(need_load_reg_237.read()));
}

void banker_algorithm::thread_allocated_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        allocated_we0 = ap_const_logic_1;
    } else {
        allocated_we0 = ap_const_logic_0;
    }
}

void banker_algorithm::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void banker_algorithm::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void banker_algorithm::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void banker_algorithm::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void banker_algorithm::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void banker_algorithm::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void banker_algorithm::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void banker_algorithm::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void banker_algorithm::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void banker_algorithm::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void banker_algorithm::thread_ap_return() {
    ap_return = esl_sext<64,2>(p_0_reg_99.read());
}

void banker_algorithm::thread_available_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        available_address0 = available_addr_reg_232.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        available_address0 =  (sc_lv<2>) (j_cast1_fu_144_p1.read());
    } else {
        available_address0 = "XX";
    }
}

void banker_algorithm::thread_available_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        available_ce0 = ap_const_logic_1;
    } else {
        available_ce0 = ap_const_logic_0;
    }
}

void banker_algorithm::thread_available_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        available_d0 = tmp_6_reg_253.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        available_d0 = tmp_2_fu_176_p2.read();
    } else {
        available_d0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void banker_algorithm::thread_available_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        available_we0 = ap_const_logic_1;
    } else {
        available_we0 = ap_const_logic_0;
    }
}

void banker_algorithm::thread_i_1_fu_138_p2() {
    i_1_fu_138_p2 = (!i_reg_77.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_77.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void banker_algorithm::thread_i_cast2_cast_fu_112_p1() {
    i_cast2_cast_fu_112_p1 = esl_zext<5,3>(i_reg_77.read());
}

void banker_algorithm::thread_j_1_fu_170_p2() {
    j_1_fu_170_p2 = (!j_reg_88.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j_reg_88.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void banker_algorithm::thread_j_cast1_cast_fu_149_p1() {
    j_cast1_cast_fu_149_p1 = esl_zext<5,2>(j_reg_88.read());
}

void banker_algorithm::thread_j_cast1_fu_144_p1() {
    j_cast1_fu_144_p1 = esl_zext<64,2>(j_reg_88.read());
}

void banker_algorithm::thread_max_address0() {
    max_address0 = ap_const_lv4_0;
}

void banker_algorithm::thread_max_address1() {
    max_address1 = ap_const_lv4_0;
}

void banker_algorithm::thread_max_ce0() {
    max_ce0 = ap_const_logic_0;
}

void banker_algorithm::thread_max_ce1() {
    max_ce1 = ap_const_logic_0;
}

void banker_algorithm::thread_max_d0() {
    max_d0 = ap_const_lv64_0;
}

void banker_algorithm::thread_max_d1() {
    max_d1 = ap_const_lv64_0;
}

void banker_algorithm::thread_max_we0() {
    max_we0 = ap_const_logic_0;
}

void banker_algorithm::thread_max_we1() {
    max_we1 = ap_const_logic_0;
}

void banker_algorithm::thread_need_address0() {
    need_address0 =  (sc_lv<4>) (tmp_8_cast_fu_158_p1.read());
}

void banker_algorithm::thread_need_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        need_ce0 = ap_const_logic_1;
    } else {
        need_ce0 = ap_const_logic_0;
    }
}

void banker_algorithm::thread_tmp_1_fu_164_p2() {
    tmp_1_fu_164_p2 = (!j_reg_88.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_88.read() == ap_const_lv2_3);
}

void banker_algorithm::thread_tmp_2_fu_176_p2() {
    tmp_2_fu_176_p2 = (!available_load_reg_244.read().is_01() || !need_load_reg_237.read().is_01())? sc_lv<64>(): (sc_biguint<64>(available_load_reg_244.read()) - sc_biguint<64>(need_load_reg_237.read()));
}

void banker_algorithm::thread_tmp_4_fu_187_p2() {
    tmp_4_fu_187_p2 = (!need_load_reg_237.read().is_01() || !tmp_2_fu_176_p2.read().is_01())? sc_lv<1>(): (sc_bigint<64>(need_load_reg_237.read()) > sc_bigint<64>(tmp_2_fu_176_p2.read()));
}

void banker_algorithm::thread_tmp_5_fu_116_p3() {
    tmp_5_fu_116_p3 = esl_concat<3,2>(i_reg_77.read(), ap_const_lv2_0);
}

void banker_algorithm::thread_tmp_6_fu_192_p2() {
    tmp_6_fu_192_p2 = (!allocated_q0.read().is_01() || !available_load_reg_244.read().is_01())? sc_lv<64>(): (sc_biguint<64>(allocated_q0.read()) + sc_biguint<64>(available_load_reg_244.read()));
}

void banker_algorithm::thread_tmp_7_fu_124_p2() {
    tmp_7_fu_124_p2 = (!tmp_5_fu_116_p3.read().is_01() || !i_cast2_cast_fu_112_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_5_fu_116_p3.read()) - sc_biguint<5>(i_cast2_cast_fu_112_p1.read()));
}

void banker_algorithm::thread_tmp_8_cast_fu_158_p1() {
    tmp_8_cast_fu_158_p1 = esl_sext<64,5>(tmp_8_fu_153_p2.read());
}

void banker_algorithm::thread_tmp_8_fu_153_p2() {
    tmp_8_fu_153_p2 = (!tmp_7_reg_201.read().is_01() || !j_cast1_cast_fu_149_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_7_reg_201.read()) + sc_biguint<5>(j_cast1_cast_fu_149_p1.read()));
}

void banker_algorithm::thread_tmp_fu_130_p3() {
    tmp_fu_130_p3 = i_reg_77.read().range(2, 2);
}

void banker_algorithm::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_130_p3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_1_fu_164_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(tmp_4_fu_187_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

void banker_algorithm::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"available_address0\" :  \"" << available_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"available_ce0\" :  \"" << available_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"available_we0\" :  \"" << available_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"available_d0\" :  \"" << available_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"available_q0\" :  \"" << available_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allocated_address0\" :  \"" << allocated_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allocated_ce0\" :  \"" << allocated_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allocated_we0\" :  \"" << allocated_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allocated_d0\" :  \"" << allocated_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"allocated_q0\" :  \"" << allocated_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"max_address0\" :  \"" << max_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"max_ce0\" :  \"" << max_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"max_we0\" :  \"" << max_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"max_d0\" :  \"" << max_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"max_q0\" :  \"" << max_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"max_address1\" :  \"" << max_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"max_ce1\" :  \"" << max_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"max_we1\" :  \"" << max_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"max_d1\" :  \"" << max_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"max_q1\" :  \"" << max_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"need_address0\" :  \"" << need_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"need_ce0\" :  \"" << need_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"need_q0\" :  \"" << need_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

