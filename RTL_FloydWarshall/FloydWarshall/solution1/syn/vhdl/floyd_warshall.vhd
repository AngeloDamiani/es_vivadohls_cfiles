-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity floyd_warshall is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_we1 : OUT STD_LOGIC;
    A_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of floyd_warshall is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "floyd_warshall,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.416000,HLS_SYN_LAT=2003,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=423,HLS_SYN_LUT=370}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_64 : STD_LOGIC_VECTOR (7 downto 0) := "01100100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten1_reg_95 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_reg_106 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_117 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_128 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_139 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten1_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_358 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten1_reg_358 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next1_fu_156_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_next1_reg_362 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal i_mid_fu_174_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_mid_reg_367 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_mid2_v_fu_182_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_mid2_v_reg_373 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_mid_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_mid_reg_381 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid2_fu_214_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_reg_386 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next_fu_228_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next_reg_392 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_mid2_fu_269_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_mid2_reg_397 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal tmp_7_cast_fu_275_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_cast_reg_404 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_fu_289_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_414 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_addr_2_reg_424 : STD_LOGIC_VECTOR (6 downto 0);
    signal A_load_1_reg_429 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal indvar_flatten1_phi_fu_99_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal h_phi_fu_110_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_phi_fu_121_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_phi_fu_132_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_phi_fu_143_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_cast_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal tmp_12_cast_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten9_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_1_fu_162_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_op_fu_222_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_236_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_247_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_243_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_254_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_fu_264_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_258_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_278_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_297_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_308_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_304_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_315_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_mid2_cast_fu_294_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_319_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_325_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_336_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    h_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten1_reg_358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                h_reg_106 <= tmp_1_mid2_v_reg_373;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_reg_106 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten1_reg_358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_reg_128 <= tmp_4_mid2_reg_397;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_128 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten1_reg_358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                indvar_flatten1_reg_95 <= indvar_flatten_next1_reg_362;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten1_reg_95 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten1_reg_358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                indvar_flatten_reg_117 <= indvar_flatten_next_reg_392;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_117 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten1_reg_358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                j_reg_139 <= j_1_reg_414;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_139 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten1_reg_358 = ap_const_lv1_0))) then
                A_addr_2_reg_424 <= tmp_14_cast_fu_341_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten1_reg_358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
                A_load_1_reg_429 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten1_reg_358 <= exitcond_flatten1_reg_358;
                exitcond_flatten1_reg_358 <= exitcond_flatten1_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten1_fu_150_p2 = ap_const_lv1_0))) then
                i_mid_reg_367 <= i_mid_fu_174_p3;
                j_mid2_reg_386 <= j_mid2_fu_214_p3;
                tmp_5_mid_reg_381 <= tmp_5_mid_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_flatten_next1_reg_362 <= indvar_flatten_next1_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten1_fu_150_p2 = ap_const_lv1_0))) then
                indvar_flatten_next_reg_392 <= indvar_flatten_next_fu_228_p3;
                tmp_1_mid2_v_reg_373 <= tmp_1_mid2_v_fu_182_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (exitcond_flatten1_reg_358 = ap_const_lv1_0))) then
                j_1_reg_414 <= j_1_fu_289_p2;
                tmp_4_mid2_reg_397 <= tmp_4_mid2_fu_269_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (exitcond_flatten1_reg_358 = ap_const_lv1_0))) then
                    tmp_7_cast_reg_404(3 downto 0) <= tmp_7_cast_fu_275_p1(3 downto 0);
            end if;
        end if;
    end process;
    tmp_7_cast_reg_404(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten1_fu_150_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011011, ap_block_pp0_stage1_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten1_fu_150_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten1_fu_150_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, tmp_13_cast_fu_284_p1, ap_block_pp0_stage1_flag00000000, tmp_12_cast_fu_331_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            A_address0 <= tmp_12_cast_fu_331_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            A_address0 <= tmp_13_cast_fu_284_p1(7 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, A_addr_2_reg_424, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, ap_block_pp0_stage1_flag00000000, tmp_14_cast_fu_341_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                A_address1 <= A_addr_2_reg_424;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                A_address1 <= tmp_14_cast_fu_341_p1(7 - 1 downto 0);
            else 
                A_address1 <= "XXXXXXX";
            end if;
        else 
            A_address1 <= "XXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_d1 <= tmp_8_fu_346_p2;

    A_we1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_enable_reg_pp0_iter1, tmp_9_fu_352_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = tmp_9_fu_352_p2))) then 
            A_we1 <= ap_const_logic_1;
        else 
            A_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten1_fu_150_p2)
    begin
        if ((exitcond_flatten1_fu_150_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten1_fu_150_p2 <= "1" when (indvar_flatten1_phi_fu_99_p4 = ap_const_lv10_3E8) else "0";
    exitcond_flatten9_fu_168_p2 <= "1" when (indvar_flatten_phi_fu_121_p4 = ap_const_lv8_64) else "0";
    h_1_fu_162_p2 <= std_logic_vector(unsigned(h_phi_fu_110_p4) + unsigned(ap_const_lv4_1));

    h_phi_fu_110_p4_assign_proc : process(h_reg_106, exitcond_flatten1_reg_358, ap_CS_fsm_pp0_stage0, tmp_1_mid2_v_reg_373, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten1_reg_358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            h_phi_fu_110_p4 <= tmp_1_mid2_v_reg_373;
        else 
            h_phi_fu_110_p4 <= h_reg_106;
        end if; 
    end process;

    i_1_fu_264_p2 <= std_logic_vector(unsigned(i_mid_reg_367) + unsigned(ap_const_lv4_1));
    i_mid_fu_174_p3 <= 
        ap_const_lv4_0 when (exitcond_flatten9_fu_168_p2(0) = '1') else 
        i_phi_fu_132_p4;

    i_phi_fu_132_p4_assign_proc : process(i_reg_128, exitcond_flatten1_reg_358, ap_CS_fsm_pp0_stage0, tmp_4_mid2_reg_397, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten1_reg_358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_phi_fu_132_p4 <= tmp_4_mid2_reg_397;
        else 
            i_phi_fu_132_p4 <= i_reg_128;
        end if; 
    end process;


    indvar_flatten1_phi_fu_99_p4_assign_proc : process(indvar_flatten1_reg_95, exitcond_flatten1_reg_358, ap_CS_fsm_pp0_stage0, indvar_flatten_next1_reg_362, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten1_reg_358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            indvar_flatten1_phi_fu_99_p4 <= indvar_flatten_next1_reg_362;
        else 
            indvar_flatten1_phi_fu_99_p4 <= indvar_flatten1_reg_95;
        end if; 
    end process;

    indvar_flatten_next1_fu_156_p2 <= std_logic_vector(unsigned(indvar_flatten1_phi_fu_99_p4) + unsigned(ap_const_lv10_1));
    indvar_flatten_next_fu_228_p3 <= 
        ap_const_lv8_1 when (exitcond_flatten9_fu_168_p2(0) = '1') else 
        indvar_flatten_op_fu_222_p2;
    indvar_flatten_op_fu_222_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_121_p4) + unsigned(ap_const_lv8_1));

    indvar_flatten_phi_fu_121_p4_assign_proc : process(indvar_flatten_reg_117, exitcond_flatten1_reg_358, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_392, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten1_reg_358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            indvar_flatten_phi_fu_121_p4 <= indvar_flatten_next_reg_392;
        else 
            indvar_flatten_phi_fu_121_p4 <= indvar_flatten_reg_117;
        end if; 
    end process;

    j_1_fu_289_p2 <= std_logic_vector(unsigned(j_mid2_reg_386) + unsigned(ap_const_lv4_1));
    j_mid2_fu_214_p3 <= 
        ap_const_lv4_0 when (tmp_3_fu_208_p2(0) = '1') else 
        j_phi_fu_143_p4;

    j_phi_fu_143_p4_assign_proc : process(j_reg_139, exitcond_flatten1_reg_358, ap_CS_fsm_pp0_stage0, j_1_reg_414, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten1_reg_358 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            j_phi_fu_143_p4 <= j_1_reg_414;
        else 
            j_phi_fu_143_p4 <= j_reg_139;
        end if; 
    end process;

    not_exitcond_flatten_fu_190_p2 <= (exitcond_flatten9_fu_168_p2 xor ap_const_lv1_1);
    p_shl1_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_308_p3),8));
    p_shl2_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_236_p3),8));
    p_shl3_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_247_p3),8));
    p_shl_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_297_p3),8));
    tmp_10_fu_325_p2 <= std_logic_vector(unsigned(tmp_1_mid2_cast_fu_294_p1) + unsigned(tmp_7_fu_319_p2));
    tmp_11_fu_278_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_275_p1) + unsigned(tmp_2_fu_258_p2));
    tmp_12_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_325_p2),64));
    tmp_12_fu_336_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_404) + unsigned(tmp_7_fu_319_p2));
    tmp_13_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_278_p2),64));
    tmp_14_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_336_p2),64));
    tmp_1_fu_247_p3 <= (tmp_1_mid2_v_reg_373 & ap_const_lv1_0);
    tmp_1_mid2_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_mid2_v_reg_373),8));
    tmp_1_mid2_v_fu_182_p3 <= 
        h_1_fu_162_p2 when (exitcond_flatten9_fu_168_p2(0) = '1') else 
        h_phi_fu_110_p4;
    tmp_2_fu_258_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_243_p1) + unsigned(p_shl3_cast_fu_254_p1));
    tmp_3_fu_208_p2 <= (tmp_5_mid_fu_202_p2 or exitcond_flatten9_fu_168_p2);
    tmp_4_fu_196_p2 <= "1" when (j_phi_fu_143_p4 = ap_const_lv4_A) else "0";
    tmp_4_mid2_fu_269_p3 <= 
        i_1_fu_264_p2 when (tmp_5_mid_reg_381(0) = '1') else 
        i_mid_reg_367;
    tmp_5_fu_297_p3 <= (tmp_4_mid2_reg_397 & ap_const_lv3_0);
    tmp_5_mid_fu_202_p2 <= (tmp_4_fu_196_p2 and not_exitcond_flatten_fu_190_p2);
    tmp_6_fu_308_p3 <= (tmp_4_mid2_reg_397 & ap_const_lv1_0);
    tmp_7_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_386),8));
    tmp_7_fu_319_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_304_p1) + unsigned(p_shl1_cast_fu_315_p1));
    tmp_8_fu_346_p2 <= std_logic_vector(unsigned(A_load_1_reg_429) + unsigned(A_q0));
    tmp_9_fu_352_p2 <= "1" when (unsigned(tmp_8_fu_346_p2) < unsigned(A_q1)) else "0";
    tmp_fu_236_p3 <= (tmp_1_mid2_v_reg_373 & ap_const_lv3_0);
end behav;
