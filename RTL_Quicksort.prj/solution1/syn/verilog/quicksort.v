// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="quicksort,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.527000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2373,HLS_SYN_LUT=902}" *)

module quicksort (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i,
        f,
        a_address0,
        a_ce0,
        a_we0,
        a_d0,
        a_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] i;
input  [63:0] f;
output  [3:0] a_address0;
output   a_ce0;
output   a_we0;
output  [63:0] a_d0;
input  [63:0] a_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] stack_size_load_reg_204;
wire    ap_CS_fsm_state2;
reg   [3:0] stack_0_addr_reg_210;
wire   [0:0] tmp_fu_147_p3;
wire   [63:0] stack_0_q0;
reg   [63:0] base_reg_223;
wire    ap_CS_fsm_state3;
wire   [63:0] stack_1_q0;
reg   [63:0] stack_1_load_reg_228;
wire   [0:0] tmp_1_fu_155_p2;
reg   [0:0] tmp_1_reg_233;
wire   [63:0] stack_size_1_fu_171_p2;
reg   [63:0] stack_size_1_reg_237;
reg   [3:0] stack_0_address0;
reg    stack_0_ce0;
reg    stack_0_we0;
reg   [63:0] stack_0_d0;
reg   [3:0] stack_1_address0;
reg    stack_1_ce0;
reg    stack_1_we0;
reg   [63:0] stack_1_d0;
wire    grp_partition_fu_127_ap_start;
wire    grp_partition_fu_127_ap_done;
wire    grp_partition_fu_127_ap_idle;
wire    grp_partition_fu_127_ap_ready;
wire   [3:0] grp_partition_fu_127_a_address0;
wire    grp_partition_fu_127_a_ce0;
wire    grp_partition_fu_127_a_we0;
wire   [63:0] grp_partition_fu_127_a_d0;
wire   [63:0] grp_partition_fu_127_ap_return;
reg    ap_reg_grp_partition_fu_127_ap_start;
wire    ap_CS_fsm_state4;
reg   [63:0] stack_size_fu_46;
wire   [63:0] stack_size_2_fu_161_p2;
reg    ap_block_state4_on_subcall_done;
wire   [63:0] tmp_3_fu_182_p2;
wire   [63:0] tmp_5_fu_189_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_reg_grp_partition_fu_127_ap_start = 1'b0;
end

quicksort_stack_0 #(
    .DataWidth( 64 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
stack_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(stack_0_address0),
    .ce0(stack_0_ce0),
    .we0(stack_0_we0),
    .d0(stack_0_d0),
    .q0(stack_0_q0)
);

quicksort_stack_0 #(
    .DataWidth( 64 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
stack_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(stack_1_address0),
    .ce0(stack_1_ce0),
    .we0(stack_1_we0),
    .d0(stack_1_d0),
    .q0(stack_1_q0)
);

partition grp_partition_fu_127(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_partition_fu_127_ap_start),
    .ap_done(grp_partition_fu_127_ap_done),
    .ap_idle(grp_partition_fu_127_ap_idle),
    .ap_ready(grp_partition_fu_127_ap_ready),
    .init(base_reg_223),
    .end_r(stack_1_load_reg_228),
    .a_address0(grp_partition_fu_127_a_address0),
    .a_ce0(grp_partition_fu_127_a_ce0),
    .a_we0(grp_partition_fu_127_a_we0),
    .a_d0(grp_partition_fu_127_a_d0),
    .a_q0(a_q0),
    .ap_return(grp_partition_fu_127_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_partition_fu_127_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (tmp_1_fu_155_p2 == 1'd1))) begin
            ap_reg_grp_partition_fu_127_ap_start <= 1'b1;
        end else if ((1'b1 == grp_partition_fu_127_ap_ready)) begin
            ap_reg_grp_partition_fu_127_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_1_fu_155_p2 == 1'd1))) begin
        stack_size_fu_46 <= stack_size_1_fu_171_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_1_fu_155_p2))) begin
        stack_size_fu_46 <= stack_size_2_fu_161_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        stack_size_fu_46 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        base_reg_223 <= stack_0_q0;
        stack_1_load_reg_228 <= stack_1_q0;
        tmp_1_reg_233 <= tmp_1_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        stack_0_addr_reg_210 <= stack_size_fu_46;
        stack_size_load_reg_204 <= stack_size_fu_46;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_1_fu_155_p2 == 1'd1))) begin
        stack_size_1_reg_237 <= stack_size_1_fu_171_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_147_p3 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_147_p3 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stack_0_address0 = stack_0_addr_reg_210;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        stack_0_address0 = stack_size_1_fu_171_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        stack_0_address0 = stack_size_fu_46;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        stack_0_address0 = 64'd0;
    end else begin
        stack_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_on_subcall_done == 1'b0)))) begin
        stack_0_ce0 = 1'b1;
    end else begin
        stack_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stack_0_d0 = tmp_3_fu_182_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        stack_0_d0 = stack_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        stack_0_d0 = i;
    end else begin
        stack_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (tmp_1_fu_155_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (tmp_1_reg_233 == 1'd1) & (ap_block_state4_on_subcall_done == 1'b0)))) begin
        stack_0_we0 = 1'b1;
    end else begin
        stack_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stack_1_address0 = stack_size_1_reg_237;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        stack_1_address0 = stack_size_fu_46;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        stack_1_address0 = 64'd0;
    end else begin
        stack_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_on_subcall_done == 1'b0)))) begin
        stack_1_ce0 = 1'b1;
    end else begin
        stack_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stack_1_d0 = tmp_5_fu_189_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        stack_1_d0 = f;
    end else begin
        stack_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (tmp_1_reg_233 == 1'd1) & (ap_block_state4_on_subcall_done == 1'b0)))) begin
        stack_1_we0 = 1'b1;
    end else begin
        stack_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_147_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_on_subcall_done == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = grp_partition_fu_127_a_address0;

assign a_ce0 = grp_partition_fu_127_a_ce0;

assign a_d0 = grp_partition_fu_127_a_d0;

assign a_we0 = grp_partition_fu_127_a_we0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((tmp_1_reg_233 == 1'd1) & (1'b0 == grp_partition_fu_127_ap_done));
end

assign grp_partition_fu_127_ap_start = ap_reg_grp_partition_fu_127_ap_start;

assign stack_size_1_fu_171_p2 = (stack_size_load_reg_204 + 64'd1);

assign stack_size_2_fu_161_p2 = ($signed(stack_size_load_reg_204) + $signed(64'd18446744073709551615));

assign tmp_1_fu_155_p2 = (($signed(stack_0_q0) < $signed(stack_1_q0)) ? 1'b1 : 1'b0);

assign tmp_3_fu_182_p2 = (grp_partition_fu_127_ap_return + 64'd1);

assign tmp_5_fu_189_p2 = ($signed(grp_partition_fu_127_ap_return) + $signed(64'd18446744073709551615));

assign tmp_fu_147_p3 = stack_size_fu_46[32'd63];

endmodule //quicksort
