// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bubble_sort,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.642000,HLS_SYN_LAT=63,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=103,HLS_SYN_LUT=192}" *)

module bubble_sort (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_address0,
        arr_ce0,
        arr_we0,
        arr_d0,
        arr_q0,
        arr_address1,
        arr_ce1,
        arr_we1,
        arr_d1,
        arr_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] arr_address0;
output   arr_ce0;
output   arr_we0;
output  [63:0] arr_d0;
input  [63:0] arr_q0;
output  [3:0] arr_address1;
output   arr_ce1;
output   arr_we1;
output  [63:0] arr_d1;
input  [63:0] arr_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] arr_address0;
reg arr_ce0;
reg arr_we0;
reg[3:0] arr_address1;
reg arr_ce1;
reg arr_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_fu_163_p2;
reg   [0:0] tmp_reg_213;
wire    ap_CS_fsm_state2;
wire   [3:0] j_1_fu_169_p2;
reg   [3:0] j_1_reg_217;
wire   [7:0] index_1_assign_cast_fu_175_p1;
reg   [7:0] index_1_assign_cast_reg_222;
wire    ap_CS_fsm_state3;
wire   [6:0] i_fu_185_p2;
reg   [6:0] i_reg_230;
reg   [3:0] arr_addr_reg_235;
wire   [0:0] tmp_2_fu_179_p2;
reg   [3:0] arr_addr_1_reg_240;
reg   [3:0] j_reg_79;
wire   [0:0] tmp_8_fu_201_p2;
reg   [7:0] lastSwap_reg_90;
reg   [7:0] lastSwap_1_reg_102;
reg   [7:0] currentSwap_1_phi_fu_142_p4;
wire    ap_CS_fsm_state4;
reg   [1:0] is_sorted_reg_115;
reg   [1:0] is_sorted_1_phi_fu_154_p4;
reg   [6:0] currentSwap_reg_127;
wire   [0:0] tmp_7_fu_207_p2;
wire   [63:0] tmp_3_fu_191_p1;
wire   [63:0] tmp_6_fu_196_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        currentSwap_reg_127 <= i_reg_230;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_163_p2 == 1'd1))) begin
        currentSwap_reg_127 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        is_sorted_reg_115 <= is_sorted_1_phi_fu_154_p4;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_163_p2 == 1'd1))) begin
        is_sorted_reg_115 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_reg_213 == 1'd1) & (tmp_2_fu_179_p2 == 1'd0) & (1'd1 == tmp_8_fu_201_p2))) begin
        j_reg_79 <= j_1_reg_217;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_79 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        lastSwap_1_reg_102 <= currentSwap_1_phi_fu_142_p4;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_163_p2 == 1'd1))) begin
        lastSwap_1_reg_102 <= 8'd255;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_reg_213 == 1'd1) & (tmp_2_fu_179_p2 == 1'd0) & (1'd1 == tmp_8_fu_201_p2))) begin
        lastSwap_reg_90 <= lastSwap_1_reg_102;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        lastSwap_reg_90 <= 8'd9;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_reg_213 == 1'd1) & (1'd1 == tmp_2_fu_179_p2))) begin
        arr_addr_1_reg_240 <= tmp_6_fu_196_p1;
        arr_addr_reg_235 <= tmp_3_fu_191_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_reg_213 == 1'd1))) begin
        i_reg_230 <= i_fu_185_p2;
        index_1_assign_cast_reg_222[6 : 0] <= index_1_assign_cast_fu_175_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_1_reg_217 <= j_1_fu_169_p2;
        tmp_reg_213 <= tmp_fu_163_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((tmp_reg_213 == 1'd0) | ((tmp_2_fu_179_p2 == 1'd0) & (1'd0 == tmp_8_fu_201_p2))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((tmp_reg_213 == 1'd0) | ((tmp_2_fu_179_p2 == 1'd0) & (1'd0 == tmp_8_fu_201_p2))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        arr_address0 = arr_addr_reg_235;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        arr_address0 = tmp_3_fu_191_p1;
    end else begin
        arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        arr_address1 = arr_addr_1_reg_240;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        arr_address1 = tmp_6_fu_196_p1;
    end else begin
        arr_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        arr_ce0 = 1'b1;
    end else begin
        arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        arr_ce1 = 1'b1;
    end else begin
        arr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_7_fu_207_p2))) begin
        arr_we0 = 1'b1;
    end else begin
        arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_7_fu_207_p2))) begin
        arr_we1 = 1'b1;
    end else begin
        arr_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((1'd0 == tmp_7_fu_207_p2)) begin
            currentSwap_1_phi_fu_142_p4 = lastSwap_1_reg_102;
        end else if ((1'd1 == tmp_7_fu_207_p2)) begin
            currentSwap_1_phi_fu_142_p4 = index_1_assign_cast_reg_222;
        end else begin
            currentSwap_1_phi_fu_142_p4 = 'bx;
        end
    end else begin
        currentSwap_1_phi_fu_142_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((1'd0 == tmp_7_fu_207_p2)) begin
            is_sorted_1_phi_fu_154_p4 = is_sorted_reg_115;
        end else if ((1'd1 == tmp_7_fu_207_p2)) begin
            is_sorted_1_phi_fu_154_p4 = 2'd0;
        end else begin
            is_sorted_1_phi_fu_154_p4 = 'bx;
        end
    end else begin
        is_sorted_1_phi_fu_154_p4 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((tmp_reg_213 == 1'd0) | ((tmp_2_fu_179_p2 == 1'd0) & (1'd0 == tmp_8_fu_201_p2))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_reg_213 == 1'd1) & (tmp_2_fu_179_p2 == 1'd0) & (1'd1 == tmp_8_fu_201_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign arr_d0 = arr_q1;

assign arr_d1 = arr_q0;

assign i_fu_185_p2 = (currentSwap_reg_127 + 7'd1);

assign index_1_assign_cast_fu_175_p1 = currentSwap_reg_127;

assign j_1_fu_169_p2 = (j_reg_79 + 4'd1);

assign tmp_2_fu_179_p2 = (($signed(index_1_assign_cast_fu_175_p1) < $signed(lastSwap_reg_90)) ? 1'b1 : 1'b0);

assign tmp_3_fu_191_p1 = currentSwap_reg_127;

assign tmp_6_fu_196_p1 = i_fu_185_p2;

assign tmp_7_fu_207_p2 = (($signed(arr_q0) > $signed(arr_q1)) ? 1'b1 : 1'b0);

assign tmp_8_fu_201_p2 = ((is_sorted_reg_115 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_fu_163_p2 = ((j_reg_79 < 4'd10) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    index_1_assign_cast_reg_222[7] <= 1'b0;
end

endmodule //bubble_sort
