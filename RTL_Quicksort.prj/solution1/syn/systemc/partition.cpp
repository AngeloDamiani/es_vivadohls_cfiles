// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "partition.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic partition::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic partition::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> partition::ap_ST_fsm_state1 = "1";
const sc_lv<11> partition::ap_ST_fsm_state2 = "10";
const sc_lv<11> partition::ap_ST_fsm_state3 = "100";
const sc_lv<11> partition::ap_ST_fsm_state4 = "1000";
const sc_lv<11> partition::ap_ST_fsm_state5 = "10000";
const sc_lv<11> partition::ap_ST_fsm_state6 = "100000";
const sc_lv<11> partition::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> partition::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> partition::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> partition::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> partition::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> partition::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> partition::ap_const_lv32_1 = "1";
const sc_lv<32> partition::ap_const_lv32_9 = "1001";
const sc_lv<32> partition::ap_const_lv32_6 = "110";
const sc_lv<32> partition::ap_const_lv32_7 = "111";
const sc_lv<32> partition::ap_const_lv32_3 = "11";
const sc_lv<1> partition::ap_const_lv1_0 = "0";
const sc_lv<32> partition::ap_const_lv32_5 = "101";
const sc_lv<1> partition::ap_const_lv1_1 = "1";
const sc_lv<32> partition::ap_const_lv32_4 = "100";
const sc_lv<32> partition::ap_const_lv32_8 = "1000";
const sc_lv<32> partition::ap_const_lv32_A = "1010";
const sc_lv<64> partition::ap_const_lv64_1 = "1";
const sc_lv<64> partition::ap_const_lv64_FFFFFFFFFFFFFFFF = "1111111111111111111111111111111111111111111111111111111111111111";
const bool partition::ap_const_boolean_1 = true;

partition::partition(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( init );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( a_addr_reg_160 );
    sensitive << ( inf_load_reg_170 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( a_addr_2_reg_195 );
    sensitive << ( a_addr_3_reg_206 );
    sensitive << ( grp_fu_77_p2 );
    sensitive << ( tmp_1_fu_141_p2 );
    sensitive << ( inf_fu_20 );
    sensitive << ( sup_fu_24 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_fu_77_p2 );
    sensitive << ( tmp_1_fu_141_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_a_d0);
    sensitive << ( reg_82 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( reg_88 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_a_we0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_return);
    sensitive << ( sup_load_reg_189 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_grp_fu_77_p2);
    sensitive << ( a_q0 );
    sensitive << ( reg_82 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_reg_177 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_inf_1_fu_112_p2);
    sensitive << ( inf_load_reg_170 );

    SC_METHOD(thread_sup_1_fu_126_p2);
    sensitive << ( sup_load_reg_189 );

    SC_METHOD(thread_tmp_1_fu_141_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( inf_load_reg_170 );
    sensitive << ( grp_fu_77_p2 );
    sensitive << ( tmp_s_fu_136_p2 );

    SC_METHOD(thread_tmp_fu_107_p2);
    sensitive << ( end_r );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( inf_fu_20 );

    SC_METHOD(thread_tmp_s_fu_136_p2);
    sensitive << ( sup_load_reg_189 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_reg_177 );
    sensitive << ( grp_fu_77_p2 );
    sensitive << ( tmp_1_fu_141_p2 );
    sensitive << ( ap_CS_fsm_state5 );

    ap_CS_fsm = "00000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "partition_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, init, "(port)init");
    sc_trace(mVcdFile, end_r, "(port)end_r");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_we0, "(port)a_we0");
    sc_trace(mVcdFile, a_d0, "(port)a_d0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_82, "reg_82");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, reg_88, "reg_88");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, a_addr_reg_160, "a_addr_reg_160");
    sc_trace(mVcdFile, inf_load_reg_170, "inf_load_reg_170");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_fu_107_p2, "tmp_fu_107_p2");
    sc_trace(mVcdFile, tmp_reg_177, "tmp_reg_177");
    sc_trace(mVcdFile, sup_load_reg_189, "sup_load_reg_189");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, a_addr_2_reg_195, "a_addr_2_reg_195");
    sc_trace(mVcdFile, a_addr_3_reg_206, "a_addr_3_reg_206");
    sc_trace(mVcdFile, grp_fu_77_p2, "grp_fu_77_p2");
    sc_trace(mVcdFile, tmp_1_fu_141_p2, "tmp_1_fu_141_p2");
    sc_trace(mVcdFile, inf_fu_20, "inf_fu_20");
    sc_trace(mVcdFile, inf_1_fu_112_p2, "inf_1_fu_112_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, sup_fu_24, "sup_fu_24");
    sc_trace(mVcdFile, sup_1_fu_126_p2, "sup_1_fu_126_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, tmp_s_fu_136_p2, "tmp_s_fu_136_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

partition::~partition() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void partition::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_77_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_reg_177.read(), ap_const_lv1_0))) {
        inf_fu_20 = inf_1_fu_112_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        inf_fu_20 = init.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(grp_fu_77_p2.read(), ap_const_lv1_1))) {
        sup_fu_24 = sup_1_fu_126_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sup_fu_24 = end_r.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        a_addr_2_reg_195 =  (sc_lv<4>) (sup_fu_24.read());
        sup_load_reg_189 = sup_fu_24.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_77_p2.read()) && esl_seteq<1,1,1>(tmp_1_fu_141_p2.read(), ap_const_lv1_1))) {
        a_addr_3_reg_206 =  (sc_lv<4>) (inf_load_reg_170.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        a_addr_reg_160 =  (sc_lv<4>) (init.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        inf_load_reg_170 = inf_fu_20.read();
        tmp_reg_177 = tmp_fu_107_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        reg_82 = a_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        reg_88 = a_q0.read();
    }
}

void partition::thread_a_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        a_address0 = a_addr_2_reg_195.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        a_address0 = a_addr_3_reg_206.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_77_p2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_141_p2.read())))) {
        a_address0 = a_addr_reg_160.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_77_p2.read()) && 
                esl_seteq<1,1,1>(tmp_1_fu_141_p2.read(), ap_const_lv1_1))) {
        a_address0 =  (sc_lv<4>) (inf_load_reg_170.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        a_address0 =  (sc_lv<4>) (sup_fu_24.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        a_address0 =  (sc_lv<4>) (inf_fu_20.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        a_address0 =  (sc_lv<4>) (init.read());
    } else {
        a_address0 = "XXXX";
    }
}

void partition::thread_a_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_77_p2.read()) && 
          esl_seteq<1,1,1>(tmp_1_fu_141_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_77_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_141_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void partition::thread_a_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        a_d0 = reg_82.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        a_d0 = reg_88.read();
    } else {
        a_d0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void partition::thread_a_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        a_we0 = ap_const_logic_1;
    } else {
        a_we0 = ap_const_logic_0;
    }
}

void partition::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void partition::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void partition::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void partition::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void partition::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void partition::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void partition::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void partition::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void partition::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void partition::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void partition::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void partition::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void partition::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void partition::thread_ap_return() {
    ap_return = sup_load_reg_189.read();
}

void partition::thread_grp_fu_77_p2() {
    grp_fu_77_p2 = (!a_q0.read().is_01() || !reg_82.read().is_01())? sc_lv<1>(): (sc_bigint<64>(a_q0.read()) > sc_bigint<64>(reg_82.read()));
}

void partition::thread_inf_1_fu_112_p2() {
    inf_1_fu_112_p2 = (!inf_load_reg_170.read().is_01() || !ap_const_lv64_1.is_01())? sc_lv<64>(): (sc_biguint<64>(inf_load_reg_170.read()) + sc_biguint<64>(ap_const_lv64_1));
}

void partition::thread_sup_1_fu_126_p2() {
    sup_1_fu_126_p2 = (!sup_load_reg_189.read().is_01() || !ap_const_lv64_FFFFFFFFFFFFFFFF.is_01())? sc_lv<64>(): (sc_biguint<64>(sup_load_reg_189.read()) + sc_bigint<64>(ap_const_lv64_FFFFFFFFFFFFFFFF));
}

void partition::thread_tmp_1_fu_141_p2() {
    tmp_1_fu_141_p2 = (!inf_load_reg_170.read().is_01() || !tmp_s_fu_136_p2.read().is_01())? sc_lv<1>(): (sc_bigint<64>(inf_load_reg_170.read()) < sc_bigint<64>(tmp_s_fu_136_p2.read()));
}

void partition::thread_tmp_fu_107_p2() {
    tmp_fu_107_p2 = (!inf_fu_20.read().is_01() || !end_r.read().is_01())? sc_lv<1>(): (sc_bigint<64>(inf_fu_20.read()) > sc_bigint<64>(end_r.read()));
}

void partition::thread_tmp_s_fu_136_p2() {
    tmp_s_fu_136_p2 = (!sup_load_reg_189.read().is_01() || !ap_const_lv64_1.is_01())? sc_lv<64>(): (sc_biguint<64>(sup_load_reg_189.read()) + sc_biguint<64>(ap_const_lv64_1));
}

void partition::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && (esl_seteq<1,1,1>(grp_fu_77_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_reg_177.read(), ap_const_lv1_1)))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_77_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_141_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_77_p2.read()) && esl_seteq<1,1,1>(tmp_1_fu_141_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<11>) ("XXXXXXXXXXX");
            break;
    }
}

}

