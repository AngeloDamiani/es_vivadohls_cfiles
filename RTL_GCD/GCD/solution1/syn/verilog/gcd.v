// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gcd,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.342667,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=550,HLS_SYN_LUT=1263}" *)

module gcd (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m,
        n,
        ap_return
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] m;
input  [31:0] n;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] m_to_int_fu_112_p1;
reg   [31:0] m_to_int_reg_337;
wire   [0:0] tmp_2_fu_142_p2;
reg   [0:0] tmp_2_reg_342;
wire   [0:0] grp_fu_97_p2;
reg   [0:0] tmp_3_reg_348;
wire   [31:0] n_to_int_fu_148_p1;
reg   [31:0] n_to_int_reg_353;
wire   [0:0] tmp_7_fu_178_p2;
reg   [0:0] tmp_7_reg_358;
wire   [0:0] grp_fu_103_p2;
reg   [0:0] tmp_8_reg_364;
reg   [0:0] tmp_s_reg_372;
wire    ap_CS_fsm_state2;
wire   [0:0] or_cond_fu_192_p2;
reg   [0:0] tmp_11_reg_377;
wire   [31:0] m_assign_1_fu_211_p3;
wire    ap_CS_fsm_state3;
wire   [31:0] n_assign_1_fu_231_p3;
reg   [0:0] tmp_16_reg_392;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_15_fu_268_p2;
reg   [0:0] tmp_15_reg_397;
wire    ap_CS_fsm_state5;
reg   [0:0] tmp_22_reg_405;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_91_p2;
wire    ap_CS_fsm_state11;
reg   [31:0] m_assign_3_reg_46;
reg   [31:0] r_reg_67;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_23_fu_320_p2;
reg   [31:0] result_reg_56;
wire   [0:0] tmp_17_fu_274_p2;
reg   [31:0] p_0_reg_79;
reg   [31:0] grp_fu_97_p0;
reg   [31:0] grp_fu_97_p1;
wire   [7:0] tmp_fu_116_p4;
wire   [22:0] tmp_1_fu_126_p1;
wire   [0:0] notrhs_fu_136_p2;
wire   [0:0] notlhs_fu_130_p2;
wire   [7:0] tmp_5_fu_152_p4;
wire   [22:0] tmp_6_fu_162_p1;
wire   [0:0] notrhs9_fu_172_p2;
wire   [0:0] notlhs8_fu_166_p2;
wire   [0:0] tmp_4_fu_184_p2;
wire   [0:0] tmp_9_fu_188_p2;
wire   [31:0] m_assign_neg_fu_202_p2;
wire   [0:0] tmp_10_fu_198_p2;
wire   [31:0] m_assign_fu_207_p1;
wire   [31:0] n_assign_neg_fu_222_p2;
wire   [0:0] tmp_12_fu_218_p2;
wire   [31:0] n_assign_fu_227_p1;
wire   [31:0] m_assign_2_to_int_fu_238_p1;
wire   [7:0] tmp_13_fu_242_p4;
wire   [22:0] tmp_14_fu_252_p1;
wire   [0:0] notrhs3_fu_262_p2;
wire   [0:0] notlhs3_fu_256_p2;
wire   [31:0] n_assign_2_to_int_fu_279_p1;
wire   [7:0] tmp_18_fu_283_p4;
wire   [22:0] tmp_19_fu_293_p1;
wire   [0:0] notrhs4_fu_303_p2;
wire   [0:0] notlhs4_fu_297_p2;
wire   [0:0] tmp_20_fu_309_p2;
wire   [0:0] tmp_21_fu_315_p2;
reg   [4:0] grp_fu_97_opcode;
reg   [4:0] grp_fu_103_opcode;
wire    ap_CS_fsm_state12;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

gcd_fsub_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
gcd_fsub_32ns_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(r_reg_67),
    .din1(m_assign_3_reg_46),
    .ce(1'b1),
    .dout(grp_fu_91_p2)
);

gcd_fcmp_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
gcd_fcmp_32ns_32ncud_U2(
    .din0(grp_fu_97_p0),
    .din1(grp_fu_97_p1),
    .opcode(grp_fu_97_opcode),
    .dout(grp_fu_97_p2)
);

gcd_fcmp_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
gcd_fcmp_32ns_32ncud_U3(
    .din0(n),
    .din1(32'd0),
    .opcode(grp_fu_103_opcode),
    .dout(grp_fu_103_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_23_fu_320_p2))) begin
        m_assign_3_reg_46 <= r_reg_67;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        m_assign_3_reg_46 <= n_assign_1_fu_231_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_17_fu_274_p2 == 1'd1))) begin
        p_0_reg_79 <= result_reg_56;
    end else if (((1'b1 == ap_CS_fsm_state2) & (or_cond_fu_192_p2 == 1'd1))) begin
        p_0_reg_79 <= 32'd3212836864;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_reg_67 <= grp_fu_91_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == tmp_17_fu_274_p2))) begin
        r_reg_67 <= result_reg_56;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_23_fu_320_p2))) begin
        result_reg_56 <= m_assign_3_reg_46;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        result_reg_56 <= m_assign_1_fu_211_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_to_int_reg_337 <= m_to_int_fu_112_p1;
        n_to_int_reg_353 <= n_to_int_fu_148_p1;
        tmp_2_reg_342 <= tmp_2_fu_142_p2;
        tmp_3_reg_348 <= grp_fu_97_p2;
        tmp_7_reg_358 <= tmp_7_fu_178_p2;
        tmp_8_reg_364 <= grp_fu_103_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (or_cond_fu_192_p2 == 1'd0))) begin
        tmp_11_reg_377 <= grp_fu_103_p2;
        tmp_s_reg_372 <= grp_fu_97_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_15_reg_397 <= tmp_15_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_16_reg_392 <= grp_fu_97_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_22_reg_405 <= grp_fu_97_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (or_cond_fu_192_p2 == 1'd0))) begin
        grp_fu_103_opcode = 5'd4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_fu_103_opcode = 5'd1;
    end else begin
        grp_fu_103_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_97_opcode = 5'd3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (or_cond_fu_192_p2 == 1'd0))) begin
        grp_fu_97_opcode = 5'd4;
    end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_97_opcode = 5'd1;
    end else begin
        grp_fu_97_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_97_p0 = r_reg_67;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_97_p0 = m_assign_3_reg_46;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_97_p0 = m;
    end else begin
        grp_fu_97_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_97_p1 = m_assign_3_reg_46;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_97_p1 = 32'd0;
    end else begin
        grp_fu_97_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (or_cond_fu_192_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_17_fu_274_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_23_fu_320_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return = p_0_reg_79;

assign m_assign_1_fu_211_p3 = ((tmp_10_fu_198_p2[0:0] === 1'b1) ? m_assign_fu_207_p1 : m);

assign m_assign_2_to_int_fu_238_p1 = m_assign_3_reg_46;

assign m_assign_fu_207_p1 = m_assign_neg_fu_202_p2;

assign m_assign_neg_fu_202_p2 = (m_to_int_reg_337 ^ 32'd2147483648);

assign m_to_int_fu_112_p1 = m;

assign n_assign_1_fu_231_p3 = ((tmp_12_fu_218_p2[0:0] === 1'b1) ? n_assign_fu_227_p1 : n);

assign n_assign_2_to_int_fu_279_p1 = r_reg_67;

assign n_assign_fu_227_p1 = n_assign_neg_fu_222_p2;

assign n_assign_neg_fu_222_p2 = (n_to_int_reg_353 ^ 32'd2147483648);

assign n_to_int_fu_148_p1 = n;

assign notlhs3_fu_256_p2 = ((tmp_13_fu_242_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs4_fu_297_p2 = ((tmp_18_fu_283_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs8_fu_166_p2 = ((tmp_5_fu_152_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_130_p2 = ((tmp_fu_116_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs3_fu_262_p2 = ((tmp_14_fu_252_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs4_fu_303_p2 = ((tmp_19_fu_293_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs9_fu_172_p2 = ((tmp_6_fu_162_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_136_p2 = ((tmp_1_fu_126_p1 == 23'd0) ? 1'b1 : 1'b0);

assign or_cond_fu_192_p2 = (tmp_4_fu_184_p2 & tmp_9_fu_188_p2);

assign tmp_10_fu_198_p2 = (tmp_2_reg_342 & tmp_s_reg_372);

assign tmp_12_fu_218_p2 = (tmp_7_reg_358 & tmp_11_reg_377);

assign tmp_13_fu_242_p4 = {{m_assign_2_to_int_fu_238_p1[30:23]}};

assign tmp_14_fu_252_p1 = m_assign_2_to_int_fu_238_p1[22:0];

assign tmp_15_fu_268_p2 = (notrhs3_fu_262_p2 | notlhs3_fu_256_p2);

assign tmp_17_fu_274_p2 = (tmp_15_fu_268_p2 & tmp_16_reg_392);

assign tmp_18_fu_283_p4 = {{n_assign_2_to_int_fu_279_p1[30:23]}};

assign tmp_19_fu_293_p1 = n_assign_2_to_int_fu_279_p1[22:0];

assign tmp_1_fu_126_p1 = m_to_int_fu_112_p1[22:0];

assign tmp_20_fu_309_p2 = (notrhs4_fu_303_p2 | notlhs4_fu_297_p2);

assign tmp_21_fu_315_p2 = (tmp_20_fu_309_p2 & tmp_15_reg_397);

assign tmp_23_fu_320_p2 = (tmp_21_fu_315_p2 & tmp_22_reg_405);

assign tmp_2_fu_142_p2 = (notrhs_fu_136_p2 | notlhs_fu_130_p2);

assign tmp_4_fu_184_p2 = (tmp_2_reg_342 & tmp_3_reg_348);

assign tmp_5_fu_152_p4 = {{n_to_int_fu_148_p1[30:23]}};

assign tmp_6_fu_162_p1 = n_to_int_fu_148_p1[22:0];

assign tmp_7_fu_178_p2 = (notrhs9_fu_172_p2 | notlhs8_fu_166_p2);

assign tmp_9_fu_188_p2 = (tmp_7_reg_358 & tmp_8_reg_364);

assign tmp_fu_116_p4 = {{m_to_int_fu_112_p1[30:23]}};

endmodule //gcd
