// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mergesort,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.590000,HLS_SYN_LAT=405,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1869,HLS_SYN_LUT=1041}" *)

module mergesort (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_address0,
        arr_ce0,
        arr_q0,
        arr_address1,
        arr_ce1,
        arr_we1,
        arr_d1,
        arr_q1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] arr_address0;
output   arr_ce0;
input  [63:0] arr_q0;
output  [3:0] arr_address1;
output   arr_ce1;
output   arr_we1;
output  [63:0] arr_d1;
input  [63:0] arr_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] m_1_fu_90_p2;
reg   [63:0] m_1_reg_143;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_84_p2;
wire   [7:0] tmp_5_fu_102_p1;
reg   [7:0] tmp_5_reg_153;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_3_fu_96_p2;
wire   [63:0] tmp_6_fu_112_p2;
reg   [63:0] tmp_6_reg_158;
wire   [63:0] c_assign_fu_118_p2;
reg   [63:0] c_assign_reg_163;
wire   [63:0] x_1_fu_123_p2;
reg   [63:0] x_1_reg_169;
wire   [63:0] c_assign_1_fu_133_p3;
reg   [63:0] c_assign_1_reg_174;
wire    ap_CS_fsm_state4;
wire    grp_merge_fu_73_ap_start;
wire    grp_merge_fu_73_ap_done;
wire    grp_merge_fu_73_ap_idle;
wire    grp_merge_fu_73_ap_ready;
wire   [3:0] grp_merge_fu_73_arr_address0;
wire    grp_merge_fu_73_arr_ce0;
wire   [3:0] grp_merge_fu_73_arr_address1;
wire    grp_merge_fu_73_arr_ce1;
wire    grp_merge_fu_73_arr_we1;
wire   [63:0] grp_merge_fu_73_arr_d1;
reg   [63:0] m_reg_50;
reg   [63:0] x_reg_62;
wire    ap_CS_fsm_state6;
reg    ap_reg_grp_merge_fu_73_ap_start;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp1_fu_106_p2;
wire   [0:0] tmp_i_fu_128_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_reg_grp_merge_fu_73_ap_start = 1'b0;
end

merge grp_merge_fu_73(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_merge_fu_73_ap_start),
    .ap_done(grp_merge_fu_73_ap_done),
    .ap_idle(grp_merge_fu_73_ap_idle),
    .ap_ready(grp_merge_fu_73_ap_ready),
    .i1(tmp_5_reg_153),
    .f1(tmp_6_reg_158),
    .f2(c_assign_1_reg_174),
    .arr_address0(grp_merge_fu_73_arr_address0),
    .arr_ce0(grp_merge_fu_73_arr_ce0),
    .arr_q0(arr_q0),
    .arr_address1(grp_merge_fu_73_arr_address1),
    .arr_ce1(grp_merge_fu_73_arr_ce1),
    .arr_we1(grp_merge_fu_73_arr_we1),
    .arr_d1(grp_merge_fu_73_arr_d1),
    .arr_q1(arr_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_merge_fu_73_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_reg_grp_merge_fu_73_ap_start <= 1'b1;
        end else if ((1'b1 == grp_merge_fu_73_ap_ready)) begin
            ap_reg_grp_merge_fu_73_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_3_fu_96_p2 == 1'd0))) begin
        m_reg_50 <= m_1_reg_143;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_reg_50 <= 64'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_merge_fu_73_ap_done == 1'b1))) begin
        x_reg_62 <= x_1_reg_169;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_84_p2 == 1'd1))) begin
        x_reg_62 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_assign_1_reg_174 <= c_assign_1_fu_133_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_3_fu_96_p2))) begin
        c_assign_reg_163 <= c_assign_fu_118_p2;
        tmp_5_reg_153 <= tmp_5_fu_102_p1;
        tmp_6_reg_158 <= tmp_6_fu_112_p2;
        x_1_reg_169 <= x_1_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_84_p2 == 1'd1))) begin
        m_1_reg_143[63 : 1] <= m_1_fu_90_p2[63 : 1];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_84_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_84_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_84_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_3_fu_96_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_merge_fu_73_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign arr_address0 = grp_merge_fu_73_arr_address0;

assign arr_address1 = grp_merge_fu_73_arr_address1;

assign arr_ce0 = grp_merge_fu_73_arr_ce0;

assign arr_ce1 = grp_merge_fu_73_arr_ce1;

assign arr_d1 = grp_merge_fu_73_arr_d1;

assign arr_we1 = grp_merge_fu_73_arr_we1;

assign c_assign_1_fu_133_p3 = ((tmp_i_fu_128_p2[0:0] === 1'b1) ? c_assign_reg_163 : 64'd9);

assign c_assign_fu_118_p2 = (tmp1_fu_106_p2 + m_1_reg_143);

assign grp_merge_fu_73_ap_start = ap_reg_grp_merge_fu_73_ap_start;

assign m_1_fu_90_p2 = m_reg_50 << 64'd1;

assign tmp1_fu_106_p2 = ($signed(64'd18446744073709551615) + $signed(x_reg_62));

assign tmp_3_fu_96_p2 = (($signed(x_reg_62) < $signed(64'd9)) ? 1'b1 : 1'b0);

assign tmp_5_fu_102_p1 = x_reg_62[7:0];

assign tmp_6_fu_112_p2 = (tmp1_fu_106_p2 + m_reg_50);

assign tmp_fu_84_p2 = (($signed(m_reg_50) < $signed(64'd10)) ? 1'b1 : 1'b0);

assign tmp_i_fu_128_p2 = (($signed(c_assign_reg_163) < $signed(64'd9)) ? 1'b1 : 1'b0);

assign x_1_fu_123_p2 = (m_1_reg_143 + x_reg_62);

always @ (posedge ap_clk) begin
    m_1_reg_143[0] <= 1'b0;
end

endmodule //mergesort
