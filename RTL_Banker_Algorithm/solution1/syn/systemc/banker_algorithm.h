// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _banker_algorithm_HH_
#define _banker_algorithm_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct banker_algorithm : public sc_module {
    // Port declarations 30
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<2> > available_address0;
    sc_out< sc_logic > available_ce0;
    sc_out< sc_logic > available_we0;
    sc_out< sc_lv<64> > available_d0;
    sc_in< sc_lv<64> > available_q0;
    sc_out< sc_lv<4> > allocated_address0;
    sc_out< sc_logic > allocated_ce0;
    sc_out< sc_logic > allocated_we0;
    sc_out< sc_lv<64> > allocated_d0;
    sc_in< sc_lv<64> > allocated_q0;
    sc_out< sc_lv<4> > max_address0;
    sc_out< sc_logic > max_ce0;
    sc_out< sc_logic > max_we0;
    sc_out< sc_lv<64> > max_d0;
    sc_in< sc_lv<64> > max_q0;
    sc_out< sc_lv<4> > max_address1;
    sc_out< sc_logic > max_ce1;
    sc_out< sc_logic > max_we1;
    sc_out< sc_lv<64> > max_d1;
    sc_in< sc_lv<64> > max_q1;
    sc_out< sc_lv<4> > need_address0;
    sc_out< sc_logic > need_ce0;
    sc_in< sc_lv<64> > need_q0;
    sc_out< sc_lv<64> > ap_return;


    // Module declarations
    banker_algorithm(sc_module_name name);
    SC_HAS_PROCESS(banker_algorithm);

    ~banker_algorithm();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > tmp_7_fu_124_p2;
    sc_signal< sc_lv<5> > tmp_7_reg_201;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<3> > i_1_fu_138_p2;
    sc_signal< sc_lv<3> > i_1_reg_209;
    sc_signal< sc_lv<4> > allocated_addr_reg_214;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<2> > j_1_fu_170_p2;
    sc_signal< sc_lv<2> > j_1_reg_227;
    sc_signal< sc_lv<2> > available_addr_reg_232;
    sc_signal< sc_lv<1> > tmp_1_fu_164_p2;
    sc_signal< sc_lv<64> > need_load_reg_237;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > available_load_reg_244;
    sc_signal< sc_lv<64> > tmp_6_fu_192_p2;
    sc_signal< sc_lv<64> > tmp_6_reg_253;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > tmp_4_fu_187_p2;
    sc_signal< sc_lv<3> > i_reg_77;
    sc_signal< sc_lv<2> > j_reg_88;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > tmp_fu_130_p3;
    sc_signal< sc_lv<2> > p_0_reg_99;
    sc_signal< sc_lv<64> > tmp_8_cast_fu_158_p1;
    sc_signal< sc_lv<64> > j_cast1_fu_144_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_176_p2;
    sc_signal< sc_lv<5> > tmp_5_fu_116_p3;
    sc_signal< sc_lv<5> > i_cast2_cast_fu_112_p1;
    sc_signal< sc_lv<5> > j_cast1_cast_fu_149_p1;
    sc_signal< sc_lv<5> > tmp_8_fu_153_p2;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_allocated_address0();
    void thread_allocated_ce0();
    void thread_allocated_d0();
    void thread_allocated_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_available_address0();
    void thread_available_ce0();
    void thread_available_d0();
    void thread_available_we0();
    void thread_i_1_fu_138_p2();
    void thread_i_cast2_cast_fu_112_p1();
    void thread_j_1_fu_170_p2();
    void thread_j_cast1_cast_fu_149_p1();
    void thread_j_cast1_fu_144_p1();
    void thread_max_address0();
    void thread_max_address1();
    void thread_max_ce0();
    void thread_max_ce1();
    void thread_max_d0();
    void thread_max_d1();
    void thread_max_we0();
    void thread_max_we1();
    void thread_need_address0();
    void thread_need_ce0();
    void thread_tmp_1_fu_164_p2();
    void thread_tmp_2_fu_176_p2();
    void thread_tmp_4_fu_187_p2();
    void thread_tmp_5_fu_116_p3();
    void thread_tmp_6_fu_192_p2();
    void thread_tmp_7_fu_124_p2();
    void thread_tmp_8_cast_fu_158_p1();
    void thread_tmp_8_fu_153_p2();
    void thread_tmp_fu_130_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
