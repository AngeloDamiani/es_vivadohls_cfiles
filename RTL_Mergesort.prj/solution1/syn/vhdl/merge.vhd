-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity merge is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i1 : IN STD_LOGIC_VECTOR (7 downto 0);
    f1 : IN STD_LOGIC_VECTOR (63 downto 0);
    f2 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    arr_ce0 : OUT STD_LOGIC;
    arr_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    arr_ce1 : OUT STD_LOGIC;
    arr_we1 : OUT STD_LOGIC;
    arr_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of merge is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_0_load_reg_451 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i2_1_load_reg_457 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_463 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_281_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_467 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_12_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_reg_496 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_359_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_509 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_6_fu_365_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_5_fu_376_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_18_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_524 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_7_fu_396_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_7_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_407_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_reg_542 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_ce0 : STD_LOGIC;
    signal x_we0 : STD_LOGIC;
    signal x_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_173 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_10_reg_185 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_reg_194 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_205 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_reg_214 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_reg_225 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_4_reg_234 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_fu_54 : STD_LOGIC_VECTOR (7 downto 0);
    signal i1_assign_fu_303_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i2_1_fu_58 : STD_LOGIC_VECTOR (7 downto 0);
    signal i2_fu_249_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i2_2_fu_318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_245_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component merge_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    x_U : component merge_x
    generic map (
        DataWidth => 64,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_address0,
        ce0 => x_ce0,
        we0 => x_we0,
        d0 => x_d0,
        q0 => x_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i2_1_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_7_fu_297_p2))) then 
                i2_1_fu_58 <= i2_2_fu_318_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i2_1_fu_58 <= i2_fu_249_p2;
            end if; 
        end if;
    end process;

    i_2_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_276_p2 = ap_const_lv1_0) and (tmp_3_fu_292_p2 = ap_const_lv1_1))) then 
                i_2_reg_194 <= i_reg_173;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_2_reg_194 <= i_6_fu_365_p2;
            end if; 
        end if;
    end process;

    i_3_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_276_p2 = ap_const_lv1_1))) then 
                i_3_reg_214 <= i_reg_173;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_3_reg_214 <= i_5_fu_376_p2;
            end if; 
        end if;
    end process;

    i_4_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_4_reg_234 <= i_7_reg_532;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (((tmp_1_reg_463 = ap_const_lv1_0) and (tmp_12_fu_338_p2 = ap_const_lv1_1)) or ((tmp_1_reg_463 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_6_fu_354_p2))))) then 
                i_4_reg_234 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_173 <= i_1_reg_467;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_173 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_0_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_7_fu_297_p2))) then 
                p_0_fu_54 <= i1_assign_fu_303_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_fu_54 <= i1;
            end if; 
        end if;
    end process;

    tmp_10_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_276_p2 = ap_const_lv1_0) and (tmp_3_fu_292_p2 = ap_const_lv1_1))) then 
                tmp_10_reg_185 <= p_0_fu_54;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                tmp_10_reg_185 <= tmp_16_reg_496;
            end if; 
        end if;
    end process;

    tmp_17_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                tmp_17_reg_225 <= tmp_21_reg_542;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (((tmp_1_reg_463 = ap_const_lv1_0) and (tmp_12_fu_338_p2 = ap_const_lv1_1)) or ((tmp_1_reg_463 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_6_fu_354_p2))))) then 
                tmp_17_reg_225 <= i1;
            end if; 
        end if;
    end process;

    tmp_4_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_276_p2 = ap_const_lv1_1))) then 
                tmp_4_reg_205 <= i2_1_fu_58;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                tmp_4_reg_205 <= tmp_9_reg_509;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i2_1_load_reg_457 <= i2_1_fu_58;
                i_1_reg_467 <= i_1_fu_281_p2;
                p_0_load_reg_451 <= p_0_fu_54;
                tmp_1_reg_463 <= tmp_1_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_7_reg_532 <= i_7_fu_396_p2;
                tmp_18_reg_524 <= tmp_18_fu_387_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_1_reg_463 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_12_fu_338_p2))) then
                tmp_16_reg_496 <= tmp_16_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_19_fu_391_p2))) then
                tmp_21_reg_542 <= tmp_21_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_1_reg_463 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_6_fu_354_p2))) then
                tmp_9_reg_509 <= tmp_9_fu_359_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_1_fu_276_p2, tmp_1_reg_463, tmp_3_fu_292_p2, ap_CS_fsm_state4, tmp_12_fu_338_p2, tmp_6_fu_354_p2, ap_CS_fsm_state7, tmp_19_fu_391_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_3_fu_292_p2 = ap_const_lv1_1) or (tmp_1_fu_276_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (((tmp_1_reg_463 = ap_const_lv1_0) and (tmp_12_fu_338_p2 = ap_const_lv1_1)) or ((tmp_1_reg_463 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_6_fu_354_p2))))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_1_reg_463 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_6_fu_354_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_19_fu_391_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, tmp_19_fu_391_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_19_fu_391_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, tmp_19_fu_391_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_19_fu_391_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    arr_address0_assign_proc : process(ap_CS_fsm_state2, tmp_1_reg_463, ap_CS_fsm_state4, tmp_12_fu_338_p2, tmp_6_fu_354_p2, tmp_s_fu_271_p1, tmp_11_fu_333_p1, tmp_5_fu_349_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_1_reg_463 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_6_fu_354_p2))) then 
            arr_address0 <= tmp_5_fu_349_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_1_reg_463 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_12_fu_338_p2))) then 
            arr_address0 <= tmp_11_fu_333_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            arr_address0 <= tmp_s_fu_271_p1(4 - 1 downto 0);
        else 
            arr_address0 <= "XXXX";
        end if; 
    end process;


    arr_address1_assign_proc : process(ap_CS_fsm_state2, tmp_18_reg_524, ap_CS_fsm_state8, tmp_2_fu_287_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr_address1 <= tmp_18_reg_524(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            arr_address1 <= tmp_2_fu_287_p1(4 - 1 downto 0);
        else 
            arr_address1 <= "XXXX";
        end if; 
    end process;


    arr_ce0_assign_proc : process(ap_CS_fsm_state2, tmp_1_reg_463, ap_CS_fsm_state4, tmp_12_fu_338_p2, tmp_6_fu_354_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_1_reg_463 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_12_fu_338_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_1_reg_463 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_6_fu_354_p2)))) then 
            arr_ce0 <= ap_const_logic_1;
        else 
            arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            arr_ce1 <= ap_const_logic_1;
        else 
            arr_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    arr_d1 <= x_q0;

    arr_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            arr_we1 <= ap_const_logic_1;
        else 
            arr_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i1_assign_fu_303_p2 <= std_logic_vector(unsigned(p_0_load_reg_451) + unsigned(ap_const_lv8_1));
    i2_2_fu_318_p2 <= std_logic_vector(unsigned(i2_1_load_reg_457) + unsigned(ap_const_lv8_1));
    i2_fu_249_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(tmp_fu_245_p1));
    i_1_fu_281_p2 <= std_logic_vector(unsigned(i_reg_173) + unsigned(ap_const_lv8_1));
    i_5_fu_376_p2 <= std_logic_vector(unsigned(i_3_reg_214) + unsigned(ap_const_lv8_1));
    i_6_fu_365_p2 <= std_logic_vector(unsigned(i_2_reg_194) + unsigned(ap_const_lv8_1));
    i_7_fu_396_p2 <= std_logic_vector(unsigned(i_4_reg_234) + unsigned(ap_const_lv8_1));
        tmp_11_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_reg_185),64));

    tmp_12_fu_338_p2 <= "1" when (signed(tmp_11_fu_333_p1) > signed(f1)) else "0";
        tmp_13_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_reg_173),64));

        tmp_14_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_reg_173),64));

        tmp_15_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_2_reg_194),64));

    tmp_16_fu_343_p2 <= std_logic_vector(unsigned(tmp_10_reg_185) + unsigned(ap_const_lv8_1));
        tmp_18_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_reg_225),64));

    tmp_19_fu_391_p2 <= "1" when (signed(tmp_18_fu_387_p1) > signed(f2)) else "0";
    tmp_1_fu_276_p2 <= "1" when (signed(tmp_s_fu_271_p1) > signed(f1)) else "0";
        tmp_20_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_4_reg_234),64));

    tmp_21_fu_407_p2 <= std_logic_vector(unsigned(tmp_17_reg_225) + unsigned(ap_const_lv8_1));
        tmp_2_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i2_1_fu_58),64));

    tmp_3_fu_292_p2 <= "1" when (signed(tmp_2_fu_287_p1) > signed(f2)) else "0";
        tmp_5_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_205),64));

    tmp_6_fu_354_p2 <= "1" when (signed(tmp_5_fu_349_p1) > signed(f2)) else "0";
    tmp_7_fu_297_p2 <= "1" when (signed(arr_q0) > signed(arr_q1)) else "0";
        tmp_8_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_3_reg_214),64));

    tmp_9_fu_359_p2 <= std_logic_vector(unsigned(tmp_4_reg_205) + unsigned(ap_const_lv8_1));
    tmp_fu_245_p1 <= f1(8 - 1 downto 0);
        tmp_s_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_0_fu_54),64));


    x_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state3, tmp_14_fu_308_p1, tmp_7_fu_297_p2, tmp_13_fu_323_p1, tmp_15_fu_371_p1, tmp_8_fu_382_p1, tmp_20_fu_402_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x_address0 <= tmp_20_fu_402_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x_address0 <= tmp_8_fu_382_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x_address0 <= tmp_15_fu_371_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_7_fu_297_p2))) then 
            x_address0 <= tmp_13_fu_323_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_7_fu_297_p2))) then 
            x_address0 <= tmp_14_fu_308_p1(4 - 1 downto 0);
        else 
            x_address0 <= "XXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state3, tmp_7_fu_297_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_7_fu_297_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_7_fu_297_p2)))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_d0_assign_proc : process(arr_q0, arr_q1, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, tmp_7_fu_297_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_7_fu_297_p2))) then 
            x_d0 <= arr_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_7_fu_297_p2)))) then 
            x_d0 <= arr_q0;
        else 
            x_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, tmp_7_fu_297_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_7_fu_297_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_7_fu_297_p2)))) then 
            x_we0 <= ap_const_logic_1;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
