

================================================================
== Vivado HLS Report for 'quicksort'
================================================================
* Date:           Thu Mar  1 12:20:59 2018

* Version:        2017.2 (Build 1909853 on Thu Jun 15 18:55:24 MDT 2017)
* Project:        RTL_Quicksort.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      7.53|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+--------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  |  Trip  |          |
        | Loop Name| min | max |  Latency |  achieved |   target  |  Count | Pipelined|
        +----------+-----+-----+----------+-----------+-----------+--------+----------+
        |- QWHILE  |    ?|    ?|         ?|          -|          -| 0 ~ 10 |    no    |
        +----------+-----+-----+----------+-----------+-----------+--------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 4
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!tmp)
3 --> 
	4  / true
4 --> 
	2  / true
* FSM state operations: 

 <State 1>: 2.32ns
ST_1: stack_size (4)  [1/1] 0.00ns
:0  %stack_size = alloca i64

ST_1: StgValue_6 (5)  [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap(i64 %i) nounwind, !map !11

ST_1: StgValue_7 (6)  [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap(i64 %f) nounwind, !map !17

ST_1: StgValue_8 (7)  [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap([10 x i64]* %a) nounwind, !map !21

ST_1: StgValue_9 (8)  [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecTopModule([10 x i8]* @quicksort_str) nounwind

ST_1: f_read (9)  [1/1] 0.00ns
:5  %f_read = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %f) nounwind

ST_1: i_read (10)  [1/1] 0.00ns
:6  %i_read = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %i) nounwind

ST_1: stack_0 (11)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:41
:7  %stack_0 = alloca [10 x i64], align 16

ST_1: stack_1 (12)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:41
:8  %stack_1 = alloca [10 x i64], align 16

ST_1: top (13)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:45
:9  %top = getelementptr [10 x i64]* %stack_0, i64 0, i64 0

ST_1: StgValue_15 (14)  [1/1] 2.32ns  loc: RTL_Quicksort.prj/quicksort.c:50
:10  store i64 %i_read, i64* %top, align 16

ST_1: stack_1_addr (15)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:51
:11  %stack_1_addr = getelementptr [10 x i64]* %stack_1, i64 0, i64 0

ST_1: StgValue_17 (16)  [1/1] 2.32ns  loc: RTL_Quicksort.prj/quicksort.c:51
:12  store i64 %f_read, i64* %stack_1_addr, align 16

ST_1: StgValue_18 (17)  [1/1] 1.77ns
:13  store i64 0, i64* %stack_size

ST_1: StgValue_19 (18)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:53
:14  br label %1


 <State 2>: 2.32ns
ST_2: stack_size_load (20)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:63
:0  %stack_size_load = load i64* %stack_size

ST_2: stack_0_addr (21)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:73
:1  %stack_0_addr = getelementptr [10 x i64]* %stack_0, i64 0, i64 %stack_size_load

ST_2: tmp (22)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:53
:2  %tmp = call i1 @_ssdm_op_BitSelect.i1.i64.i32(i64 %stack_size_load, i32 63)

ST_2: StgValue_23 (23)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:53
:3  br i1 %tmp, label %6, label %2

ST_2: base (28)  [2/2] 2.32ns  loc: RTL_Quicksort.prj/quicksort.c:55
:3  %base = load i64* %stack_0_addr, align 16

ST_2: stack_1_addr_1 (29)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:55
:4  %stack_1_addr_1 = getelementptr [10 x i64]* %stack_1, i64 0, i64 %stack_size_load

ST_2: stack_1_load (30)  [2/2] 2.32ns  loc: RTL_Quicksort.prj/quicksort.c:55
:5  %stack_1_load = load i64* %stack_1_addr_1, align 8

ST_2: StgValue_27 (53)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:75
:0  ret void


 <State 3>: 6.12ns
ST_3: StgValue_28 (25)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:54
:0  call void (...)* @_ssdm_op_SpecLoopName([7 x i8]* @p_str1) nounwind

ST_3: tmp_2 (26)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:54
:1  %tmp_2 = call i32 (...)* @_ssdm_op_SpecRegionBegin([7 x i8]* @p_str1) nounwind

ST_3: StgValue_30 (27)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:55
:2  call void (...)* @_ssdm_op_SpecLoopTripCount(i32 0, i32 10, i32 5, [1 x i8]* @p_str2) nounwind

ST_3: base (28)  [1/2] 2.32ns  loc: RTL_Quicksort.prj/quicksort.c:55
:3  %base = load i64* %stack_0_addr, align 16

ST_3: stack_1_load (30)  [1/2] 2.32ns  loc: RTL_Quicksort.prj/quicksort.c:55
:5  %stack_1_load = load i64* %stack_1_addr_1, align 8

ST_3: tmp_1 (31)  [1/1] 3.73ns  loc: RTL_Quicksort.prj/quicksort.c:55
:6  %tmp_1 = icmp slt i64 %base, %stack_1_load

ST_3: StgValue_34 (32)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:55
:7  br i1 %tmp_1, label %3, label %4

ST_3: stack_size_2 (34)  [1/1] 3.79ns  loc: RTL_Quicksort.prj/quicksort.c:69
:0  %stack_size_2 = add nsw i64 %stack_size_load, -1

ST_3: StgValue_36 (35)  [1/1] 1.77ns  loc: RTL_Quicksort.prj/quicksort.c:69
:1  store i64 %stack_size_2, i64* %stack_size

ST_3: StgValue_37 (36)  [1/1] 0.00ns
:2  br label %5

ST_3: pivot_position (38)  [2/2] 1.59ns  loc: RTL_Quicksort.prj/quicksort.c:57
:0  %pivot_position = call fastcc i64 @partition(i64 %base, i64 %stack_1_load, [10 x i64]* %a) nounwind

ST_3: stack_size_1 (41)  [1/1] 3.79ns  loc: RTL_Quicksort.prj/quicksort.c:63
:3  %stack_size_1 = add nsw i64 %stack_size_load, 1

ST_3: stack_0_addr_1 (42)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:64
:4  %stack_0_addr_1 = getelementptr [10 x i64]* %stack_0, i64 0, i64 %stack_size_1

ST_3: StgValue_41 (43)  [1/1] 2.32ns  loc: RTL_Quicksort.prj/quicksort.c:64
:5  store i64 %base, i64* %stack_0_addr_1, align 16

ST_3: StgValue_42 (47)  [1/1] 1.77ns  loc: RTL_Quicksort.prj/quicksort.c:63
:9  store i64 %stack_size_1, i64* %stack_size


 <State 4>: 6.12ns
ST_4: pivot_position (38)  [1/2] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:57
:0  %pivot_position = call fastcc i64 @partition(i64 %base, i64 %stack_1_load, [10 x i64]* %a) nounwind

ST_4: tmp_3 (39)  [1/1] 3.79ns  loc: RTL_Quicksort.prj/quicksort.c:61
:1  %tmp_3 = add nsw i64 %pivot_position, 1

ST_4: StgValue_45 (40)  [1/1] 2.32ns  loc: RTL_Quicksort.prj/quicksort.c:61
:2  store i64 %tmp_3, i64* %stack_0_addr, align 16

ST_4: tmp_5 (44)  [1/1] 3.79ns  loc: RTL_Quicksort.prj/quicksort.c:65
:6  %tmp_5 = add nsw i64 %pivot_position, -1

ST_4: stack_1_addr_2 (45)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:65
:7  %stack_1_addr_2 = getelementptr [10 x i64]* %stack_1, i64 0, i64 %stack_size_1

ST_4: StgValue_48 (46)  [1/1] 2.32ns  loc: RTL_Quicksort.prj/quicksort.c:65
:8  store i64 %tmp_5, i64* %stack_1_addr_2, align 8

ST_4: StgValue_49 (48)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:67
:10  br label %5

ST_4: empty (50)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:74
:0  %empty = call i32 (...)* @_ssdm_op_SpecRegionEnd([7 x i8]* @p_str1, i32 %tmp_2) nounwind

ST_4: StgValue_51 (51)  [1/1] 0.00ns  loc: RTL_Quicksort.prj/quicksort.c:74
:1  br label %1



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 2.32ns
The critical path consists of the following:
	wire read on port 'f' [9]  (0 ns)
	'store' operation (RTL_Quicksort.prj/quicksort.c:51) of variable 'f' on array 'stack[1]', RTL_Quicksort.prj/quicksort.c:41 [16]  (2.32 ns)

 <State 2>: 2.32ns
The critical path consists of the following:
	'load' operation ('stack_size_load', RTL_Quicksort.prj/quicksort.c:63) on local variable 'stack_size' [20]  (0 ns)
	'getelementptr' operation ('stack_0_addr', RTL_Quicksort.prj/quicksort.c:73) [21]  (0 ns)
	'load' operation ('base', RTL_Quicksort.prj/quicksort.c:55) on array 'stack[0]', RTL_Quicksort.prj/quicksort.c:41 [28]  (2.32 ns)

 <State 3>: 6.12ns
The critical path consists of the following:
	'add' operation ('stack_size', RTL_Quicksort.prj/quicksort.c:63) [41]  (3.79 ns)
	'getelementptr' operation ('stack_0_addr_1', RTL_Quicksort.prj/quicksort.c:64) [42]  (0 ns)
	'store' operation (RTL_Quicksort.prj/quicksort.c:64) of variable 'base', RTL_Quicksort.prj/quicksort.c:55 on array 'stack[0]', RTL_Quicksort.prj/quicksort.c:41 [43]  (2.32 ns)

 <State 4>: 6.12ns
The critical path consists of the following:
	'call' operation ('pivot_position', RTL_Quicksort.prj/quicksort.c:57) to 'partition' [38]  (0 ns)
	'add' operation ('tmp_3', RTL_Quicksort.prj/quicksort.c:61) [39]  (3.79 ns)
	'store' operation (RTL_Quicksort.prj/quicksort.c:61) of variable 'tmp_3', RTL_Quicksort.prj/quicksort.c:61 on array 'stack[0]', RTL_Quicksort.prj/quicksort.c:41 [40]  (2.32 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
