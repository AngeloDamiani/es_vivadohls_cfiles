// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module merge (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i1,
        f1,
        f2,
        arr_0,
        arr_0_ap_vld,
        arr_0_read,
        arr_1,
        arr_1_ap_vld,
        arr_1_read,
        arr_2,
        arr_2_ap_vld,
        arr_2_read,
        arr_3,
        arr_3_ap_vld,
        arr_3_read,
        arr_4,
        arr_4_ap_vld,
        arr_4_read,
        arr_5,
        arr_5_ap_vld,
        arr_5_read,
        arr_6,
        arr_6_ap_vld,
        arr_6_read,
        arr_7,
        arr_7_ap_vld,
        arr_7_read,
        arr_8,
        arr_8_ap_vld,
        arr_8_read,
        arr_9,
        arr_9_ap_vld,
        arr_9_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] i1;
input  [63:0] f1;
input  [63:0] f2;
output  [63:0] arr_0;
output   arr_0_ap_vld;
input  [63:0] arr_0_read;
output  [63:0] arr_1;
output   arr_1_ap_vld;
input  [63:0] arr_1_read;
output  [63:0] arr_2;
output   arr_2_ap_vld;
input  [63:0] arr_2_read;
output  [63:0] arr_3;
output   arr_3_ap_vld;
input  [63:0] arr_3_read;
output  [63:0] arr_4;
output   arr_4_ap_vld;
input  [63:0] arr_4_read;
output  [63:0] arr_5;
output   arr_5_ap_vld;
input  [63:0] arr_5_read;
output  [63:0] arr_6;
output   arr_6_ap_vld;
input  [63:0] arr_6_read;
output  [63:0] arr_7;
output   arr_7_ap_vld;
input  [63:0] arr_7_read;
output  [63:0] arr_8;
output   arr_8_ap_vld;
input  [63:0] arr_8_read;
output  [63:0] arr_9;
output   arr_9_ap_vld;
input  [63:0] arr_9_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg arr_0_ap_vld;
reg arr_1_ap_vld;
reg arr_2_ap_vld;
reg arr_3_ap_vld;
reg arr_4_ap_vld;
reg arr_5_ap_vld;
reg arr_6_ap_vld;
reg arr_7_ap_vld;
reg arr_8_ap_vld;
reg arr_9_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] i_cast_fu_414_p1;
wire    ap_CS_fsm_state2;
wire   [3:0] i_1_fu_448_p2;
wire   [0:0] tmp_2_fu_524_p2;
reg   [0:0] tmp_2_reg_785;
wire   [0:0] tmp_s_fu_442_p2;
wire   [7:0] tmp_20_fu_529_p1;
wire   [7:0] tmp_19_fu_533_p1;
wire   [63:0] i_6_fu_567_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_10_fu_541_p2;
wire   [7:0] tmp_12_fu_573_p2;
wire   [63:0] i_5_fu_609_p2;
wire   [0:0] tmp_7_fu_583_p2;
wire   [7:0] tmp_11_fu_615_p2;
wire   [7:0] tmp_28_fu_621_p1;
wire   [63:0] i_7_fu_633_p2;
reg   [63:0] i_7_reg_833;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_16_fu_628_p2;
wire   [7:0] tmp_17_fu_649_p2;
wire    ap_CS_fsm_state5;
reg   [3:0] x_address0;
reg    x_ce0;
reg    x_we0;
reg   [63:0] x_d0;
wire   [63:0] x_q0;
reg   [3:0] i_reg_321;
reg   [7:0] tmp_8_reg_332;
reg   [63:0] i_2_reg_341;
reg   [7:0] tmp_5_reg_351;
reg   [63:0] i_3_reg_360;
reg   [7:0] tmp_14_reg_370;
reg   [63:0] i_4_reg_380;
wire   [0:0] tmp_1_fu_496_p2;
wire   [3:0] x_addr_gep_fu_283_p3;
reg   [63:0] p_0_fu_112;
wire   [63:0] i1_assign_fu_502_p2;
reg   [63:0] i2_1_fu_116;
wire   [63:0] i2_fu_392_p2;
wire   [63:0] i2_2_fu_513_p2;
wire   [3:0] tmp_29_fu_645_p1;
wire   [63:0] tmp_4_fu_458_p12;
wire   [63:0] tmp_18_fu_479_p12;
wire   [63:0] tmp_24_fu_550_p12;
wire   [63:0] tmp_22_fu_592_p12;
wire   [0:0] slt_fu_420_p2;
wire   [0:0] slt1_fu_431_p2;
wire   [0:0] rev_fu_425_p2;
wire   [0:0] rev1_fu_436_p2;
wire   [3:0] tmp_4_fu_458_p11;
wire   [3:0] tmp_18_fu_479_p11;
wire  signed [63:0] tmp_9_fu_537_p1;
wire   [3:0] tmp_24_fu_550_p11;
wire  signed [63:0] tmp_6_fu_579_p1;
wire   [3:0] tmp_22_fu_592_p11;
wire  signed [63:0] tmp_15_fu_624_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

merge_x #(
    .DataWidth( 64 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_address0),
    .ce0(x_ce0),
    .we0(x_we0),
    .d0(x_d0),
    .q0(x_q0)
);

mergesort_mux_104bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mergesort_mux_104bkb_U1(
    .din1(arr_0_read),
    .din2(arr_1_read),
    .din3(arr_2_read),
    .din4(arr_3_read),
    .din5(arr_4_read),
    .din6(arr_5_read),
    .din7(arr_6_read),
    .din8(arr_7_read),
    .din9(arr_8_read),
    .din10(arr_9_read),
    .din11(tmp_4_fu_458_p11),
    .dout(tmp_4_fu_458_p12)
);

mergesort_mux_104bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mergesort_mux_104bkb_U2(
    .din1(arr_0_read),
    .din2(arr_1_read),
    .din3(arr_2_read),
    .din4(arr_3_read),
    .din5(arr_4_read),
    .din6(arr_5_read),
    .din7(arr_6_read),
    .din8(arr_7_read),
    .din9(arr_8_read),
    .din10(arr_9_read),
    .din11(tmp_18_fu_479_p11),
    .dout(tmp_18_fu_479_p12)
);

mergesort_mux_104bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mergesort_mux_104bkb_U3(
    .din1(arr_0_read),
    .din2(arr_1_read),
    .din3(arr_2_read),
    .din4(arr_3_read),
    .din5(arr_4_read),
    .din6(arr_5_read),
    .din7(arr_6_read),
    .din8(arr_7_read),
    .din9(arr_8_read),
    .din10(arr_9_read),
    .din11(tmp_24_fu_550_p11),
    .dout(tmp_24_fu_550_p12)
);

mergesort_mux_104bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mergesort_mux_104bkb_U4(
    .din1(arr_0_read),
    .din2(arr_1_read),
    .din3(arr_2_read),
    .din4(arr_3_read),
    .din5(arr_4_read),
    .din6(arr_5_read),
    .din7(arr_6_read),
    .din8(arr_7_read),
    .din9(arr_8_read),
    .din10(arr_9_read),
    .din11(tmp_22_fu_592_p11),
    .dout(tmp_22_fu_592_p12)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd1) & (1'd1 == tmp_1_fu_496_p2))) begin
        i2_1_fu_116 <= i2_2_fu_513_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i2_1_fu_116 <= i2_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_785 == 1'd0) & (1'd0 == tmp_10_fu_541_p2))) begin
        i_2_reg_341 <= i_6_fu_567_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd0) & (tmp_2_fu_524_p2 == 1'd0))) begin
        i_2_reg_341 <= i_cast_fu_414_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_785 == 1'd1) & (1'd0 == tmp_7_fu_583_p2))) begin
        i_3_reg_360 <= i_5_fu_609_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd0) & (tmp_2_fu_524_p2 == 1'd1))) begin
        i_3_reg_360 <= i_cast_fu_414_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_4_reg_380 <= i_7_reg_833;
    end else if (((1'b1 == ap_CS_fsm_state3) & (((tmp_2_reg_785 == 1'd0) & (1'd1 == tmp_10_fu_541_p2)) | ((tmp_2_reg_785 == 1'd1) & (1'd1 == tmp_7_fu_583_p2))))) begin
        i_4_reg_380 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd1))) begin
        i_reg_321 <= i_1_fu_448_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_321 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd1) & (1'd0 == tmp_1_fu_496_p2))) begin
        p_0_fu_112 <= i1_assign_fu_502_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_0_fu_112 <= i1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_14_reg_370 <= tmp_17_fu_649_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (((tmp_2_reg_785 == 1'd0) & (1'd1 == tmp_10_fu_541_p2)) | ((tmp_2_reg_785 == 1'd1) & (1'd1 == tmp_7_fu_583_p2))))) begin
        tmp_14_reg_370 <= tmp_28_fu_621_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_785 == 1'd1) & (1'd0 == tmp_7_fu_583_p2))) begin
        tmp_5_reg_351 <= tmp_11_fu_615_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd0) & (tmp_2_fu_524_p2 == 1'd1))) begin
        tmp_5_reg_351 <= tmp_19_fu_533_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_785 == 1'd0) & (1'd0 == tmp_10_fu_541_p2))) begin
        tmp_8_reg_332 <= tmp_12_fu_573_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd0) & (tmp_2_fu_524_p2 == 1'd0))) begin
        tmp_8_reg_332 <= tmp_20_fu_529_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_7_reg_833 <= i_7_fu_633_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd0))) begin
        tmp_2_reg_785 <= tmp_2_fu_524_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_16_fu_628_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_16_fu_628_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (4'd0 == tmp_29_fu_645_p1))) begin
        arr_0_ap_vld = 1'b1;
    end else begin
        arr_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_29_fu_645_p1 == 4'd1))) begin
        arr_1_ap_vld = 1'b1;
    end else begin
        arr_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_29_fu_645_p1 == 4'd2))) begin
        arr_2_ap_vld = 1'b1;
    end else begin
        arr_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_29_fu_645_p1 == 4'd3))) begin
        arr_3_ap_vld = 1'b1;
    end else begin
        arr_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_29_fu_645_p1 == 4'd4))) begin
        arr_4_ap_vld = 1'b1;
    end else begin
        arr_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_29_fu_645_p1 == 4'd5))) begin
        arr_5_ap_vld = 1'b1;
    end else begin
        arr_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_29_fu_645_p1 == 4'd6))) begin
        arr_6_ap_vld = 1'b1;
    end else begin
        arr_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_29_fu_645_p1 == 4'd7))) begin
        arr_7_ap_vld = 1'b1;
    end else begin
        arr_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_29_fu_645_p1 == 4'd8))) begin
        arr_8_ap_vld = 1'b1;
    end else begin
        arr_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~(4'd0 == tmp_29_fu_645_p1) & ~(tmp_29_fu_645_p1 == 4'd1) & ~(tmp_29_fu_645_p1 == 4'd2) & ~(tmp_29_fu_645_p1 == 4'd3) & ~(tmp_29_fu_645_p1 == 4'd4) & ~(tmp_29_fu_645_p1 == 4'd5) & ~(tmp_29_fu_645_p1 == 4'd6) & ~(tmp_29_fu_645_p1 == 4'd7) & ~(tmp_29_fu_645_p1 == 4'd8))) begin
        arr_9_ap_vld = 1'b1;
    end else begin
        arr_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_address0 = i_4_reg_380;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_785 == 1'd1) & (1'd0 == tmp_7_fu_583_p2))) begin
        x_address0 = i_3_reg_360;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_785 == 1'd0) & (1'd0 == tmp_10_fu_541_p2))) begin
        x_address0 = i_2_reg_341;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd1) & (1'd1 == tmp_1_fu_496_p2))) begin
        x_address0 = x_addr_gep_fu_283_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd1) & (1'd0 == tmp_1_fu_496_p2))) begin
        x_address0 = i_cast_fu_414_p1;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_785 == 1'd0) & (1'd0 == tmp_10_fu_541_p2)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_785 == 1'd1) & (1'd0 == tmp_7_fu_583_p2)) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd1) & (1'd0 == tmp_1_fu_496_p2)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd1) & (1'd1 == tmp_1_fu_496_p2)))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_785 == 1'd1) & (1'd0 == tmp_7_fu_583_p2))) begin
        x_d0 = tmp_22_fu_592_p12;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_785 == 1'd0) & (1'd0 == tmp_10_fu_541_p2))) begin
        x_d0 = tmp_24_fu_550_p12;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd1) & (1'd1 == tmp_1_fu_496_p2))) begin
        x_d0 = tmp_18_fu_479_p12;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd1) & (1'd0 == tmp_1_fu_496_p2))) begin
        x_d0 = tmp_4_fu_458_p12;
    end else begin
        x_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_785 == 1'd0) & (1'd0 == tmp_10_fu_541_p2)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_785 == 1'd1) & (1'd0 == tmp_7_fu_583_p2)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd1) & (1'd0 == tmp_1_fu_496_p2)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd1) & (1'd1 == tmp_1_fu_496_p2)))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_442_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (((tmp_2_reg_785 == 1'd0) & (1'd1 == tmp_10_fu_541_p2)) | ((tmp_2_reg_785 == 1'd1) & (1'd1 == tmp_7_fu_583_p2))))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_16_fu_628_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign arr_0 = x_q0;

assign arr_1 = x_q0;

assign arr_2 = x_q0;

assign arr_3 = x_q0;

assign arr_4 = x_q0;

assign arr_5 = x_q0;

assign arr_6 = x_q0;

assign arr_7 = x_q0;

assign arr_8 = x_q0;

assign arr_9 = x_q0;

assign i1_assign_fu_502_p2 = (p_0_fu_112 + 64'd1);

assign i2_2_fu_513_p2 = (i2_1_fu_116 + 64'd1);

assign i2_fu_392_p2 = (f1 + 64'd1);

assign i_1_fu_448_p2 = (i_reg_321 + 4'd1);

assign i_5_fu_609_p2 = (64'd1 + i_3_reg_360);

assign i_6_fu_567_p2 = (64'd1 + i_2_reg_341);

assign i_7_fu_633_p2 = (i_4_reg_380 + 64'd1);

assign i_cast_fu_414_p1 = i_reg_321;

assign rev1_fu_436_p2 = (slt1_fu_431_p2 ^ 1'd1);

assign rev_fu_425_p2 = (slt_fu_420_p2 ^ 1'd1);

assign slt1_fu_431_p2 = (($signed(f1) < $signed(p_0_fu_112)) ? 1'b1 : 1'b0);

assign slt_fu_420_p2 = (($signed(f2) < $signed(i2_1_fu_116)) ? 1'b1 : 1'b0);

assign tmp_10_fu_541_p2 = (($signed(tmp_9_fu_537_p1) > $signed(f1)) ? 1'b1 : 1'b0);

assign tmp_11_fu_615_p2 = (8'd1 + tmp_5_reg_351);

assign tmp_12_fu_573_p2 = (8'd1 + tmp_8_reg_332);

assign tmp_15_fu_624_p1 = $signed(tmp_14_reg_370);

assign tmp_16_fu_628_p2 = (($signed(tmp_15_fu_624_p1) > $signed(f2)) ? 1'b1 : 1'b0);

assign tmp_17_fu_649_p2 = (tmp_14_reg_370 + 8'd1);

assign tmp_18_fu_479_p11 = i2_1_fu_116[3:0];

assign tmp_19_fu_533_p1 = i2_1_fu_116[7:0];

assign tmp_1_fu_496_p2 = (($signed(tmp_4_fu_458_p12) > $signed(tmp_18_fu_479_p12)) ? 1'b1 : 1'b0);

assign tmp_20_fu_529_p1 = p_0_fu_112[7:0];

assign tmp_22_fu_592_p11 = tmp_5_reg_351[3:0];

assign tmp_24_fu_550_p11 = tmp_8_reg_332[3:0];

assign tmp_28_fu_621_p1 = i1[7:0];

assign tmp_29_fu_645_p1 = tmp_14_reg_370[3:0];

assign tmp_2_fu_524_p2 = (($signed(p_0_fu_112) > $signed(f1)) ? 1'b1 : 1'b0);

assign tmp_4_fu_458_p11 = p_0_fu_112[3:0];

assign tmp_6_fu_579_p1 = $signed(tmp_5_reg_351);

assign tmp_7_fu_583_p2 = (($signed(tmp_6_fu_579_p1) > $signed(f2)) ? 1'b1 : 1'b0);

assign tmp_9_fu_537_p1 = $signed(tmp_8_reg_332);

assign tmp_s_fu_442_p2 = (rev_fu_425_p2 & rev1_fu_436_p2);

assign x_addr_gep_fu_283_p3 = i_cast_fu_414_p1;

endmodule //merge
