-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity banker_algorithm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    available_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    available_ce0 : OUT STD_LOGIC;
    available_we0 : OUT STD_LOGIC;
    available_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    available_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    allocated_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    allocated_ce0 : OUT STD_LOGIC;
    allocated_we0 : OUT STD_LOGIC;
    allocated_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    allocated_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    max_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_ce0 : OUT STD_LOGIC;
    max_we0 : OUT STD_LOGIC;
    max_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    max_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    max_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_ce1 : OUT STD_LOGIC;
    max_we1 : OUT STD_LOGIC;
    max_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    max_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    need_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    need_ce0 : OUT STD_LOGIC;
    need_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of banker_algorithm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "banker_algorithm,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.439000,HLS_SYN_LAT=26,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=877,HLS_SYN_LUT=370}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_7_fu_124_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_reg_201 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_138_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_209 : STD_LOGIC_VECTOR (2 downto 0);
    signal allocated_addr_reg_214 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_1_fu_170_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_227 : STD_LOGIC_VECTOR (1 downto 0);
    signal available_addr_reg_232 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal need_load_reg_237 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal available_load_reg_244 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_192_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_253 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_4_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_77 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_88 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_fu_130_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_99 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_cast_fu_158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast1_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_176_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_116_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast2_cast_fu_112_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_cast1_cast_fu_149_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_153_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_164_p2 = ap_const_lv1_1))) then 
                i_reg_77 <= i_1_reg_209;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_77 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_fu_130_p3))) then 
                j_reg_88 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_88 <= j_1_reg_227;
            end if; 
        end if;
    end process;

    p_0_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_130_p3))) then 
                p_0_reg_99(1) <= '0';
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_4_fu_187_p2 = ap_const_lv1_1))) then 
                p_0_reg_99(1) <= '1';
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                allocated_addr_reg_214 <= tmp_8_cast_fu_158_p1(4 - 1 downto 0);
                j_1_reg_227 <= j_1_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_164_p2 = ap_const_lv1_0))) then
                available_addr_reg_232 <= j_cast1_fu_144_p1(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                available_load_reg_244 <= available_q0;
                need_load_reg_237 <= need_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_209 <= i_1_fu_138_p2;
                tmp_7_reg_201 <= tmp_7_fu_124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_4_fu_187_p2))) then
                tmp_6_reg_253 <= tmp_6_fu_192_p2;
            end if;
        end if;
    end process;
    p_0_reg_99(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_1_fu_164_p2, ap_CS_fsm_state5, tmp_4_fu_187_p2, tmp_fu_130_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_130_p3))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_1_fu_164_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_4_fu_187_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    allocated_address0 <= allocated_addr_reg_214;

    allocated_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            allocated_ce0 <= ap_const_logic_1;
        else 
            allocated_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    allocated_d0 <= std_logic_vector(unsigned(allocated_q0) + unsigned(need_load_reg_237));

    allocated_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            allocated_we0 <= ap_const_logic_1;
        else 
            allocated_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        ap_return <= std_logic_vector(IEEE.numeric_std.resize(signed(p_0_reg_99),64));


    available_address0_assign_proc : process(ap_CS_fsm_state3, available_addr_reg_232, ap_CS_fsm_state5, ap_CS_fsm_state6, j_cast1_fu_144_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            available_address0 <= available_addr_reg_232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            available_address0 <= j_cast1_fu_144_p1(2 - 1 downto 0);
        else 
            available_address0 <= "XX";
        end if; 
    end process;


    available_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            available_ce0 <= ap_const_logic_1;
        else 
            available_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    available_d0_assign_proc : process(tmp_6_reg_253, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_2_fu_176_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            available_d0 <= tmp_6_reg_253;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            available_d0 <= tmp_2_fu_176_p2;
        else 
            available_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    available_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            available_we0 <= ap_const_logic_1;
        else 
            available_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_138_p2 <= std_logic_vector(unsigned(i_reg_77) + unsigned(ap_const_lv3_1));
    i_cast2_cast_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_77),5));
    j_1_fu_170_p2 <= std_logic_vector(unsigned(j_reg_88) + unsigned(ap_const_lv2_1));
    j_cast1_cast_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_88),5));
    j_cast1_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_88),64));
    max_address0 <= ap_const_lv4_0;
    max_address1 <= ap_const_lv4_0;
    max_ce0 <= ap_const_logic_0;
    max_ce1 <= ap_const_logic_0;
    max_d0 <= ap_const_lv64_0;
    max_d1 <= ap_const_lv64_0;
    max_we0 <= ap_const_logic_0;
    max_we1 <= ap_const_logic_0;
    need_address0 <= tmp_8_cast_fu_158_p1(4 - 1 downto 0);

    need_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            need_ce0 <= ap_const_logic_1;
        else 
            need_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_164_p2 <= "1" when (j_reg_88 = ap_const_lv2_3) else "0";
    tmp_2_fu_176_p2 <= std_logic_vector(unsigned(available_load_reg_244) - unsigned(need_load_reg_237));
    tmp_4_fu_187_p2 <= "1" when (signed(need_load_reg_237) > signed(tmp_2_fu_176_p2)) else "0";
    tmp_5_fu_116_p3 <= (i_reg_77 & ap_const_lv2_0);
    tmp_6_fu_192_p2 <= std_logic_vector(unsigned(allocated_q0) + unsigned(available_load_reg_244));
    tmp_7_fu_124_p2 <= std_logic_vector(unsigned(tmp_5_fu_116_p3) - unsigned(i_cast2_cast_fu_112_p1));
        tmp_8_cast_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_153_p2),64));

    tmp_8_fu_153_p2 <= std_logic_vector(unsigned(tmp_7_reg_201) + unsigned(j_cast1_cast_fu_149_p1));
    tmp_fu_130_p3 <= i_reg_77(2 downto 2);
end behav;
