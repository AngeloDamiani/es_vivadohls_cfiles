// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mergesort.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mergesort::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mergesort::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> mergesort::ap_ST_fsm_state1 = "1";
const sc_lv<6> mergesort::ap_ST_fsm_state2 = "10";
const sc_lv<6> mergesort::ap_ST_fsm_state3 = "100";
const sc_lv<6> mergesort::ap_ST_fsm_state4 = "1000";
const sc_lv<6> mergesort::ap_ST_fsm_state5 = "10000";
const sc_lv<6> mergesort::ap_ST_fsm_state6 = "100000";
const sc_lv<32> mergesort::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mergesort::ap_const_lv32_1 = "1";
const sc_lv<1> mergesort::ap_const_lv1_1 = "1";
const sc_lv<32> mergesort::ap_const_lv32_2 = "10";
const sc_lv<32> mergesort::ap_const_lv32_3 = "11";
const sc_lv<64> mergesort::ap_const_lv64_1 = "1";
const sc_lv<1> mergesort::ap_const_lv1_0 = "0";
const sc_lv<64> mergesort::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> mergesort::ap_const_lv32_5 = "101";
const sc_lv<32> mergesort::ap_const_lv32_4 = "100";
const sc_lv<64> mergesort::ap_const_lv64_A = "1010";
const sc_lv<64> mergesort::ap_const_lv64_9 = "1001";
const sc_lv<64> mergesort::ap_const_lv64_FFFFFFFFFFFFFFFF = "1111111111111111111111111111111111111111111111111111111111111111";
const bool mergesort::ap_const_boolean_1 = true;

mergesort::mergesort(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_merge_fu_73 = new merge("grp_merge_fu_73");
    grp_merge_fu_73->ap_clk(ap_clk);
    grp_merge_fu_73->ap_rst(ap_rst);
    grp_merge_fu_73->ap_start(grp_merge_fu_73_ap_start);
    grp_merge_fu_73->ap_done(grp_merge_fu_73_ap_done);
    grp_merge_fu_73->ap_idle(grp_merge_fu_73_ap_idle);
    grp_merge_fu_73->ap_ready(grp_merge_fu_73_ap_ready);
    grp_merge_fu_73->i1(tmp_5_reg_153);
    grp_merge_fu_73->f1(tmp_6_reg_158);
    grp_merge_fu_73->f2(c_assign_1_reg_174);
    grp_merge_fu_73->arr_address0(grp_merge_fu_73_arr_address0);
    grp_merge_fu_73->arr_ce0(grp_merge_fu_73_arr_ce0);
    grp_merge_fu_73->arr_q0(arr_q0);
    grp_merge_fu_73->arr_address1(grp_merge_fu_73_arr_address1);
    grp_merge_fu_73->arr_ce1(grp_merge_fu_73_arr_ce1);
    grp_merge_fu_73->arr_we1(grp_merge_fu_73_arr_we1);
    grp_merge_fu_73->arr_d1(grp_merge_fu_73_arr_d1);
    grp_merge_fu_73->arr_q1(arr_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_84_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_84_p2 );

    SC_METHOD(thread_arr_address0);
    sensitive << ( grp_merge_fu_73_arr_address0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_arr_address1);
    sensitive << ( grp_merge_fu_73_arr_address1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_arr_ce0);
    sensitive << ( grp_merge_fu_73_arr_ce0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_arr_ce1);
    sensitive << ( grp_merge_fu_73_arr_ce1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_arr_d1);
    sensitive << ( grp_merge_fu_73_arr_d1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_arr_we1);
    sensitive << ( grp_merge_fu_73_arr_we1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_c_assign_1_fu_133_p3);
    sensitive << ( c_assign_reg_163 );
    sensitive << ( tmp_i_fu_128_p2 );

    SC_METHOD(thread_c_assign_fu_118_p2);
    sensitive << ( m_1_reg_143 );
    sensitive << ( tmp1_fu_106_p2 );

    SC_METHOD(thread_grp_merge_fu_73_ap_start);
    sensitive << ( ap_reg_grp_merge_fu_73_ap_start );

    SC_METHOD(thread_m_1_fu_90_p2);
    sensitive << ( m_reg_50 );

    SC_METHOD(thread_tmp1_fu_106_p2);
    sensitive << ( x_reg_62 );

    SC_METHOD(thread_tmp_3_fu_96_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( x_reg_62 );

    SC_METHOD(thread_tmp_5_fu_102_p1);
    sensitive << ( x_reg_62 );

    SC_METHOD(thread_tmp_6_fu_112_p2);
    sensitive << ( m_reg_50 );
    sensitive << ( tmp1_fu_106_p2 );

    SC_METHOD(thread_tmp_fu_84_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( m_reg_50 );

    SC_METHOD(thread_tmp_i_fu_128_p2);
    sensitive << ( c_assign_reg_163 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_x_1_fu_123_p2);
    sensitive << ( m_1_reg_143 );
    sensitive << ( x_reg_62 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_84_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_3_fu_96_p2 );
    sensitive << ( grp_merge_fu_73_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    ap_reg_grp_merge_fu_73_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mergesort_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, arr_address0, "(port)arr_address0");
    sc_trace(mVcdFile, arr_ce0, "(port)arr_ce0");
    sc_trace(mVcdFile, arr_q0, "(port)arr_q0");
    sc_trace(mVcdFile, arr_address1, "(port)arr_address1");
    sc_trace(mVcdFile, arr_ce1, "(port)arr_ce1");
    sc_trace(mVcdFile, arr_we1, "(port)arr_we1");
    sc_trace(mVcdFile, arr_d1, "(port)arr_d1");
    sc_trace(mVcdFile, arr_q1, "(port)arr_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, m_1_fu_90_p2, "m_1_fu_90_p2");
    sc_trace(mVcdFile, m_1_reg_143, "m_1_reg_143");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_84_p2, "tmp_fu_84_p2");
    sc_trace(mVcdFile, tmp_5_fu_102_p1, "tmp_5_fu_102_p1");
    sc_trace(mVcdFile, tmp_5_reg_153, "tmp_5_reg_153");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_3_fu_96_p2, "tmp_3_fu_96_p2");
    sc_trace(mVcdFile, tmp_6_fu_112_p2, "tmp_6_fu_112_p2");
    sc_trace(mVcdFile, tmp_6_reg_158, "tmp_6_reg_158");
    sc_trace(mVcdFile, c_assign_fu_118_p2, "c_assign_fu_118_p2");
    sc_trace(mVcdFile, c_assign_reg_163, "c_assign_reg_163");
    sc_trace(mVcdFile, x_1_fu_123_p2, "x_1_fu_123_p2");
    sc_trace(mVcdFile, x_1_reg_169, "x_1_reg_169");
    sc_trace(mVcdFile, c_assign_1_fu_133_p3, "c_assign_1_fu_133_p3");
    sc_trace(mVcdFile, c_assign_1_reg_174, "c_assign_1_reg_174");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_merge_fu_73_ap_start, "grp_merge_fu_73_ap_start");
    sc_trace(mVcdFile, grp_merge_fu_73_ap_done, "grp_merge_fu_73_ap_done");
    sc_trace(mVcdFile, grp_merge_fu_73_ap_idle, "grp_merge_fu_73_ap_idle");
    sc_trace(mVcdFile, grp_merge_fu_73_ap_ready, "grp_merge_fu_73_ap_ready");
    sc_trace(mVcdFile, grp_merge_fu_73_arr_address0, "grp_merge_fu_73_arr_address0");
    sc_trace(mVcdFile, grp_merge_fu_73_arr_ce0, "grp_merge_fu_73_arr_ce0");
    sc_trace(mVcdFile, grp_merge_fu_73_arr_address1, "grp_merge_fu_73_arr_address1");
    sc_trace(mVcdFile, grp_merge_fu_73_arr_ce1, "grp_merge_fu_73_arr_ce1");
    sc_trace(mVcdFile, grp_merge_fu_73_arr_we1, "grp_merge_fu_73_arr_we1");
    sc_trace(mVcdFile, grp_merge_fu_73_arr_d1, "grp_merge_fu_73_arr_d1");
    sc_trace(mVcdFile, m_reg_50, "m_reg_50");
    sc_trace(mVcdFile, x_reg_62, "x_reg_62");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_reg_grp_merge_fu_73_ap_start, "ap_reg_grp_merge_fu_73_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp1_fu_106_p2, "tmp1_fu_106_p2");
    sc_trace(mVcdFile, tmp_i_fu_128_p2, "tmp_i_fu_128_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("mergesort.hdltvin.dat");
    mHdltvoutHandle.open("mergesort.hdltvout.dat");
}

mergesort::~mergesort() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_merge_fu_73;
}

void mergesort::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_merge_fu_73_ap_start = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_reg_grp_merge_fu_73_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_merge_fu_73_ap_ready.read())) {
            ap_reg_grp_merge_fu_73_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_3_fu_96_p2.read(), ap_const_lv1_0))) {
        m_reg_50 = m_1_reg_143.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        m_reg_50 = ap_const_lv64_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(grp_merge_fu_73_ap_done.read(), ap_const_logic_1))) {
        x_reg_62 = x_1_reg_169.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_fu_84_p2.read(), ap_const_lv1_1))) {
        x_reg_62 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        c_assign_1_reg_174 = c_assign_1_fu_133_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_96_p2.read()))) {
        c_assign_reg_163 = c_assign_fu_118_p2.read();
        tmp_5_reg_153 = tmp_5_fu_102_p1.read();
        tmp_6_reg_158 = tmp_6_fu_112_p2.read();
        x_1_reg_169 = x_1_fu_123_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_84_p2.read(), ap_const_lv1_1))) {
        m_1_reg_143 = m_1_fu_90_p2.read();
    }
}

void mergesort::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mergesort::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mergesort::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mergesort::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void mergesort::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void mergesort::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void mergesort::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_84_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mergesort::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mergesort::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_84_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mergesort::thread_arr_address0() {
    arr_address0 = grp_merge_fu_73_arr_address0.read();
}

void mergesort::thread_arr_address1() {
    arr_address1 = grp_merge_fu_73_arr_address1.read();
}

void mergesort::thread_arr_ce0() {
    arr_ce0 = grp_merge_fu_73_arr_ce0.read();
}

void mergesort::thread_arr_ce1() {
    arr_ce1 = grp_merge_fu_73_arr_ce1.read();
}

void mergesort::thread_arr_d1() {
    arr_d1 = grp_merge_fu_73_arr_d1.read();
}

void mergesort::thread_arr_we1() {
    arr_we1 = grp_merge_fu_73_arr_we1.read();
}

void mergesort::thread_c_assign_1_fu_133_p3() {
    c_assign_1_fu_133_p3 = (!tmp_i_fu_128_p2.read()[0].is_01())? sc_lv<64>(): ((tmp_i_fu_128_p2.read()[0].to_bool())? c_assign_reg_163.read(): ap_const_lv64_9);
}

void mergesort::thread_c_assign_fu_118_p2() {
    c_assign_fu_118_p2 = (!tmp1_fu_106_p2.read().is_01() || !m_1_reg_143.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp1_fu_106_p2.read()) + sc_biguint<64>(m_1_reg_143.read()));
}

void mergesort::thread_grp_merge_fu_73_ap_start() {
    grp_merge_fu_73_ap_start = ap_reg_grp_merge_fu_73_ap_start.read();
}

void mergesort::thread_m_1_fu_90_p2() {
    m_1_fu_90_p2 = (!ap_const_lv64_1.is_01())? sc_lv<64>(): m_reg_50.read() << (unsigned short)ap_const_lv64_1.to_uint();
}

void mergesort::thread_tmp1_fu_106_p2() {
    tmp1_fu_106_p2 = (!ap_const_lv64_FFFFFFFFFFFFFFFF.is_01() || !x_reg_62.read().is_01())? sc_lv<64>(): (sc_bigint<64>(ap_const_lv64_FFFFFFFFFFFFFFFF) + sc_biguint<64>(x_reg_62.read()));
}

void mergesort::thread_tmp_3_fu_96_p2() {
    tmp_3_fu_96_p2 = (!x_reg_62.read().is_01() || !ap_const_lv64_9.is_01())? sc_lv<1>(): (sc_bigint<64>(x_reg_62.read()) < sc_bigint<64>(ap_const_lv64_9));
}

void mergesort::thread_tmp_5_fu_102_p1() {
    tmp_5_fu_102_p1 = x_reg_62.read().range(8-1, 0);
}

void mergesort::thread_tmp_6_fu_112_p2() {
    tmp_6_fu_112_p2 = (!tmp1_fu_106_p2.read().is_01() || !m_reg_50.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp1_fu_106_p2.read()) + sc_biguint<64>(m_reg_50.read()));
}

void mergesort::thread_tmp_fu_84_p2() {
    tmp_fu_84_p2 = (!m_reg_50.read().is_01() || !ap_const_lv64_A.is_01())? sc_lv<1>(): (sc_bigint<64>(m_reg_50.read()) < sc_bigint<64>(ap_const_lv64_A));
}

void mergesort::thread_tmp_i_fu_128_p2() {
    tmp_i_fu_128_p2 = (!c_assign_reg_163.read().is_01() || !ap_const_lv64_9.is_01())? sc_lv<1>(): (sc_bigint<64>(c_assign_reg_163.read()) < sc_bigint<64>(ap_const_lv64_9));
}

void mergesort::thread_x_1_fu_123_p2() {
    x_1_fu_123_p2 = (!m_1_reg_143.read().is_01() || !x_reg_62.read().is_01())? sc_lv<64>(): (sc_biguint<64>(m_1_reg_143.read()) + sc_biguint<64>(x_reg_62.read()));
}

void mergesort::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_84_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_3_fu_96_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_merge_fu_73_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void mergesort::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_address0\" :  \"" << arr_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_ce0\" :  \"" << arr_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arr_q0\" :  \"" << arr_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_address1\" :  \"" << arr_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_ce1\" :  \"" << arr_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_we1\" :  \"" << arr_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arr_d1\" :  \"" << arr_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arr_q1\" :  \"" << arr_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

