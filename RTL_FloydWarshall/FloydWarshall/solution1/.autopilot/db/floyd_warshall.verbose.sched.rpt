

================================================================
== Vivado HLS Report for 'floyd_warshall'
================================================================
* Date:           Fri Mar  2 00:46:22 2018

* Version:        2017.2 (Build 1909853 on Thu Jun 15 18:55:24 MDT 2017)
* Project:        FloydWarshall
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      9.42|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +------+------+------+------+---------+
    |   Latency   |   Interval  | Pipeline|
    |  min |  max |  min |  max |   Type  |
    +------+------+------+------+---------+
    |  2003|  2003|  2004|  2004|   none  |
    +------+------+------+------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------------------------+------+------+----------+-----------+-----------+------+----------+
        |                                     |   Latency   | Iteration|  Initiation Interval  | Trip |          |
        |              Loop Name              |  min |  max |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------------------------+------+------+----------+-----------+-----------+------+----------+
        |- OUTER_LOOP_MIDDLE_LOOP_INNER_LOOP  |  2001|  2001|         4|          2|          1|  1000|    yes   |
        +-------------------------------------+------+------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 2, depth = 4


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 6
* Pipeline: 1
  Pipeline-0: II = 2, D = 4, States = { 2 3 4 5 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	6  / (exitcond_flatten1)
	3  / (!exitcond_flatten1)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	2  / true
6 --> 
* FSM state operations: 

 <State 1>: 1.59ns
ST_1: StgValue_7 (2)  [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap([100 x i32]* %A) nounwind, !map !7

ST_1: StgValue_8 (3)  [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecTopModule([15 x i8]* @floyd_warshall_str) nounwind

ST_1: StgValue_9 (4)  [1/1] 1.59ns  loc: floyd_warshall.c:12
:2  br label %1


 <State 2>: 7.24ns
ST_2: indvar_flatten1 (6)  [1/1] 0.00ns
:0  %indvar_flatten1 = phi i10 [ 0, %0 ], [ %indvar_flatten_next1, %._crit_edge ]

ST_2: h (7)  [1/1] 0.00ns  loc: floyd_warshall.c:17
:1  %h = phi i4 [ 0, %0 ], [ %tmp_1_mid2_v, %._crit_edge ]

ST_2: indvar_flatten (8)  [1/1] 0.00ns
:2  %indvar_flatten = phi i8 [ 0, %0 ], [ %indvar_flatten_next, %._crit_edge ]

ST_2: i (9)  [1/1] 0.00ns  loc: floyd_warshall.c:17
:3  %i = phi i4 [ 0, %0 ], [ %tmp_4_mid2, %._crit_edge ]

ST_2: j (10)  [1/1] 0.00ns
:4  %j = phi i4 [ 0, %0 ], [ %j_1, %._crit_edge ]

ST_2: exitcond_flatten1 (11)  [1/1] 3.02ns
:5  %exitcond_flatten1 = icmp eq i10 %indvar_flatten1, -24

ST_2: indvar_flatten_next1 (12)  [1/1] 2.32ns
:6  %indvar_flatten_next1 = add i10 %indvar_flatten1, 1

ST_2: StgValue_17 (13)  [1/1] 0.00ns
:7  br i1 %exitcond_flatten1, label %3, label %.reset7

ST_2: h_1 (15)  [1/1] 2.35ns  loc: floyd_warshall.c:12
.reset7:0  %h_1 = add i4 %h, 1

ST_2: exitcond_flatten9 (18)  [1/1] 2.91ns
.reset7:3  %exitcond_flatten9 = icmp eq i8 %indvar_flatten, 100

ST_2: i_mid (19)  [1/1] 2.07ns  loc: floyd_warshall.c:17
.reset7:4  %i_mid = select i1 %exitcond_flatten9, i4 0, i4 %i

ST_2: tmp_1_mid2_v (20)  [1/1] 2.07ns  loc: floyd_warshall.c:17
.reset7:5  %tmp_1_mid2_v = select i1 %exitcond_flatten9, i4 %h_1, i4 %h

ST_2: not_exitcond_flatten (27)  [1/1] 0.00ns  loc: floyd_warshall.c:16 (grouped into LUT with out node tmp_5_mid)
.reset7:12  %not_exitcond_flatten = xor i1 %exitcond_flatten9, true

ST_2: tmp_4 (28)  [1/1] 3.10ns  loc: floyd_warshall.c:16
.reset7:13  %tmp_4 = icmp eq i4 %j, -6

ST_2: tmp_5_mid (29)  [1/1] 2.07ns  loc: floyd_warshall.c:16 (out node of the LUT)
.reset7:14  %tmp_5_mid = and i1 %tmp_4, %not_exitcond_flatten

ST_2: tmp_3 (32)  [1/1] 0.00ns  loc: floyd_warshall.c:16 (grouped into LUT with out node j_mid2)
.reset7:17  %tmp_3 = or i1 %tmp_5_mid, %exitcond_flatten9

ST_2: j_mid2 (33)  [1/1] 2.07ns  loc: floyd_warshall.c:16 (out node of the LUT)
.reset7:18  %j_mid2 = select i1 %tmp_3, i4 0, i4 %j

ST_2: indvar_flatten_op (65)  [1/1] 2.32ns
._crit_edge:2  %indvar_flatten_op = add i8 %indvar_flatten, 1

ST_2: indvar_flatten_next (66)  [1/1] 2.07ns
._crit_edge:3  %indvar_flatten_next = select i1 %exitcond_flatten9, i8 1, i8 %indvar_flatten_op


 <State 3>: 6.92ns
ST_3: tmp (22)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:7  %tmp = call i7 @_ssdm_op_BitConcatenate.i7.i4.i3(i4 %tmp_1_mid2_v, i3 0)

ST_3: p_shl2_cast (23)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:8  %p_shl2_cast = zext i7 %tmp to i8

ST_3: tmp_1 (24)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:9  %tmp_1 = call i5 @_ssdm_op_BitConcatenate.i5.i4.i1(i4 %tmp_1_mid2_v, i1 false)

ST_3: p_shl3_cast (25)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:10  %p_shl3_cast = zext i5 %tmp_1 to i8

ST_3: tmp_2 (26)  [1/1] 1.83ns  loc: floyd_warshall.c:17
.reset7:11  %tmp_2 = add i8 %p_shl2_cast, %p_shl3_cast

ST_3: i_1 (30)  [1/1] 2.35ns  loc: floyd_warshall.c:14
.reset7:15  %i_1 = add i4 %i_mid, 1

ST_3: tmp_4_mid2 (34)  [1/1] 2.07ns  loc: floyd_warshall.c:17
.reset7:19  %tmp_4_mid2 = select i1 %tmp_5_mid, i4 %i_1, i4 %i_mid

ST_3: tmp_7_cast (47)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:32  %tmp_7_cast = zext i4 %j_mid2 to i8

ST_3: tmp_11 (48)  [1/1] 1.83ns  loc: floyd_warshall.c:17
.reset7:33  %tmp_11 = add i8 %tmp_7_cast, %tmp_2

ST_3: tmp_13_cast (49)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:34  %tmp_13_cast = zext i8 %tmp_11 to i64

ST_3: A_addr_1 (50)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:35  %A_addr_1 = getelementptr [100 x i32]* %A, i64 0, i64 %tmp_13_cast

ST_3: A_load_1 (54)  [2/2] 3.25ns  loc: floyd_warshall.c:17
.reset7:39  %A_load_1 = load i32* %A_addr_1, align 4

ST_3: j_1 (64)  [1/1] 2.35ns  loc: floyd_warshall.c:16
._crit_edge:1  %j_1 = add i4 %j_mid2, 1


 <State 4>: 7.89ns
ST_4: tmp_1_mid2_cast (21)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:6  %tmp_1_mid2_cast = zext i4 %tmp_1_mid2_v to i8

ST_4: tmp_5 (35)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:20  %tmp_5 = call i7 @_ssdm_op_BitConcatenate.i7.i4.i3(i4 %tmp_4_mid2, i3 0)

ST_4: p_shl_cast (36)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:21  %p_shl_cast = zext i7 %tmp_5 to i8

ST_4: tmp_6 (37)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:22  %tmp_6 = call i5 @_ssdm_op_BitConcatenate.i5.i4.i1(i4 %tmp_4_mid2, i1 false)

ST_4: p_shl1_cast (38)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:23  %p_shl1_cast = zext i5 %tmp_6 to i8

ST_4: tmp_7 (39)  [1/1] 2.32ns  loc: floyd_warshall.c:17
.reset7:24  %tmp_7 = add i8 %p_shl_cast, %p_shl1_cast

ST_4: tmp_10 (40)  [1/1] 2.32ns  loc: floyd_warshall.c:17
.reset7:25  %tmp_10 = add i8 %tmp_1_mid2_cast, %tmp_7

ST_4: tmp_12_cast (41)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:26  %tmp_12_cast = zext i8 %tmp_10 to i64

ST_4: A_addr (42)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:27  %A_addr = getelementptr [100 x i32]* %A, i64 0, i64 %tmp_12_cast

ST_4: A_load (46)  [2/2] 3.25ns  loc: floyd_warshall.c:17
.reset7:31  %A_load = load i32* %A_addr, align 4

ST_4: tmp_12 (51)  [1/1] 2.32ns  loc: floyd_warshall.c:17
.reset7:36  %tmp_12 = add i8 %tmp_7_cast, %tmp_7

ST_4: tmp_14_cast (52)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:37  %tmp_14_cast = zext i8 %tmp_12 to i64

ST_4: A_addr_2 (53)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:38  %A_addr_2 = getelementptr [100 x i32]* %A, i64 0, i64 %tmp_14_cast

ST_4: A_load_1 (54)  [1/2] 3.25ns  loc: floyd_warshall.c:17
.reset7:39  %A_load_1 = load i32* %A_addr_1, align 4

ST_4: A_load_2 (56)  [2/2] 3.25ns  loc: floyd_warshall.c:17
.reset7:41  %A_load_2 = load i32* %A_addr_2, align 4


 <State 5>: 9.42ns
ST_5: StgValue_57 (16)  [1/1] 0.00ns
.reset7:1  call void (...)* @_ssdm_op_SpecLoopName([34 x i8]* @OUTER_LOOP_MIDDLE_LO)

ST_5: empty_2 (17)  [1/1] 0.00ns
.reset7:2  %empty_2 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 1000, i64 1000, i64 1000) nounwind

ST_5: StgValue_59 (31)  [1/1] 0.00ns
.reset7:16  call void (...)* @_ssdm_op_SpecLoopName([23 x i8]* @MIDDLE_LOOP_INNER_LO)

ST_5: StgValue_60 (43)  [1/1] 0.00ns  loc: floyd_warshall.c:16
.reset7:28  call void (...)* @_ssdm_op_SpecLoopName([11 x i8]* @p_str3) nounwind

ST_5: tmp_s (44)  [1/1] 0.00ns  loc: floyd_warshall.c:16
.reset7:29  %tmp_s = call i32 (...)* @_ssdm_op_SpecRegionBegin([11 x i8]* @p_str3) nounwind

ST_5: StgValue_62 (45)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:30  call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind

ST_5: A_load (46)  [1/2] 3.25ns  loc: floyd_warshall.c:17
.reset7:31  %A_load = load i32* %A_addr, align 4

ST_5: tmp_8 (55)  [1/1] 2.90ns  loc: floyd_warshall.c:17
.reset7:40  %tmp_8 = add i32 %A_load_1, %A_load

ST_5: A_load_2 (56)  [1/2] 3.25ns  loc: floyd_warshall.c:17
.reset7:41  %A_load_2 = load i32* %A_addr_2, align 4

ST_5: tmp_9 (57)  [1/1] 3.26ns  loc: floyd_warshall.c:17
.reset7:42  %tmp_9 = icmp ult i32 %tmp_8, %A_load_2

ST_5: StgValue_67 (58)  [1/1] 0.00ns  loc: floyd_warshall.c:17
.reset7:43  br i1 %tmp_9, label %2, label %._crit_edge

ST_5: StgValue_68 (60)  [1/1] 3.25ns  loc: floyd_warshall.c:18
:0  store i32 %tmp_8, i32* %A_addr_2, align 4

ST_5: StgValue_69 (61)  [1/1] 0.00ns  loc: floyd_warshall.c:18
:1  br label %._crit_edge

ST_5: empty (63)  [1/1] 0.00ns  loc: floyd_warshall.c:19
._crit_edge:0  %empty = call i32 (...)* @_ssdm_op_SpecRegionEnd([11 x i8]* @p_str3, i32 %tmp_s) nounwind

ST_5: StgValue_71 (67)  [1/1] 0.00ns
._crit_edge:4  br label %1


 <State 6>: 0.00ns
ST_6: StgValue_72 (69)  [1/1] 0.00ns  loc: floyd_warshall.c:22
:0  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.59ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('indvar_flatten1') with incoming values : ('indvar_flatten_next1') [6]  (1.59 ns)

 <State 2>: 7.24ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', floyd_warshall.c:16) [10]  (0 ns)
	'icmp' operation ('tmp_4', floyd_warshall.c:16) [28]  (3.1 ns)
	'and' operation ('tmp_5_mid', floyd_warshall.c:16) [29]  (2.07 ns)
	'or' operation ('tmp_3', floyd_warshall.c:16) [32]  (0 ns)
	'select' operation ('j_mid2', floyd_warshall.c:16) [33]  (2.07 ns)

 <State 3>: 6.92ns
The critical path consists of the following:
	'add' operation ('tmp_2', floyd_warshall.c:17) [26]  (1.83 ns)
	'add' operation ('tmp_11', floyd_warshall.c:17) [48]  (1.83 ns)
	'getelementptr' operation ('A_addr_1', floyd_warshall.c:17) [50]  (0 ns)
	'load' operation ('A_load_1', floyd_warshall.c:17) on array 'A' [54]  (3.25 ns)

 <State 4>: 7.89ns
The critical path consists of the following:
	'add' operation ('tmp_7', floyd_warshall.c:17) [39]  (2.32 ns)
	'add' operation ('tmp_10', floyd_warshall.c:17) [40]  (2.32 ns)
	'getelementptr' operation ('A_addr', floyd_warshall.c:17) [42]  (0 ns)
	'load' operation ('A_load', floyd_warshall.c:17) on array 'A' [46]  (3.25 ns)

 <State 5>: 9.42ns
The critical path consists of the following:
	'load' operation ('A_load', floyd_warshall.c:17) on array 'A' [46]  (3.25 ns)
	'add' operation ('tmp_8', floyd_warshall.c:17) [55]  (2.9 ns)
	'icmp' operation ('tmp_9', floyd_warshall.c:17) [57]  (3.26 ns)

 <State 6>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
