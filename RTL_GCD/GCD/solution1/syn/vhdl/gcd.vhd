-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gcd is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gcd is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gcd,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.342667,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=550,HLS_SYN_LUT=1263}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_to_int_fu_112_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_to_int_reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_to_int_fu_148_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_to_int_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_358 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_372 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal or_cond_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_377 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_assign_1_fu_211_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal n_assign_1_fu_231_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_392 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_15_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_397 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_22_reg_405 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_91_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal m_assign_3_reg_46 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_reg_67 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_23_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_reg_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_79 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_97_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_97_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_116_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_126_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_152_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_162_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs9_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_assign_neg_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_assign_fu_207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_assign_neg_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_assign_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_assign_2_to_int_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_242_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_252_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_assign_2_to_int_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_283_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_293_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_97_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_103_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component gcd_fsub_32ns_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gcd_fcmp_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    gcd_fsub_32ns_32nbkb_U1 : component gcd_fsub_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => r_reg_67,
        din1 => m_assign_3_reg_46,
        ce => ap_const_logic_1,
        dout => grp_fu_91_p2);

    gcd_fcmp_32ns_32ncud_U2 : component gcd_fcmp_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_97_p0,
        din1 => grp_fu_97_p1,
        opcode => grp_fu_97_opcode,
        dout => grp_fu_97_p2);

    gcd_fcmp_32ns_32ncud_U3 : component gcd_fcmp_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => n,
        din1 => ap_const_lv32_0,
        opcode => grp_fu_103_opcode,
        dout => grp_fu_103_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    m_assign_3_reg_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_23_fu_320_p2))) then 
                m_assign_3_reg_46 <= r_reg_67;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_assign_3_reg_46 <= n_assign_1_fu_231_p3;
            end if; 
        end if;
    end process;

    p_0_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_17_fu_274_p2 = ap_const_lv1_1))) then 
                p_0_reg_79 <= result_reg_56;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (or_cond_fu_192_p2 = ap_const_lv1_1))) then 
                p_0_reg_79 <= ap_const_lv32_BF800000;
            end if; 
        end if;
    end process;

    r_reg_67_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                r_reg_67 <= grp_fu_91_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_17_fu_274_p2))) then 
                r_reg_67 <= result_reg_56;
            end if; 
        end if;
    end process;

    result_reg_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_23_fu_320_p2))) then 
                result_reg_56 <= m_assign_3_reg_46;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                result_reg_56 <= m_assign_1_fu_211_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                m_to_int_reg_337 <= m_to_int_fu_112_p1;
                n_to_int_reg_353 <= n_to_int_fu_148_p1;
                tmp_2_reg_342 <= tmp_2_fu_142_p2;
                tmp_3_reg_348 <= grp_fu_97_p2;
                tmp_7_reg_358 <= tmp_7_fu_178_p2;
                tmp_8_reg_364 <= grp_fu_103_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (or_cond_fu_192_p2 = ap_const_lv1_0))) then
                tmp_11_reg_377 <= grp_fu_103_p2;
                tmp_s_reg_372 <= grp_fu_97_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_15_reg_397 <= tmp_15_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_16_reg_392 <= grp_fu_97_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_22_reg_405 <= grp_fu_97_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, or_cond_fu_192_p2, ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_23_fu_320_p2, tmp_17_fu_274_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (or_cond_fu_192_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_17_fu_274_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_23_fu_320_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_0_reg_79;

    grp_fu_103_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, or_cond_fu_192_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (or_cond_fu_192_p2 = ap_const_lv1_0))) then 
            grp_fu_103_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_fu_103_opcode <= ap_const_lv5_1;
        else 
            grp_fu_103_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_97_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, or_cond_fu_192_p2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_97_opcode <= ap_const_lv5_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (or_cond_fu_192_p2 = ap_const_lv1_0))) then 
            grp_fu_97_opcode <= ap_const_lv5_4;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_97_opcode <= ap_const_lv5_1;
        else 
            grp_fu_97_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_97_p0_assign_proc : process(ap_CS_fsm_state1, m, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, m_assign_3_reg_46, r_reg_67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_97_p0 <= r_reg_67;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_97_p0 <= m_assign_3_reg_46;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_97_p0 <= m;
        else 
            grp_fu_97_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_97_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, m_assign_3_reg_46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_97_p1 <= m_assign_3_reg_46;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_97_p1 <= ap_const_lv32_0;
        else 
            grp_fu_97_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_assign_1_fu_211_p3 <= 
        m_assign_fu_207_p1 when (tmp_10_fu_198_p2(0) = '1') else 
        m;
    m_assign_2_to_int_fu_238_p1 <= m_assign_3_reg_46;
    m_assign_fu_207_p1 <= m_assign_neg_fu_202_p2;
    m_assign_neg_fu_202_p2 <= (m_to_int_reg_337 xor ap_const_lv32_80000000);
    m_to_int_fu_112_p1 <= m;
    n_assign_1_fu_231_p3 <= 
        n_assign_fu_227_p1 when (tmp_12_fu_218_p2(0) = '1') else 
        n;
    n_assign_2_to_int_fu_279_p1 <= r_reg_67;
    n_assign_fu_227_p1 <= n_assign_neg_fu_222_p2;
    n_assign_neg_fu_222_p2 <= (n_to_int_reg_353 xor ap_const_lv32_80000000);
    n_to_int_fu_148_p1 <= n;
    notlhs3_fu_256_p2 <= "0" when (tmp_13_fu_242_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_297_p2 <= "0" when (tmp_18_fu_283_p4 = ap_const_lv8_FF) else "1";
    notlhs8_fu_166_p2 <= "0" when (tmp_5_fu_152_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_130_p2 <= "0" when (tmp_fu_116_p4 = ap_const_lv8_FF) else "1";
    notrhs3_fu_262_p2 <= "1" when (tmp_14_fu_252_p1 = ap_const_lv23_0) else "0";
    notrhs4_fu_303_p2 <= "1" when (tmp_19_fu_293_p1 = ap_const_lv23_0) else "0";
    notrhs9_fu_172_p2 <= "1" when (tmp_6_fu_162_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_136_p2 <= "1" when (tmp_1_fu_126_p1 = ap_const_lv23_0) else "0";
    or_cond_fu_192_p2 <= (tmp_4_fu_184_p2 and tmp_9_fu_188_p2);
    tmp_10_fu_198_p2 <= (tmp_2_reg_342 and tmp_s_reg_372);
    tmp_12_fu_218_p2 <= (tmp_7_reg_358 and tmp_11_reg_377);
    tmp_13_fu_242_p4 <= m_assign_2_to_int_fu_238_p1(30 downto 23);
    tmp_14_fu_252_p1 <= m_assign_2_to_int_fu_238_p1(23 - 1 downto 0);
    tmp_15_fu_268_p2 <= (notrhs3_fu_262_p2 or notlhs3_fu_256_p2);
    tmp_17_fu_274_p2 <= (tmp_15_fu_268_p2 and tmp_16_reg_392);
    tmp_18_fu_283_p4 <= n_assign_2_to_int_fu_279_p1(30 downto 23);
    tmp_19_fu_293_p1 <= n_assign_2_to_int_fu_279_p1(23 - 1 downto 0);
    tmp_1_fu_126_p1 <= m_to_int_fu_112_p1(23 - 1 downto 0);
    tmp_20_fu_309_p2 <= (notrhs4_fu_303_p2 or notlhs4_fu_297_p2);
    tmp_21_fu_315_p2 <= (tmp_20_fu_309_p2 and tmp_15_reg_397);
    tmp_23_fu_320_p2 <= (tmp_21_fu_315_p2 and tmp_22_reg_405);
    tmp_2_fu_142_p2 <= (notrhs_fu_136_p2 or notlhs_fu_130_p2);
    tmp_4_fu_184_p2 <= (tmp_2_reg_342 and tmp_3_reg_348);
    tmp_5_fu_152_p4 <= n_to_int_fu_148_p1(30 downto 23);
    tmp_6_fu_162_p1 <= n_to_int_fu_148_p1(23 - 1 downto 0);
    tmp_7_fu_178_p2 <= (notrhs9_fu_172_p2 or notlhs8_fu_166_p2);
    tmp_9_fu_188_p2 <= (tmp_7_reg_358 and tmp_8_reg_364);
    tmp_fu_116_p4 <= m_to_int_fu_112_p1(30 downto 23);
end behav;
