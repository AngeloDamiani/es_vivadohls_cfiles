// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module partition (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        init,
        end_r,
        a_address0,
        a_ce0,
        a_we0,
        a_d0,
        a_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] init;
input  [63:0] end_r;
output  [3:0] a_address0;
output   a_ce0;
output   a_we0;
output  [63:0] a_d0;
input  [63:0] a_q0;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] a_address0;
reg a_ce0;
reg a_we0;
reg[63:0] a_d0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] reg_82;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state10;
reg   [63:0] reg_88;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg   [3:0] a_addr_reg_160;
reg   [63:0] inf_load_reg_170;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_fu_107_p2;
reg   [0:0] tmp_reg_177;
reg   [63:0] sup_load_reg_189;
wire    ap_CS_fsm_state6;
reg   [3:0] a_addr_2_reg_195;
reg   [3:0] a_addr_3_reg_206;
wire   [0:0] grp_fu_77_p2;
wire   [0:0] tmp_1_fu_141_p2;
reg   [63:0] inf_fu_20;
wire   [63:0] inf_1_fu_112_p2;
wire    ap_CS_fsm_state5;
reg   [63:0] sup_fu_24;
wire   [63:0] sup_1_fu_126_p2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_s_fu_136_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == grp_fu_77_p2) & (1'b1 == ap_CS_fsm_state5) & (tmp_reg_177 == 1'd0))) begin
        inf_fu_20 <= inf_1_fu_112_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        inf_fu_20 <= init;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_fu_77_p2 == 1'd1))) begin
        sup_fu_24 <= sup_1_fu_126_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sup_fu_24 <= end_r;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_addr_2_reg_195 <= sup_fu_24;
        sup_load_reg_189 <= sup_fu_24;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == grp_fu_77_p2) & (tmp_1_fu_141_p2 == 1'd1))) begin
        a_addr_3_reg_206 <= inf_load_reg_170;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a_addr_reg_160 <= init;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        inf_load_reg_170 <= inf_fu_20;
        tmp_reg_177 <= tmp_fu_107_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_82 <= a_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_88 <= a_q0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11))) begin
        a_address0 = a_addr_2_reg_195;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        a_address0 = a_addr_3_reg_206;
    end else if (((1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state7) & (1'd0 == grp_fu_77_p2) & (1'd0 == tmp_1_fu_141_p2)))) begin
        a_address0 = a_addr_reg_160;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == grp_fu_77_p2) & (tmp_1_fu_141_p2 == 1'd1))) begin
        a_address0 = inf_load_reg_170;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        a_address0 = sup_fu_24;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address0 = inf_fu_20;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        a_address0 = init;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state7) & (1'd0 == grp_fu_77_p2) & (tmp_1_fu_141_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state7) & (1'd0 == grp_fu_77_p2) & (1'd0 == tmp_1_fu_141_p2)) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        a_d0 = reg_82;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        a_d0 = reg_88;
    end else begin
        a_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ((grp_fu_77_p2 == 1'd1) | (tmp_reg_177 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == grp_fu_77_p2) & (1'd0 == tmp_1_fu_141_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == grp_fu_77_p2) & (tmp_1_fu_141_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = sup_load_reg_189;

assign grp_fu_77_p2 = (($signed(a_q0) > $signed(reg_82)) ? 1'b1 : 1'b0);

assign inf_1_fu_112_p2 = (inf_load_reg_170 + 64'd1);

assign sup_1_fu_126_p2 = ($signed(sup_load_reg_189) + $signed(64'd18446744073709551615));

assign tmp_1_fu_141_p2 = (($signed(inf_load_reg_170) < $signed(tmp_s_fu_136_p2)) ? 1'b1 : 1'b0);

assign tmp_fu_107_p2 = (($signed(inf_fu_20) > $signed(end_r)) ? 1'b1 : 1'b0);

assign tmp_s_fu_136_p2 = (sup_load_reg_189 + 64'd1);

endmodule //partition
