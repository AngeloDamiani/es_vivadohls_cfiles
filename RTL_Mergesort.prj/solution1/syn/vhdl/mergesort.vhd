-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mergesort is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    arr_ce0 : OUT STD_LOGIC;
    arr_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    arr_ce1 : OUT STD_LOGIC;
    arr_we1 : OUT STD_LOGIC;
    arr_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of mergesort is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mergesort,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.590000,HLS_SYN_LAT=405,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1869,HLS_SYN_LUT=1041}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_1_fu_90_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_reg_143 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_84_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_102_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_153 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_112_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_158 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_assign_fu_118_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_assign_reg_163 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_1_fu_123_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_1_reg_169 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_assign_1_fu_133_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_assign_1_reg_174 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_merge_fu_73_ap_start : STD_LOGIC;
    signal grp_merge_fu_73_ap_done : STD_LOGIC;
    signal grp_merge_fu_73_ap_idle : STD_LOGIC;
    signal grp_merge_fu_73_ap_ready : STD_LOGIC;
    signal grp_merge_fu_73_arr_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_merge_fu_73_arr_ce0 : STD_LOGIC;
    signal grp_merge_fu_73_arr_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_merge_fu_73_arr_ce1 : STD_LOGIC;
    signal grp_merge_fu_73_arr_we1 : STD_LOGIC;
    signal grp_merge_fu_73_arr_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_reg_50 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_reg_62 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_reg_grp_merge_fu_73_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp1_fu_106_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component merge IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        i1 : IN STD_LOGIC_VECTOR (7 downto 0);
        f1 : IN STD_LOGIC_VECTOR (63 downto 0);
        f2 : IN STD_LOGIC_VECTOR (63 downto 0);
        arr_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        arr_ce0 : OUT STD_LOGIC;
        arr_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        arr_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        arr_ce1 : OUT STD_LOGIC;
        arr_we1 : OUT STD_LOGIC;
        arr_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        arr_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_merge_fu_73 : component merge
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_merge_fu_73_ap_start,
        ap_done => grp_merge_fu_73_ap_done,
        ap_idle => grp_merge_fu_73_ap_idle,
        ap_ready => grp_merge_fu_73_ap_ready,
        i1 => tmp_5_reg_153,
        f1 => tmp_6_reg_158,
        f2 => c_assign_1_reg_174,
        arr_address0 => grp_merge_fu_73_arr_address0,
        arr_ce0 => grp_merge_fu_73_arr_ce0,
        arr_q0 => arr_q0,
        arr_address1 => grp_merge_fu_73_arr_address1,
        arr_ce1 => grp_merge_fu_73_arr_ce1,
        arr_we1 => grp_merge_fu_73_arr_we1,
        arr_d1 => grp_merge_fu_73_arr_d1,
        arr_q1 => arr_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_merge_fu_73_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_merge_fu_73_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_reg_grp_merge_fu_73_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_merge_fu_73_ap_ready)) then 
                    ap_reg_grp_merge_fu_73_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    m_reg_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_3_fu_96_p2 = ap_const_lv1_0))) then 
                m_reg_50 <= m_1_reg_143;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_reg_50 <= ap_const_lv64_1;
            end if; 
        end if;
    end process;

    x_reg_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_merge_fu_73_ap_done = ap_const_logic_1))) then 
                x_reg_62 <= x_1_reg_169;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_84_p2 = ap_const_lv1_1))) then 
                x_reg_62 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_assign_1_reg_174 <= c_assign_1_fu_133_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_3_fu_96_p2))) then
                c_assign_reg_163 <= c_assign_fu_118_p2;
                tmp_5_reg_153 <= tmp_5_fu_102_p1;
                tmp_6_reg_158 <= tmp_6_fu_112_p2;
                x_1_reg_169 <= x_1_fu_123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_84_p2 = ap_const_lv1_1))) then
                    m_1_reg_143(63 downto 1) <= m_1_fu_90_p2(63 downto 1);
            end if;
        end if;
    end process;
    m_1_reg_143(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_84_p2, ap_CS_fsm_state3, tmp_3_fu_96_p2, grp_merge_fu_73_ap_done, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_84_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_3_fu_96_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_merge_fu_73_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_84_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_84_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_84_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_84_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arr_address0 <= grp_merge_fu_73_arr_address0;
    arr_address1 <= grp_merge_fu_73_arr_address1;
    arr_ce0 <= grp_merge_fu_73_arr_ce0;
    arr_ce1 <= grp_merge_fu_73_arr_ce1;
    arr_d1 <= grp_merge_fu_73_arr_d1;
    arr_we1 <= grp_merge_fu_73_arr_we1;
    c_assign_1_fu_133_p3 <= 
        c_assign_reg_163 when (tmp_i_fu_128_p2(0) = '1') else 
        ap_const_lv64_9;
    c_assign_fu_118_p2 <= std_logic_vector(unsigned(tmp1_fu_106_p2) + unsigned(m_1_reg_143));
    grp_merge_fu_73_ap_start <= ap_reg_grp_merge_fu_73_ap_start;
    m_1_fu_90_p2 <= std_logic_vector(shift_left(unsigned(m_reg_50),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp1_fu_106_p2 <= std_logic_vector(signed(ap_const_lv64_FFFFFFFFFFFFFFFF) + signed(x_reg_62));
    tmp_3_fu_96_p2 <= "1" when (signed(x_reg_62) < signed(ap_const_lv64_9)) else "0";
    tmp_5_fu_102_p1 <= x_reg_62(8 - 1 downto 0);
    tmp_6_fu_112_p2 <= std_logic_vector(unsigned(tmp1_fu_106_p2) + unsigned(m_reg_50));
    tmp_fu_84_p2 <= "1" when (signed(m_reg_50) < signed(ap_const_lv64_A)) else "0";
    tmp_i_fu_128_p2 <= "1" when (signed(c_assign_reg_163) < signed(ap_const_lv64_9)) else "0";
    x_1_fu_123_p2 <= std_logic_vector(unsigned(m_1_reg_143) + unsigned(x_reg_62));
end behav;
