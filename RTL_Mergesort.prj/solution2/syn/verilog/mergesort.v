// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mergesort,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.590000,HLS_SYN_LAT=309,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3802,HLS_SYN_LUT=1770}" *)

module mergesort (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_0_i,
        arr_0_o,
        arr_0_o_ap_vld,
        arr_1_i,
        arr_1_o,
        arr_1_o_ap_vld,
        arr_2_i,
        arr_2_o,
        arr_2_o_ap_vld,
        arr_3_i,
        arr_3_o,
        arr_3_o_ap_vld,
        arr_4_i,
        arr_4_o,
        arr_4_o_ap_vld,
        arr_5_i,
        arr_5_o,
        arr_5_o_ap_vld,
        arr_6_i,
        arr_6_o,
        arr_6_o_ap_vld,
        arr_7_i,
        arr_7_o,
        arr_7_o_ap_vld,
        arr_8_i,
        arr_8_o,
        arr_8_o_ap_vld,
        arr_9_i,
        arr_9_o,
        arr_9_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] arr_0_i;
output  [63:0] arr_0_o;
output   arr_0_o_ap_vld;
input  [63:0] arr_1_i;
output  [63:0] arr_1_o;
output   arr_1_o_ap_vld;
input  [63:0] arr_2_i;
output  [63:0] arr_2_o;
output   arr_2_o_ap_vld;
input  [63:0] arr_3_i;
output  [63:0] arr_3_o;
output   arr_3_o_ap_vld;
input  [63:0] arr_4_i;
output  [63:0] arr_4_o;
output   arr_4_o_ap_vld;
input  [63:0] arr_5_i;
output  [63:0] arr_5_o;
output   arr_5_o_ap_vld;
input  [63:0] arr_6_i;
output  [63:0] arr_6_o;
output   arr_6_o_ap_vld;
input  [63:0] arr_7_i;
output  [63:0] arr_7_o;
output   arr_7_o_ap_vld;
input  [63:0] arr_8_i;
output  [63:0] arr_8_o;
output   arr_8_o_ap_vld;
input  [63:0] arr_9_i;
output  [63:0] arr_9_o;
output   arr_9_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] arr_0_o;
reg arr_0_o_ap_vld;
reg[63:0] arr_1_o;
reg arr_1_o_ap_vld;
reg[63:0] arr_2_o;
reg arr_2_o_ap_vld;
reg[63:0] arr_3_o;
reg arr_3_o_ap_vld;
reg[63:0] arr_4_o;
reg arr_4_o_ap_vld;
reg[63:0] arr_5_o;
reg arr_5_o_ap_vld;
reg[63:0] arr_6_o;
reg arr_6_o_ap_vld;
reg[63:0] arr_7_o;
reg arr_7_o_ap_vld;
reg[63:0] arr_8_o;
reg arr_8_o_ap_vld;
reg[63:0] arr_9_o;
reg arr_9_o_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] m_1_fu_200_p2;
reg   [63:0] m_1_reg_249;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_194_p2;
wire   [63:0] tmp_5_fu_218_p2;
reg   [63:0] tmp_5_reg_259;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_3_fu_206_p2;
wire   [63:0] c_assign_fu_224_p2;
reg   [63:0] c_assign_reg_264;
wire   [63:0] x_1_fu_229_p2;
reg   [63:0] x_1_reg_270;
wire   [63:0] c_assign_1_fu_239_p3;
reg   [63:0] c_assign_1_reg_275;
wire    ap_CS_fsm_state4;
wire    grp_merge_fu_154_ap_start;
wire    grp_merge_fu_154_ap_done;
wire    grp_merge_fu_154_ap_idle;
wire    grp_merge_fu_154_ap_ready;
wire   [63:0] grp_merge_fu_154_arr_0;
wire    grp_merge_fu_154_arr_0_ap_vld;
wire   [63:0] grp_merge_fu_154_arr_1;
wire    grp_merge_fu_154_arr_1_ap_vld;
wire   [63:0] grp_merge_fu_154_arr_2;
wire    grp_merge_fu_154_arr_2_ap_vld;
wire   [63:0] grp_merge_fu_154_arr_3;
wire    grp_merge_fu_154_arr_3_ap_vld;
wire   [63:0] grp_merge_fu_154_arr_4;
wire    grp_merge_fu_154_arr_4_ap_vld;
wire   [63:0] grp_merge_fu_154_arr_5;
wire    grp_merge_fu_154_arr_5_ap_vld;
wire   [63:0] grp_merge_fu_154_arr_6;
wire    grp_merge_fu_154_arr_6_ap_vld;
wire   [63:0] grp_merge_fu_154_arr_7;
wire    grp_merge_fu_154_arr_7_ap_vld;
wire   [63:0] grp_merge_fu_154_arr_8;
wire    grp_merge_fu_154_arr_8_ap_vld;
wire   [63:0] grp_merge_fu_154_arr_9;
wire    grp_merge_fu_154_arr_9_ap_vld;
reg   [63:0] m_reg_130;
reg   [63:0] x_reg_142;
wire    ap_CS_fsm_state6;
reg    ap_reg_grp_merge_fu_154_ap_start;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp1_fu_212_p2;
wire   [0:0] tmp_i_fu_234_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_reg_grp_merge_fu_154_ap_start = 1'b0;
end

merge grp_merge_fu_154(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_merge_fu_154_ap_start),
    .ap_done(grp_merge_fu_154_ap_done),
    .ap_idle(grp_merge_fu_154_ap_idle),
    .ap_ready(grp_merge_fu_154_ap_ready),
    .i1(x_reg_142),
    .f1(tmp_5_reg_259),
    .f2(c_assign_1_reg_275),
    .arr_0(grp_merge_fu_154_arr_0),
    .arr_0_ap_vld(grp_merge_fu_154_arr_0_ap_vld),
    .arr_0_read(arr_0_i),
    .arr_1(grp_merge_fu_154_arr_1),
    .arr_1_ap_vld(grp_merge_fu_154_arr_1_ap_vld),
    .arr_1_read(arr_1_i),
    .arr_2(grp_merge_fu_154_arr_2),
    .arr_2_ap_vld(grp_merge_fu_154_arr_2_ap_vld),
    .arr_2_read(arr_2_i),
    .arr_3(grp_merge_fu_154_arr_3),
    .arr_3_ap_vld(grp_merge_fu_154_arr_3_ap_vld),
    .arr_3_read(arr_3_i),
    .arr_4(grp_merge_fu_154_arr_4),
    .arr_4_ap_vld(grp_merge_fu_154_arr_4_ap_vld),
    .arr_4_read(arr_4_i),
    .arr_5(grp_merge_fu_154_arr_5),
    .arr_5_ap_vld(grp_merge_fu_154_arr_5_ap_vld),
    .arr_5_read(arr_5_i),
    .arr_6(grp_merge_fu_154_arr_6),
    .arr_6_ap_vld(grp_merge_fu_154_arr_6_ap_vld),
    .arr_6_read(arr_6_i),
    .arr_7(grp_merge_fu_154_arr_7),
    .arr_7_ap_vld(grp_merge_fu_154_arr_7_ap_vld),
    .arr_7_read(arr_7_i),
    .arr_8(grp_merge_fu_154_arr_8),
    .arr_8_ap_vld(grp_merge_fu_154_arr_8_ap_vld),
    .arr_8_read(arr_8_i),
    .arr_9(grp_merge_fu_154_arr_9),
    .arr_9_ap_vld(grp_merge_fu_154_arr_9_ap_vld),
    .arr_9_read(arr_9_i)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_merge_fu_154_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_reg_grp_merge_fu_154_ap_start <= 1'b1;
        end else if ((1'b1 == grp_merge_fu_154_ap_ready)) begin
            ap_reg_grp_merge_fu_154_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_3_fu_206_p2 == 1'd0))) begin
        m_reg_130 <= m_1_reg_249;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_reg_130 <= 64'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_merge_fu_154_ap_done == 1'b1))) begin
        x_reg_142 <= x_1_reg_270;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_194_p2 == 1'd1))) begin
        x_reg_142 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_assign_1_reg_275 <= c_assign_1_fu_239_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_3_fu_206_p2))) begin
        c_assign_reg_264 <= c_assign_fu_224_p2;
        tmp_5_reg_259 <= tmp_5_fu_218_p2;
        x_1_reg_270 <= x_1_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_194_p2 == 1'd1))) begin
        m_1_reg_249[63 : 1] <= m_1_fu_200_p2[63 : 1];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_194_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_194_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_merge_fu_154_arr_0_ap_vld))) begin
        arr_0_o = grp_merge_fu_154_arr_0;
    end else begin
        arr_0_o = arr_0_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        arr_0_o_ap_vld = grp_merge_fu_154_arr_0_ap_vld;
    end else begin
        arr_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_merge_fu_154_arr_1_ap_vld))) begin
        arr_1_o = grp_merge_fu_154_arr_1;
    end else begin
        arr_1_o = arr_1_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        arr_1_o_ap_vld = grp_merge_fu_154_arr_1_ap_vld;
    end else begin
        arr_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_merge_fu_154_arr_2_ap_vld))) begin
        arr_2_o = grp_merge_fu_154_arr_2;
    end else begin
        arr_2_o = arr_2_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        arr_2_o_ap_vld = grp_merge_fu_154_arr_2_ap_vld;
    end else begin
        arr_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_merge_fu_154_arr_3_ap_vld))) begin
        arr_3_o = grp_merge_fu_154_arr_3;
    end else begin
        arr_3_o = arr_3_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        arr_3_o_ap_vld = grp_merge_fu_154_arr_3_ap_vld;
    end else begin
        arr_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_merge_fu_154_arr_4_ap_vld))) begin
        arr_4_o = grp_merge_fu_154_arr_4;
    end else begin
        arr_4_o = arr_4_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        arr_4_o_ap_vld = grp_merge_fu_154_arr_4_ap_vld;
    end else begin
        arr_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_merge_fu_154_arr_5_ap_vld))) begin
        arr_5_o = grp_merge_fu_154_arr_5;
    end else begin
        arr_5_o = arr_5_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        arr_5_o_ap_vld = grp_merge_fu_154_arr_5_ap_vld;
    end else begin
        arr_5_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_merge_fu_154_arr_6_ap_vld))) begin
        arr_6_o = grp_merge_fu_154_arr_6;
    end else begin
        arr_6_o = arr_6_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        arr_6_o_ap_vld = grp_merge_fu_154_arr_6_ap_vld;
    end else begin
        arr_6_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_merge_fu_154_arr_7_ap_vld))) begin
        arr_7_o = grp_merge_fu_154_arr_7;
    end else begin
        arr_7_o = arr_7_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        arr_7_o_ap_vld = grp_merge_fu_154_arr_7_ap_vld;
    end else begin
        arr_7_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_merge_fu_154_arr_8_ap_vld))) begin
        arr_8_o = grp_merge_fu_154_arr_8;
    end else begin
        arr_8_o = arr_8_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        arr_8_o_ap_vld = grp_merge_fu_154_arr_8_ap_vld;
    end else begin
        arr_8_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_merge_fu_154_arr_9_ap_vld))) begin
        arr_9_o = grp_merge_fu_154_arr_9;
    end else begin
        arr_9_o = arr_9_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        arr_9_o_ap_vld = grp_merge_fu_154_arr_9_ap_vld;
    end else begin
        arr_9_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_194_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_3_fu_206_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_merge_fu_154_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign c_assign_1_fu_239_p3 = ((tmp_i_fu_234_p2[0:0] === 1'b1) ? c_assign_reg_264 : 64'd9);

assign c_assign_fu_224_p2 = (tmp1_fu_212_p2 + m_1_reg_249);

assign grp_merge_fu_154_ap_start = ap_reg_grp_merge_fu_154_ap_start;

assign m_1_fu_200_p2 = m_reg_130 << 64'd1;

assign tmp1_fu_212_p2 = ($signed(x_reg_142) + $signed(64'd18446744073709551615));

assign tmp_3_fu_206_p2 = (($signed(x_reg_142) < $signed(64'd9)) ? 1'b1 : 1'b0);

assign tmp_5_fu_218_p2 = (tmp1_fu_212_p2 + m_reg_130);

assign tmp_fu_194_p2 = (($signed(m_reg_130) < $signed(64'd10)) ? 1'b1 : 1'b0);

assign tmp_i_fu_234_p2 = (($signed(c_assign_reg_264) < $signed(64'd9)) ? 1'b1 : 1'b0);

assign x_1_fu_229_p2 = (m_1_reg_249 + x_reg_142);

always @ (posedge ap_clk) begin
    m_1_reg_249[0] <= 1'b0;
end

endmodule //mergesort
