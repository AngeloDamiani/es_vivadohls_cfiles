// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->
extern signed char h;



// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "arr_0"
#define AUTOTB_TVIN_arr_0  "../tv/cdatafile/c.mergesort.autotvin_arr_0.dat"
#define AUTOTB_TVOUT_arr_0  "../tv/cdatafile/c.mergesort.autotvout_arr_0.dat"
// wrapc file define: "arr_1"
#define AUTOTB_TVIN_arr_1  "../tv/cdatafile/c.mergesort.autotvin_arr_1.dat"
#define AUTOTB_TVOUT_arr_1  "../tv/cdatafile/c.mergesort.autotvout_arr_1.dat"
// wrapc file define: "arr_2"
#define AUTOTB_TVIN_arr_2  "../tv/cdatafile/c.mergesort.autotvin_arr_2.dat"
#define AUTOTB_TVOUT_arr_2  "../tv/cdatafile/c.mergesort.autotvout_arr_2.dat"
// wrapc file define: "arr_3"
#define AUTOTB_TVIN_arr_3  "../tv/cdatafile/c.mergesort.autotvin_arr_3.dat"
#define AUTOTB_TVOUT_arr_3  "../tv/cdatafile/c.mergesort.autotvout_arr_3.dat"
// wrapc file define: "arr_4"
#define AUTOTB_TVIN_arr_4  "../tv/cdatafile/c.mergesort.autotvin_arr_4.dat"
#define AUTOTB_TVOUT_arr_4  "../tv/cdatafile/c.mergesort.autotvout_arr_4.dat"
// wrapc file define: "arr_5"
#define AUTOTB_TVIN_arr_5  "../tv/cdatafile/c.mergesort.autotvin_arr_5.dat"
#define AUTOTB_TVOUT_arr_5  "../tv/cdatafile/c.mergesort.autotvout_arr_5.dat"
// wrapc file define: "arr_6"
#define AUTOTB_TVIN_arr_6  "../tv/cdatafile/c.mergesort.autotvin_arr_6.dat"
#define AUTOTB_TVOUT_arr_6  "../tv/cdatafile/c.mergesort.autotvout_arr_6.dat"
// wrapc file define: "arr_7"
#define AUTOTB_TVIN_arr_7  "../tv/cdatafile/c.mergesort.autotvin_arr_7.dat"
#define AUTOTB_TVOUT_arr_7  "../tv/cdatafile/c.mergesort.autotvout_arr_7.dat"
// wrapc file define: "arr_8"
#define AUTOTB_TVIN_arr_8  "../tv/cdatafile/c.mergesort.autotvin_arr_8.dat"
#define AUTOTB_TVOUT_arr_8  "../tv/cdatafile/c.mergesort.autotvout_arr_8.dat"
// wrapc file define: "arr_9"
#define AUTOTB_TVIN_arr_9  "../tv/cdatafile/c.mergesort.autotvin_arr_9.dat"
#define AUTOTB_TVOUT_arr_9  "../tv/cdatafile/c.mergesort.autotvout_arr_9.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "arr_0"
#define AUTOTB_TVOUT_PC_arr_0  "../tv/rtldatafile/rtl.mergesort.autotvout_arr_0.dat"
// tvout file define: "arr_1"
#define AUTOTB_TVOUT_PC_arr_1  "../tv/rtldatafile/rtl.mergesort.autotvout_arr_1.dat"
// tvout file define: "arr_2"
#define AUTOTB_TVOUT_PC_arr_2  "../tv/rtldatafile/rtl.mergesort.autotvout_arr_2.dat"
// tvout file define: "arr_3"
#define AUTOTB_TVOUT_PC_arr_3  "../tv/rtldatafile/rtl.mergesort.autotvout_arr_3.dat"
// tvout file define: "arr_4"
#define AUTOTB_TVOUT_PC_arr_4  "../tv/rtldatafile/rtl.mergesort.autotvout_arr_4.dat"
// tvout file define: "arr_5"
#define AUTOTB_TVOUT_PC_arr_5  "../tv/rtldatafile/rtl.mergesort.autotvout_arr_5.dat"
// tvout file define: "arr_6"
#define AUTOTB_TVOUT_PC_arr_6  "../tv/rtldatafile/rtl.mergesort.autotvout_arr_6.dat"
// tvout file define: "arr_7"
#define AUTOTB_TVOUT_PC_arr_7  "../tv/rtldatafile/rtl.mergesort.autotvout_arr_7.dat"
// tvout file define: "arr_8"
#define AUTOTB_TVOUT_PC_arr_8  "../tv/rtldatafile/rtl.mergesort.autotvout_arr_8.dat"
// tvout file define: "arr_9"
#define AUTOTB_TVOUT_PC_arr_9  "../tv/rtldatafile/rtl.mergesort.autotvout_arr_9.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			arr_0_depth = 0;
			arr_1_depth = 0;
			arr_2_depth = 0;
			arr_3_depth = 0;
			arr_4_depth = 0;
			arr_5_depth = 0;
			arr_6_depth = 0;
			arr_7_depth = 0;
			arr_8_depth = 0;
			arr_9_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{arr_0 " << arr_0_depth << "}\n";
			total_list << "{arr_1 " << arr_1_depth << "}\n";
			total_list << "{arr_2 " << arr_2_depth << "}\n";
			total_list << "{arr_3 " << arr_3_depth << "}\n";
			total_list << "{arr_4 " << arr_4_depth << "}\n";
			total_list << "{arr_5 " << arr_5_depth << "}\n";
			total_list << "{arr_6 " << arr_6_depth << "}\n";
			total_list << "{arr_7 " << arr_7_depth << "}\n";
			total_list << "{arr_8 " << arr_8_depth << "}\n";
			total_list << "{arr_9 " << arr_9_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int arr_0_depth;
		int arr_1_depth;
		int arr_2_depth;
		int arr_3_depth;
		int arr_4_depth;
		int arr_5_depth;
		int arr_6_depth;
		int arr_7_depth;
		int arr_8_depth;
		int arr_9_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern "C" void mergesort (
long long arr[10]);

extern "C" void AESL_WRAP_mergesort (
long long arr[10])
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "arr_0"
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_0, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_0, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_arr_0, AESL_token); // data

			sc_bv<64> *arr_0_pc_buffer = new sc_bv<64>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_0', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_0', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					arr_0_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_arr_0, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_arr_0))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: arr_0
				{
					// bitslice(63, 0)
					// {
						// celement: arr(63, 0)
						// {
							sc_lv<64>* arr_lv0_0_0_2 = new sc_lv<64>[1];
						// }
					// }

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (0) => (0) @ (2)
							for (int i_0 = 0; i_0 <= 0; i_0 += 2)
							{
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr_lv0_0_0_2[hls_map_index].range(63, 0) = sc_bv<64>(arr_0_pc_buffer[hls_map_index].range(63, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (0) => (0) @ (2)
							for (int i_0 = 0; i_0 <= 0; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : arr[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : arr[0]
								// output_left_conversion : arr[i_0]
								// output_type_conversion : (arr_lv0_0_0_2[hls_map_index]).to_uint64()
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr[i_0] = (arr_lv0_0_0_2[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] arr_0_pc_buffer;
		}

		// output port post check: "arr_1"
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_1, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_1, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_arr_1, AESL_token); // data

			sc_bv<64> *arr_1_pc_buffer = new sc_bv<64>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_1', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_1', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					arr_1_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_arr_1, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_arr_1))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: arr_1
				{
					// bitslice(63, 0)
					// {
						// celement: arr(63, 0)
						// {
							sc_lv<64>* arr_lv0_1_1_2 = new sc_lv<64>[1];
						// }
					// }

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (1) => (1) @ (2)
							for (int i_0 = 1; i_0 <= 1; i_0 += 2)
							{
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr_lv0_1_1_2[hls_map_index].range(63, 0) = sc_bv<64>(arr_1_pc_buffer[hls_map_index].range(63, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (1) => (1) @ (2)
							for (int i_0 = 1; i_0 <= 1; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : arr[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : arr[0]
								// output_left_conversion : arr[i_0]
								// output_type_conversion : (arr_lv0_1_1_2[hls_map_index]).to_uint64()
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr[i_0] = (arr_lv0_1_1_2[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] arr_1_pc_buffer;
		}

		// output port post check: "arr_2"
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_2, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_2, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_arr_2, AESL_token); // data

			sc_bv<64> *arr_2_pc_buffer = new sc_bv<64>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_2', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_2', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					arr_2_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_arr_2, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_arr_2))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: arr_2
				{
					// bitslice(63, 0)
					// {
						// celement: arr(63, 0)
						// {
							sc_lv<64>* arr_lv0_2_2_2 = new sc_lv<64>[1];
						// }
					// }

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (2) => (2) @ (2)
							for (int i_0 = 2; i_0 <= 2; i_0 += 2)
							{
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr_lv0_2_2_2[hls_map_index].range(63, 0) = sc_bv<64>(arr_2_pc_buffer[hls_map_index].range(63, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (2) => (2) @ (2)
							for (int i_0 = 2; i_0 <= 2; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : arr[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : arr[0]
								// output_left_conversion : arr[i_0]
								// output_type_conversion : (arr_lv0_2_2_2[hls_map_index]).to_uint64()
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr[i_0] = (arr_lv0_2_2_2[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] arr_2_pc_buffer;
		}

		// output port post check: "arr_3"
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_3, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_3, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_arr_3, AESL_token); // data

			sc_bv<64> *arr_3_pc_buffer = new sc_bv<64>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_3', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_3', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					arr_3_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_arr_3, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_arr_3))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: arr_3
				{
					// bitslice(63, 0)
					// {
						// celement: arr(63, 0)
						// {
							sc_lv<64>* arr_lv0_3_3_2 = new sc_lv<64>[1];
						// }
					// }

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (3) => (3) @ (2)
							for (int i_0 = 3; i_0 <= 3; i_0 += 2)
							{
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr_lv0_3_3_2[hls_map_index].range(63, 0) = sc_bv<64>(arr_3_pc_buffer[hls_map_index].range(63, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (3) => (3) @ (2)
							for (int i_0 = 3; i_0 <= 3; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : arr[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : arr[0]
								// output_left_conversion : arr[i_0]
								// output_type_conversion : (arr_lv0_3_3_2[hls_map_index]).to_uint64()
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr[i_0] = (arr_lv0_3_3_2[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] arr_3_pc_buffer;
		}

		// output port post check: "arr_4"
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_4, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_4, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_arr_4, AESL_token); // data

			sc_bv<64> *arr_4_pc_buffer = new sc_bv<64>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_4', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_4', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					arr_4_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_arr_4, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_arr_4))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: arr_4
				{
					// bitslice(63, 0)
					// {
						// celement: arr(63, 0)
						// {
							sc_lv<64>* arr_lv0_4_4_2 = new sc_lv<64>[1];
						// }
					// }

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (4) => (4) @ (2)
							for (int i_0 = 4; i_0 <= 4; i_0 += 2)
							{
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr_lv0_4_4_2[hls_map_index].range(63, 0) = sc_bv<64>(arr_4_pc_buffer[hls_map_index].range(63, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (4) => (4) @ (2)
							for (int i_0 = 4; i_0 <= 4; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : arr[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : arr[0]
								// output_left_conversion : arr[i_0]
								// output_type_conversion : (arr_lv0_4_4_2[hls_map_index]).to_uint64()
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr[i_0] = (arr_lv0_4_4_2[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] arr_4_pc_buffer;
		}

		// output port post check: "arr_5"
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_5, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_5, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_arr_5, AESL_token); // data

			sc_bv<64> *arr_5_pc_buffer = new sc_bv<64>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_5', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_5', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					arr_5_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_arr_5, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_arr_5))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: arr_5
				{
					// bitslice(63, 0)
					// {
						// celement: arr(63, 0)
						// {
							sc_lv<64>* arr_lv0_5_5_2 = new sc_lv<64>[1];
						// }
					// }

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (5) => (5) @ (2)
							for (int i_0 = 5; i_0 <= 5; i_0 += 2)
							{
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr_lv0_5_5_2[hls_map_index].range(63, 0) = sc_bv<64>(arr_5_pc_buffer[hls_map_index].range(63, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (5) => (5) @ (2)
							for (int i_0 = 5; i_0 <= 5; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : arr[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : arr[0]
								// output_left_conversion : arr[i_0]
								// output_type_conversion : (arr_lv0_5_5_2[hls_map_index]).to_uint64()
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr[i_0] = (arr_lv0_5_5_2[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] arr_5_pc_buffer;
		}

		// output port post check: "arr_6"
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_6, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_6, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_arr_6, AESL_token); // data

			sc_bv<64> *arr_6_pc_buffer = new sc_bv<64>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_6', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_6', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					arr_6_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_arr_6, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_arr_6))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: arr_6
				{
					// bitslice(63, 0)
					// {
						// celement: arr(63, 0)
						// {
							sc_lv<64>* arr_lv0_6_6_2 = new sc_lv<64>[1];
						// }
					// }

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (6) => (6) @ (2)
							for (int i_0 = 6; i_0 <= 6; i_0 += 2)
							{
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr_lv0_6_6_2[hls_map_index].range(63, 0) = sc_bv<64>(arr_6_pc_buffer[hls_map_index].range(63, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (6) => (6) @ (2)
							for (int i_0 = 6; i_0 <= 6; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : arr[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : arr[0]
								// output_left_conversion : arr[i_0]
								// output_type_conversion : (arr_lv0_6_6_2[hls_map_index]).to_uint64()
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr[i_0] = (arr_lv0_6_6_2[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] arr_6_pc_buffer;
		}

		// output port post check: "arr_7"
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_7, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_7, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_arr_7, AESL_token); // data

			sc_bv<64> *arr_7_pc_buffer = new sc_bv<64>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_7', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_7', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					arr_7_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_arr_7, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_arr_7))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: arr_7
				{
					// bitslice(63, 0)
					// {
						// celement: arr(63, 0)
						// {
							sc_lv<64>* arr_lv0_7_7_2 = new sc_lv<64>[1];
						// }
					// }

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (7) => (7) @ (2)
							for (int i_0 = 7; i_0 <= 7; i_0 += 2)
							{
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr_lv0_7_7_2[hls_map_index].range(63, 0) = sc_bv<64>(arr_7_pc_buffer[hls_map_index].range(63, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (7) => (7) @ (2)
							for (int i_0 = 7; i_0 <= 7; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : arr[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : arr[0]
								// output_left_conversion : arr[i_0]
								// output_type_conversion : (arr_lv0_7_7_2[hls_map_index]).to_uint64()
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr[i_0] = (arr_lv0_7_7_2[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] arr_7_pc_buffer;
		}

		// output port post check: "arr_8"
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_8, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_8, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_arr_8, AESL_token); // data

			sc_bv<64> *arr_8_pc_buffer = new sc_bv<64>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_8', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_8', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					arr_8_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_arr_8, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_arr_8))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: arr_8
				{
					// bitslice(63, 0)
					// {
						// celement: arr(63, 0)
						// {
							sc_lv<64>* arr_lv0_8_8_2 = new sc_lv<64>[1];
						// }
					// }

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (8) => (8) @ (2)
							for (int i_0 = 8; i_0 <= 8; i_0 += 2)
							{
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr_lv0_8_8_2[hls_map_index].range(63, 0) = sc_bv<64>(arr_8_pc_buffer[hls_map_index].range(63, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (8) => (8) @ (2)
							for (int i_0 = 8; i_0 <= 8; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : arr[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : arr[0]
								// output_left_conversion : arr[i_0]
								// output_type_conversion : (arr_lv0_8_8_2[hls_map_index]).to_uint64()
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr[i_0] = (arr_lv0_8_8_2[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] arr_8_pc_buffer;
		}

		// output port post check: "arr_9"
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_9, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_arr_9, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_arr_9, AESL_token); // data

			sc_bv<64> *arr_9_pc_buffer = new sc_bv<64>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_9', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'arr_9', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					arr_9_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_arr_9, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_arr_9))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: arr_9
				{
					// bitslice(63, 0)
					// {
						// celement: arr(63, 0)
						// {
							sc_lv<64>* arr_lv0_9_9_2 = new sc_lv<64>[1];
						// }
					// }

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (9) => (9) @ (2)
							for (int i_0 = 9; i_0 <= 9; i_0 += 2)
							{
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr_lv0_9_9_2[hls_map_index].range(63, 0) = sc_bv<64>(arr_9_pc_buffer[hls_map_index].range(63, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: arr(63, 0)
						{
							// carray: (9) => (9) @ (2)
							for (int i_0 = 9; i_0 <= 9; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : arr[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : arr[0]
								// output_left_conversion : arr[i_0]
								// output_type_conversion : (arr_lv0_9_9_2[hls_map_index]).to_uint64()
								if (&(arr[0]) != NULL) // check the null address if the c port is array or others
								{
									arr[i_0] = (arr_lv0_9_9_2[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] arr_9_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "arr_0"
		char* tvin_arr_0 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_arr_0);
		char* tvout_arr_0 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_arr_0);

		// "arr_1"
		char* tvin_arr_1 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_arr_1);
		char* tvout_arr_1 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_arr_1);

		// "arr_2"
		char* tvin_arr_2 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_arr_2);
		char* tvout_arr_2 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_arr_2);

		// "arr_3"
		char* tvin_arr_3 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_arr_3);
		char* tvout_arr_3 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_arr_3);

		// "arr_4"
		char* tvin_arr_4 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_arr_4);
		char* tvout_arr_4 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_arr_4);

		// "arr_5"
		char* tvin_arr_5 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_arr_5);
		char* tvout_arr_5 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_arr_5);

		// "arr_6"
		char* tvin_arr_6 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_arr_6);
		char* tvout_arr_6 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_arr_6);

		// "arr_7"
		char* tvin_arr_7 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_arr_7);
		char* tvout_arr_7 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_arr_7);

		// "arr_8"
		char* tvin_arr_8 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_arr_8);
		char* tvout_arr_8 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_arr_8);

		// "arr_9"
		char* tvin_arr_9 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_arr_9);
		char* tvout_arr_9 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_arr_9);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_arr_0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_arr_0, tvin_arr_0);

		sc_bv<64>* arr_0_tvin_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_0
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (0) => (0) @ (2)
					for (int i_0 = 0; i_0 <= 0; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_0_tvin_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_arr_0, "%s\n", (arr_0_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_arr_0, tvin_arr_0);
		}

		tcl_file.set_num(1, &tcl_file.arr_0_depth);
		sprintf(tvin_arr_0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_arr_0, tvin_arr_0);

		// release memory allocation
		delete [] arr_0_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_arr_1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_arr_1, tvin_arr_1);

		sc_bv<64>* arr_1_tvin_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_1
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (1) => (1) @ (2)
					for (int i_0 = 1; i_0 <= 1; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_1_tvin_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_arr_1, "%s\n", (arr_1_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_arr_1, tvin_arr_1);
		}

		tcl_file.set_num(1, &tcl_file.arr_1_depth);
		sprintf(tvin_arr_1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_arr_1, tvin_arr_1);

		// release memory allocation
		delete [] arr_1_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_arr_2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_arr_2, tvin_arr_2);

		sc_bv<64>* arr_2_tvin_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_2
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (2) => (2) @ (2)
					for (int i_0 = 2; i_0 <= 2; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_2_tvin_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_arr_2, "%s\n", (arr_2_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_arr_2, tvin_arr_2);
		}

		tcl_file.set_num(1, &tcl_file.arr_2_depth);
		sprintf(tvin_arr_2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_arr_2, tvin_arr_2);

		// release memory allocation
		delete [] arr_2_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_arr_3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_arr_3, tvin_arr_3);

		sc_bv<64>* arr_3_tvin_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_3
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (3) => (3) @ (2)
					for (int i_0 = 3; i_0 <= 3; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_3_tvin_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_arr_3, "%s\n", (arr_3_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_arr_3, tvin_arr_3);
		}

		tcl_file.set_num(1, &tcl_file.arr_3_depth);
		sprintf(tvin_arr_3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_arr_3, tvin_arr_3);

		// release memory allocation
		delete [] arr_3_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_arr_4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_arr_4, tvin_arr_4);

		sc_bv<64>* arr_4_tvin_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_4
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (4) => (4) @ (2)
					for (int i_0 = 4; i_0 <= 4; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_4_tvin_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_arr_4, "%s\n", (arr_4_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_arr_4, tvin_arr_4);
		}

		tcl_file.set_num(1, &tcl_file.arr_4_depth);
		sprintf(tvin_arr_4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_arr_4, tvin_arr_4);

		// release memory allocation
		delete [] arr_4_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_arr_5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_arr_5, tvin_arr_5);

		sc_bv<64>* arr_5_tvin_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_5
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (5) => (5) @ (2)
					for (int i_0 = 5; i_0 <= 5; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_5_tvin_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_arr_5, "%s\n", (arr_5_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_arr_5, tvin_arr_5);
		}

		tcl_file.set_num(1, &tcl_file.arr_5_depth);
		sprintf(tvin_arr_5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_arr_5, tvin_arr_5);

		// release memory allocation
		delete [] arr_5_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_arr_6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_arr_6, tvin_arr_6);

		sc_bv<64>* arr_6_tvin_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_6
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (6) => (6) @ (2)
					for (int i_0 = 6; i_0 <= 6; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_6_tvin_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_arr_6, "%s\n", (arr_6_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_arr_6, tvin_arr_6);
		}

		tcl_file.set_num(1, &tcl_file.arr_6_depth);
		sprintf(tvin_arr_6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_arr_6, tvin_arr_6);

		// release memory allocation
		delete [] arr_6_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_arr_7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_arr_7, tvin_arr_7);

		sc_bv<64>* arr_7_tvin_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_7
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (7) => (7) @ (2)
					for (int i_0 = 7; i_0 <= 7; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_7_tvin_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_arr_7, "%s\n", (arr_7_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_arr_7, tvin_arr_7);
		}

		tcl_file.set_num(1, &tcl_file.arr_7_depth);
		sprintf(tvin_arr_7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_arr_7, tvin_arr_7);

		// release memory allocation
		delete [] arr_7_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_arr_8, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_arr_8, tvin_arr_8);

		sc_bv<64>* arr_8_tvin_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_8
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (8) => (8) @ (2)
					for (int i_0 = 8; i_0 <= 8; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_8_tvin_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_arr_8, "%s\n", (arr_8_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_arr_8, tvin_arr_8);
		}

		tcl_file.set_num(1, &tcl_file.arr_8_depth);
		sprintf(tvin_arr_8, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_arr_8, tvin_arr_8);

		// release memory allocation
		delete [] arr_8_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_arr_9, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_arr_9, tvin_arr_9);

		sc_bv<64>* arr_9_tvin_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_9
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (9) => (9) @ (2)
					for (int i_0 = 9; i_0 <= 9; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_9_tvin_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_arr_9, "%s\n", (arr_9_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_arr_9, tvin_arr_9);
		}

		tcl_file.set_num(1, &tcl_file.arr_9_depth);
		sprintf(tvin_arr_9, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_arr_9, tvin_arr_9);

		// release memory allocation
		delete [] arr_9_tvin_wrapc_buffer;

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		mergesort(arr);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_arr_0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_arr_0, tvout_arr_0);

		sc_bv<64>* arr_0_tvout_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_0
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (0) => (0) @ (2)
					for (int i_0 = 0; i_0 <= 0; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_0_tvout_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_arr_0, "%s\n", (arr_0_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_arr_0, tvout_arr_0);
		}

		tcl_file.set_num(1, &tcl_file.arr_0_depth);
		sprintf(tvout_arr_0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_arr_0, tvout_arr_0);

		// release memory allocation
		delete [] arr_0_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_arr_1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_arr_1, tvout_arr_1);

		sc_bv<64>* arr_1_tvout_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_1
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (1) => (1) @ (2)
					for (int i_0 = 1; i_0 <= 1; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_1_tvout_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_arr_1, "%s\n", (arr_1_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_arr_1, tvout_arr_1);
		}

		tcl_file.set_num(1, &tcl_file.arr_1_depth);
		sprintf(tvout_arr_1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_arr_1, tvout_arr_1);

		// release memory allocation
		delete [] arr_1_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_arr_2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_arr_2, tvout_arr_2);

		sc_bv<64>* arr_2_tvout_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_2
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (2) => (2) @ (2)
					for (int i_0 = 2; i_0 <= 2; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_2_tvout_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_arr_2, "%s\n", (arr_2_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_arr_2, tvout_arr_2);
		}

		tcl_file.set_num(1, &tcl_file.arr_2_depth);
		sprintf(tvout_arr_2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_arr_2, tvout_arr_2);

		// release memory allocation
		delete [] arr_2_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_arr_3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_arr_3, tvout_arr_3);

		sc_bv<64>* arr_3_tvout_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_3
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (3) => (3) @ (2)
					for (int i_0 = 3; i_0 <= 3; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_3_tvout_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_arr_3, "%s\n", (arr_3_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_arr_3, tvout_arr_3);
		}

		tcl_file.set_num(1, &tcl_file.arr_3_depth);
		sprintf(tvout_arr_3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_arr_3, tvout_arr_3);

		// release memory allocation
		delete [] arr_3_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_arr_4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_arr_4, tvout_arr_4);

		sc_bv<64>* arr_4_tvout_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_4
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (4) => (4) @ (2)
					for (int i_0 = 4; i_0 <= 4; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_4_tvout_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_arr_4, "%s\n", (arr_4_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_arr_4, tvout_arr_4);
		}

		tcl_file.set_num(1, &tcl_file.arr_4_depth);
		sprintf(tvout_arr_4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_arr_4, tvout_arr_4);

		// release memory allocation
		delete [] arr_4_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_arr_5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_arr_5, tvout_arr_5);

		sc_bv<64>* arr_5_tvout_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_5
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (5) => (5) @ (2)
					for (int i_0 = 5; i_0 <= 5; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_5_tvout_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_arr_5, "%s\n", (arr_5_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_arr_5, tvout_arr_5);
		}

		tcl_file.set_num(1, &tcl_file.arr_5_depth);
		sprintf(tvout_arr_5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_arr_5, tvout_arr_5);

		// release memory allocation
		delete [] arr_5_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_arr_6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_arr_6, tvout_arr_6);

		sc_bv<64>* arr_6_tvout_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_6
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (6) => (6) @ (2)
					for (int i_0 = 6; i_0 <= 6; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_6_tvout_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_arr_6, "%s\n", (arr_6_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_arr_6, tvout_arr_6);
		}

		tcl_file.set_num(1, &tcl_file.arr_6_depth);
		sprintf(tvout_arr_6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_arr_6, tvout_arr_6);

		// release memory allocation
		delete [] arr_6_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_arr_7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_arr_7, tvout_arr_7);

		sc_bv<64>* arr_7_tvout_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_7
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (7) => (7) @ (2)
					for (int i_0 = 7; i_0 <= 7; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_7_tvout_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_arr_7, "%s\n", (arr_7_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_arr_7, tvout_arr_7);
		}

		tcl_file.set_num(1, &tcl_file.arr_7_depth);
		sprintf(tvout_arr_7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_arr_7, tvout_arr_7);

		// release memory allocation
		delete [] arr_7_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_arr_8, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_arr_8, tvout_arr_8);

		sc_bv<64>* arr_8_tvout_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_8
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (8) => (8) @ (2)
					for (int i_0 = 8; i_0 <= 8; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_8_tvout_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_arr_8, "%s\n", (arr_8_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_arr_8, tvout_arr_8);
		}

		tcl_file.set_num(1, &tcl_file.arr_8_depth);
		sprintf(tvout_arr_8, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_arr_8, tvout_arr_8);

		// release memory allocation
		delete [] arr_8_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_arr_9, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_arr_9, tvout_arr_9);

		sc_bv<64>* arr_9_tvout_wrapc_buffer = new sc_bv<64>[1];

		// RTL Name: arr_9
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: arr(63, 0)
				{
					// carray: (9) => (9) @ (2)
					for (int i_0 = 9; i_0 <= 9; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : arr[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : arr[0]
						// regulate_c_name       : arr
						// input_type_conversion : arr[i_0]
						if (&(arr[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> arr_tmp_mem;
							arr_tmp_mem = arr[i_0];
							arr_9_tvout_wrapc_buffer[hls_map_index].range(63, 0) = arr_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_arr_9, "%s\n", (arr_9_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_arr_9, tvout_arr_9);
		}

		tcl_file.set_num(1, &tcl_file.arr_9_depth);
		sprintf(tvout_arr_9, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_arr_9, tvout_arr_9);

		// release memory allocation
		delete [] arr_9_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "arr_0"
		delete [] tvin_arr_0;
		delete [] tvout_arr_0;
		// release memory allocation: "arr_1"
		delete [] tvin_arr_1;
		delete [] tvout_arr_1;
		// release memory allocation: "arr_2"
		delete [] tvin_arr_2;
		delete [] tvout_arr_2;
		// release memory allocation: "arr_3"
		delete [] tvin_arr_3;
		delete [] tvout_arr_3;
		// release memory allocation: "arr_4"
		delete [] tvin_arr_4;
		delete [] tvout_arr_4;
		// release memory allocation: "arr_5"
		delete [] tvin_arr_5;
		delete [] tvout_arr_5;
		// release memory allocation: "arr_6"
		delete [] tvin_arr_6;
		delete [] tvout_arr_6;
		// release memory allocation: "arr_7"
		delete [] tvin_arr_7;
		delete [] tvout_arr_7;
		// release memory allocation: "arr_8"
		delete [] tvin_arr_8;
		delete [] tvout_arr_8;
		// release memory allocation: "arr_9"
		delete [] tvin_arr_9;
		delete [] tvout_arr_9;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

